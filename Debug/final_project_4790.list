
final_project_4790.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034b4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003738  08003738  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003740  08003740  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000068  080037b0  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  20000314  080037b0  00020314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112ce  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e27  00000000  00000000  000313a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00007102  00000000  00000000  000331ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000978  00000000  00000000  0003a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000766  00000000  00000000  0003ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e1bc  00000000  00000000  0003b3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012790  00000000  00000000  0006956a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d5e8  00000000  00000000  0007bcfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000022c0  00000000  00000000  001992e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0019b5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	0800369c 	.word	0x0800369c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	0800369c 	.word	0x0800369c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80005dc:	b500      	push	{lr}
 80005de:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005f2:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005f4:	2219      	movs	r2, #25
 80005f6:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80005f8:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80005fc:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000600:	2309      	movs	r3, #9
 8000602:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000604:	2307      	movs	r3, #7
 8000606:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000608:	4668      	mov	r0, sp
 800060a:	f001 f93f 	bl	800188c <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800060e:	b100      	cbz	r0, 8000612 <SystemClock_Config+0x36>
    while(1) { ; }
 8000610:	e7fe      	b.n	8000610 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000612:	f001 f8fd 	bl	8001810 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000616:	b100      	cbz	r0, 800061a <SystemClock_Config+0x3e>
    while(1) { ; }
 8000618:	e7fe      	b.n	8000618 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800061a:	230f      	movs	r3, #15
 800061c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000632:	2107      	movs	r1, #7
 8000634:	a80d      	add	r0, sp, #52	; 0x34
 8000636:	f001 fb9f 	bl	8001d78 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800063a:	b100      	cbz	r0, 800063e <SystemClock_Config+0x62>
    while(1) { ; }
 800063c:	e7fe      	b.n	800063c <SystemClock_Config+0x60>
  }
}
 800063e:	b013      	add	sp, #76	; 0x4c
 8000640:	f85d fb04 	ldr.w	pc, [sp], #4

08000644 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000644:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000646:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800064a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <CPU_CACHE_Enable+0x7c>)
 8000650:	2100      	movs	r1, #0
 8000652:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000656:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800065a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000664:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000666:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800066a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800066e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000672:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000676:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800067a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800067e:	e000      	b.n	8000682 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000680:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000682:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000686:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800068a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800068e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000692:	490b      	ldr	r1, [pc, #44]	; (80006c0 <CPU_CACHE_Enable+0x7c>)
 8000694:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000698:	4613      	mov	r3, r2
 800069a:	3a01      	subs	r2, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f2      	bne.n	8000686 <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80006a0:	1e43      	subs	r3, r0, #1
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d1ec      	bne.n	8000680 <CPU_CACHE_Enable+0x3c>
 80006a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006aa:	694b      	ldr	r3, [r1, #20]
 80006ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b0:	614b      	str	r3, [r1, #20]
 80006b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006b6:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80006ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 80006c4:	b0a4      	sub	sp, #144	; 0x90
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b9f      	ldr	r3, [pc, #636]	; (8000944 <Clock_Inits+0x280>)
 80006c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ca:	f042 0201 	orr.w	r2, r2, #1
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
 80006d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d2:	f002 0201 	and.w	r2, r2, #1
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006dc:	f042 0202 	orr.w	r2, r2, #2
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
 80006e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e4:	f002 0202 	and.w	r2, r2, #2
 80006e8:	9202      	str	r2, [sp, #8]
 80006ea:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ee:	f042 0204 	orr.w	r2, r2, #4
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
 80006f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f6:	f002 0204 	and.w	r2, r2, #4
 80006fa:	9203      	str	r2, [sp, #12]
 80006fc:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000700:	f042 0208 	orr.w	r2, r2, #8
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
 8000706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000708:	f002 0208 	and.w	r2, r2, #8
 800070c:	9204      	str	r2, [sp, #16]
 800070e:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000712:	f042 0210 	orr.w	r2, r2, #16
 8000716:	631a      	str	r2, [r3, #48]	; 0x30
 8000718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071a:	f002 0210 	and.w	r2, r2, #16
 800071e:	9205      	str	r2, [sp, #20]
 8000720:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000724:	f042 0220 	orr.w	r2, r2, #32
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
 800072a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800072c:	f002 0220 	and.w	r2, r2, #32
 8000730:	9206      	str	r2, [sp, #24]
 8000732:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800073a:	631a      	str	r2, [r3, #48]	; 0x30
 800073c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000742:	9207      	str	r2, [sp, #28]
 8000744:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
 800074e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000750:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000754:	9208      	str	r2, [sp, #32]
 8000756:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800075a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
 8000760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000762:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000766:	9209      	str	r2, [sp, #36]	; 0x24
 8000768:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800076a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800076c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
 8000772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000774:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000778:	920a      	str	r2, [sp, #40]	; 0x28
 800077a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800077c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800077e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
 8000784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000786:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800078a:	920b      	str	r2, [sp, #44]	; 0x2c
 800078c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000794:	645a      	str	r2, [r3, #68]	; 0x44
 8000796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000798:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800079c:	920c      	str	r2, [sp, #48]	; 0x30
 800079e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 80007a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	645a      	str	r2, [r3, #68]	; 0x44
 80007a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007aa:	f002 0201 	and.w	r2, r2, #1
 80007ae:	920d      	str	r2, [sp, #52]	; 0x34
 80007b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 80007b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b4:	f042 0201 	orr.w	r2, r2, #1
 80007b8:	641a      	str	r2, [r3, #64]	; 0x40
 80007ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007bc:	f002 0201 	and.w	r2, r2, #1
 80007c0:	920e      	str	r2, [sp, #56]	; 0x38
 80007c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 80007c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c6:	f042 0202 	orr.w	r2, r2, #2
 80007ca:	641a      	str	r2, [r3, #64]	; 0x40
 80007cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ce:	f002 0202 	and.w	r2, r2, #2
 80007d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80007d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 80007d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d8:	f042 0204 	orr.w	r2, r2, #4
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40
 80007de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e0:	f002 0204 	and.w	r2, r2, #4
 80007e4:	9210      	str	r2, [sp, #64]	; 0x40
 80007e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 80007e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ea:	f042 0208 	orr.w	r2, r2, #8
 80007ee:	641a      	str	r2, [r3, #64]	; 0x40
 80007f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f2:	f002 0208 	and.w	r2, r2, #8
 80007f6:	9211      	str	r2, [sp, #68]	; 0x44
 80007f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 80007fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007fc:	f042 0210 	orr.w	r2, r2, #16
 8000800:	641a      	str	r2, [r3, #64]	; 0x40
 8000802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000804:	f002 0210 	and.w	r2, r2, #16
 8000808:	9212      	str	r2, [sp, #72]	; 0x48
 800080a:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 800080c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080e:	f042 0220 	orr.w	r2, r2, #32
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
 8000814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000816:	f002 0220 	and.w	r2, r2, #32
 800081a:	9213      	str	r2, [sp, #76]	; 0x4c
 800081c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 800081e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000820:	f042 0202 	orr.w	r2, r2, #2
 8000824:	645a      	str	r2, [r3, #68]	; 0x44
 8000826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000828:	f002 0202 	and.w	r2, r2, #2
 800082c:	9214      	str	r2, [sp, #80]	; 0x50
 800082e:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 8000830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000832:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000836:	645a      	str	r2, [r3, #68]	; 0x44
 8000838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800083a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800083e:	9215      	str	r2, [sp, #84]	; 0x54
 8000840:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 8000842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000844:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
 800084a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800084c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000850:	9216      	str	r2, [sp, #88]	; 0x58
 8000852:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 8000854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000856:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800085a:	645a      	str	r2, [r3, #68]	; 0x44
 800085c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800085e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000862:	9217      	str	r2, [sp, #92]	; 0x5c
 8000864:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 8000866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800086c:	641a      	str	r2, [r3, #64]	; 0x40
 800086e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000870:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000874:	9218      	str	r2, [sp, #96]	; 0x60
 8000876:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 8000878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800087e:	641a      	str	r2, [r3, #64]	; 0x40
 8000880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000882:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000886:	9219      	str	r2, [sp, #100]	; 0x64
 8000888:	9a19      	ldr	r2, [sp, #100]	; 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 800088a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000890:	641a      	str	r2, [r3, #64]	; 0x40
 8000892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000894:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000898:	921a      	str	r2, [sp, #104]	; 0x68
 800089a:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 800089c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800089e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008a2:	641a      	str	r2, [r3, #64]	; 0x40
 80008a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80008ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 80008ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40
 80008b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80008bc:	921c      	str	r2, [sp, #112]	; 0x70
 80008be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 80008c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008c6:	645a      	str	r2, [r3, #68]	; 0x44
 80008c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ca:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80008ce:	921d      	str	r2, [sp, #116]	; 0x74
 80008d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 80008d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008d8:	645a      	str	r2, [r3, #68]	; 0x44
 80008da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80008e0:	921e      	str	r2, [sp, #120]	; 0x78
 80008e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 80008e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008ea:	645a      	str	r2, [r3, #68]	; 0x44
 80008ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ee:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80008f2:	921f      	str	r2, [sp, #124]	; 0x7c
 80008f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 80008f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
 80008fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000900:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000904:	9220      	str	r2, [sp, #128]	; 0x80
 8000906:	9a20      	ldr	r2, [sp, #128]	; 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800090a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
 8000910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000912:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000916:	9221      	str	r2, [sp, #132]	; 0x84
 8000918:	9a21      	ldr	r2, [sp, #132]	; 0x84

	// JPEG Clock
	__HAL_RCC_JPEG_CLK_ENABLE();
 800091a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091c:	f042 0202 	orr.w	r2, r2, #2
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000924:	f002 0202 	and.w	r2, r2, #2
 8000928:	9222      	str	r2, [sp, #136]	; 0x88
 800092a:	9a22      	ldr	r2, [sp, #136]	; 0x88

	// DMA2D Clock
	__HAL_RCC_DMA2D_CLK_ENABLE();
 800092c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800093a:	9323      	str	r3, [sp, #140]	; 0x8c
 800093c:	9b23      	ldr	r3, [sp, #140]	; 0x8c

}
 800093e:	b024      	add	sp, #144	; 0x90
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <Sys_Init>:
void Sys_Init(void) {
 8000948:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 800094a:	f7ff fe7b 	bl	8000644 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800094e:	f000 fa03 	bl	8000d58 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000952:	f7ff fe43 	bl	80005dc <SystemClock_Config>
	Clock_Inits();
 8000956:	f7ff feb5 	bl	80006c4 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <Sys_Init+0x2c>)
 800095c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <Sys_Init+0x30>)
 8000962:	f000 f973 	bl	8000c4c <initUart>
	setbuf(stdout, NULL);
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <Sys_Init+0x34>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2100      	movs	r1, #0
 800096c:	6898      	ldr	r0, [r3, #8]
 800096e:	f001 ff6b 	bl	8002848 <setbuf>
}
 8000972:	bd08      	pop	{r3, pc}
 8000974:	40011000 	.word	0x40011000
 8000978:	20000138 	.word	0x20000138
 800097c:	20000064 	.word	0x20000064

08000980 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000980:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000982:	f000 f9ff 	bl	8000d84 <HAL_IncTick>
}
 8000986:	bd08      	pop	{r3, pc}

08000988 <init_i2c>:
MPU6050_t mpu6050;
I2C_HandleTypeDef hi2c1;

void init_i2c();

void init_i2c() {
 8000988:	b500      	push	{lr}
 800098a:	b087      	sub	sp, #28
	GPIO_InitTypeDef gpio_init;

	hi2c1.Instance = I2C1;
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <init_i2c+0x54>)
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <init_i2c+0x58>)
 8000990:	6003      	str	r3, [r0, #0]
	hi2c1.Init.Timing = 0x00506682;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <init_i2c+0x5c>)
 8000994:	6043      	str	r3, [r0, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	6083      	str	r3, [r0, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	2201      	movs	r2, #1
 800099c:	60c2      	str	r2, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099e:	6103      	str	r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80009a0:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a2:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a4:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a6:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	f000 fd26 	bl	80013f8 <HAL_I2C_Init>
 80009ac:	b990      	cbnz	r0, 80009d4 <init_i2c+0x4c>
		printf("I2C init failed\n\r");
	}



	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80009ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b2:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_PULLUP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	9304      	str	r3, [sp, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 80009c0:	2304      	movs	r3, #4
 80009c2:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 80009c4:	eb0d 0103 	add.w	r1, sp, r3
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <init_i2c+0x60>)
 80009ca:	f000 fa5d 	bl	8000e88 <HAL_GPIO_Init>
}
 80009ce:	b007      	add	sp, #28
 80009d0:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C init failed\n\r");
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <init_i2c+0x64>)
 80009d6:	f001 ff25 	bl	8002824 <iprintf>
 80009da:	e7e8      	b.n	80009ae <init_i2c+0x26>
 80009dc:	20000088 	.word	0x20000088
 80009e0:	40005400 	.word	0x40005400
 80009e4:	00506682 	.word	0x00506682
 80009e8:	40020400 	.word	0x40020400
 80009ec:	080036cc 	.word	0x080036cc

080009f0 <main>:

int main(void){
 80009f0:	b510      	push	{r4, lr}
 80009f2:	b084      	sub	sp, #16
	Sys_Init();
 80009f4:	f7ff ffa8 	bl	8000948 <Sys_Init>
	init_i2c();
 80009f8:	f7ff ffc6 	bl	8000988 <init_i2c>
	uint8_t init_status = MPU6050_Init(&hi2c1);
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <main+0x4c>)
 80009fe:	f000 f823 	bl	8000a48 <MPU6050_Init>
	if(init_status != 0) {
 8000a02:	b9b0      	cbnz	r0, 8000a32 <main+0x42>
		printf("init failed\n\r");
	}
	while(1) {
		MPU6050_Read_Gyro(&hi2c1, &mpu6050);
 8000a04:	4c0d      	ldr	r4, [pc, #52]	; (8000a3c <main+0x4c>)
 8000a06:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	f000 f86c 	bl	8000ae8 <MPU6050_Read_Gyro>
		HAL_Delay(100);
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f000 f9c9 	bl	8000da8 <HAL_Delay>
		printf("Gyro X is %d, Y is %d, Z is %d \n\r", mpu6050.Gx, mpu6050.Gy, mpu6050.Gz);
 8000a16:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
 8000a1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000a1e:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 8000a22:	e9cd 2300 	strd	r2, r3, [sp]
 8000a26:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <main+0x50>)
 8000a2c:	f001 fefa 	bl	8002824 <iprintf>
	while(1) {
 8000a30:	e7e8      	b.n	8000a04 <main+0x14>
		printf("init failed\n\r");
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <main+0x54>)
 8000a34:	f001 fef6 	bl	8002824 <iprintf>
 8000a38:	e7e4      	b.n	8000a04 <main+0x14>
 8000a3a:	bf00      	nop
 8000a3c:	20000088 	.word	0x20000088
 8000a40:	080036e0 	.word	0x080036e0
 8000a44:	080036d0 	.word	0x080036d0

08000a48 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	4605      	mov	r5, r0
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	9302      	str	r3, [sp, #8]
 8000a54:	2301      	movs	r3, #1
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	f10d 0217 	add.w	r2, sp, #23
 8000a5c:	9200      	str	r2, [sp, #0]
 8000a5e:	2275      	movs	r2, #117	; 0x75
 8000a60:	21d0      	movs	r1, #208	; 0xd0
 8000a62:	f000 fdfd 	bl	8001660 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000a66:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000a6a:	2b68      	cmp	r3, #104	; 0x68
 8000a6c:	d003      	beq.n	8000a76 <MPU6050_Init+0x2e>
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
    }
    return 1;
 8000a6e:	2001      	movs	r0, #1
}
 8000a70:	b006      	add	sp, #24
 8000a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Data = 0;
 8000a76:	2400      	movs	r4, #0
 8000a78:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000a7c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000a80:	f8cd 8008 	str.w	r8, [sp, #8]
 8000a84:	2601      	movs	r6, #1
 8000a86:	9601      	str	r6, [sp, #4]
 8000a88:	f10d 0716 	add.w	r7, sp, #22
 8000a8c:	9700      	str	r7, [sp, #0]
 8000a8e:	4633      	mov	r3, r6
 8000a90:	226b      	movs	r2, #107	; 0x6b
 8000a92:	21d0      	movs	r1, #208	; 0xd0
 8000a94:	4628      	mov	r0, r5
 8000a96:	f000 fd0d 	bl	80014b4 <HAL_I2C_Mem_Write>
        Data = 0x07;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	f88d 3016 	strb.w	r3, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000aa0:	f8cd 8008 	str.w	r8, [sp, #8]
 8000aa4:	9601      	str	r6, [sp, #4]
 8000aa6:	9700      	str	r7, [sp, #0]
 8000aa8:	4633      	mov	r3, r6
 8000aaa:	2219      	movs	r2, #25
 8000aac:	21d0      	movs	r1, #208	; 0xd0
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f000 fd00 	bl	80014b4 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8000ab4:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000ab8:	f8cd 8008 	str.w	r8, [sp, #8]
 8000abc:	9601      	str	r6, [sp, #4]
 8000abe:	9700      	str	r7, [sp, #0]
 8000ac0:	4633      	mov	r3, r6
 8000ac2:	221c      	movs	r2, #28
 8000ac4:	21d0      	movs	r1, #208	; 0xd0
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	f000 fcf4 	bl	80014b4 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8000acc:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000ad0:	f8cd 8008 	str.w	r8, [sp, #8]
 8000ad4:	9601      	str	r6, [sp, #4]
 8000ad6:	9700      	str	r7, [sp, #0]
 8000ad8:	4633      	mov	r3, r6
 8000ada:	221b      	movs	r2, #27
 8000adc:	21d0      	movs	r1, #208	; 0xd0
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f000 fce8 	bl	80014b4 <HAL_I2C_Mem_Write>
        return 0;
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	e7c3      	b.n	8000a70 <MPU6050_Init+0x28>

08000ae8 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000ae8:	b510      	push	{r4, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	460c      	mov	r4, r1
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2306      	movs	r3, #6
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	ab04      	add	r3, sp, #16
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	2243      	movs	r2, #67	; 0x43
 8000afe:	21d0      	movs	r1, #208	; 0xd0
 8000b00:	f000 fdae 	bl	8001660 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000b04:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000b08:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8000b0c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8000b10:	b209      	sxth	r1, r1
 8000b12:	8421      	strh	r1, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000b14:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000b18:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8000b1c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000b20:	b212      	sxth	r2, r2
 8000b22:	8462      	strh	r2, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000b24:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8000b28:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000b2c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	84a3      	strh	r3, [r4, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8000b34:	ee07 1a90 	vmov	s15, r1
 8000b38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b3c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000b70 <MPU6050_Read_Gyro+0x88>
 8000b40:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000b44:	ed84 5b0a 	vstr	d5, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8000b48:	ee07 2a90 	vmov	s15, r2
 8000b4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b50:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000b54:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b60:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000b64:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
}
 8000b68:	b006      	add	sp, #24
 8000b6a:	bd10      	pop	{r4, pc}
 8000b6c:	f3af 8000 	nop.w
 8000b70:	00000000 	.word	0x00000000
 8000b74:	40606000 	.word	0x40606000

08000b78 <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000b78:	b530      	push	{r4, r5, lr}
 8000b7a:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000b7c:	6803      	ldr	r3, [r0, #0]
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d004      	beq.n	8000b8e <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <HAL_UART_MspInit+0xc4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d02c      	beq.n	8000be4 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000b8a:	b00b      	add	sp, #44	; 0x2c
 8000b8c:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000b8e:	4c2c      	ldr	r4, [pc, #176]	; (8000c40 <HAL_UART_MspInit+0xc8>)
 8000b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6323      	str	r3, [r4, #48]	; 0x30
 8000b98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	9301      	str	r3, [sp, #4]
 8000ba0:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba6:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000bb8:	4d22      	ldr	r5, [pc, #136]	; (8000c44 <HAL_UART_MspInit+0xcc>)
 8000bba:	a905      	add	r1, sp, #20
 8000bbc:	4628      	mov	r0, r5
 8000bbe:	f000 f963 	bl	8000e88 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc6:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000bc8:	a905      	add	r1, sp, #20
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f000 f95c 	bl	8000e88 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000bd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6463      	str	r3, [r4, #68]	; 0x44
 8000bd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	9302      	str	r3, [sp, #8]
 8000be0:	9b02      	ldr	r3, [sp, #8]
 8000be2:	e7d2      	b.n	8000b8a <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000be4:	4c16      	ldr	r4, [pc, #88]	; (8000c40 <HAL_UART_MspInit+0xc8>)
 8000be6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6323      	str	r3, [r4, #48]	; 0x30
 8000bee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	9303      	str	r3, [sp, #12]
 8000bf6:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000bf8:	2340      	movs	r3, #64	; 0x40
 8000bfa:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000c0c:	4d0e      	ldr	r5, [pc, #56]	; (8000c48 <HAL_UART_MspInit+0xd0>)
 8000c0e:	a905      	add	r1, sp, #20
 8000c10:	4628      	mov	r0, r5
 8000c12:	f000 f939 	bl	8000e88 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000c1a:	a905      	add	r1, sp, #20
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f000 f933 	bl	8000e88 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000c22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	6463      	str	r3, [r4, #68]	; 0x44
 8000c2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c2c:	f003 0320 	and.w	r3, r3, #32
 8000c30:	9304      	str	r3, [sp, #16]
 8000c32:	9b04      	ldr	r3, [sp, #16]
}
 8000c34:	e7a9      	b.n	8000b8a <HAL_UART_MspInit+0x12>
 8000c36:	bf00      	nop
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40011400 	.word	0x40011400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020800 	.word	0x40020800

08000c4c <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000c4c:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000c4e:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000c50:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	2200      	movs	r2, #0
 8000c54:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000c56:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000c58:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000c5a:	210c      	movs	r1, #12
 8000c5c:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c5e:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000c60:	f001 fcec 	bl	800263c <HAL_UART_Init>
}
 8000c64:	bd08      	pop	{r3, pc}
	...

08000c68 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c70:	b292      	uxth	r2, r2
 8000c72:	4802      	ldr	r0, [pc, #8]	; (8000c7c <_write+0x14>)
 8000c74:	f001 fbc3 	bl	80023fe <HAL_UART_Transmit>
	return len;
}
 8000c78:	4620      	mov	r0, r4
 8000c7a:	bd10      	pop	{r4, pc}
 8000c7c:	20000138 	.word	0x20000138

08000c80 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000c80:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000c82:	2200      	movs	r2, #0
 8000c84:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <_read+0x18>)
 8000c8e:	f001 fc14 	bl	80024ba <HAL_UART_Receive>
	return len;
}
 8000c92:	2001      	movs	r0, #1
 8000c94:	bd08      	pop	{r3, pc}
 8000c96:	bf00      	nop
 8000c98:	20000138 	.word	0x20000138

08000c9c <_close>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3
__attribute__((weak)) void _close(void){}
 8000c9c:	4770      	bx	lr

08000c9e <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8000c9e:	4770      	bx	lr

08000ca0 <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8000ca0:	4770      	bx	lr

08000ca2 <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8000ca2:	4770      	bx	lr

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cce:	f000 f813 	bl	8000cf8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f001 ff01 	bl	8002ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff fe8b 	bl	80009f0 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ce8:	08003748 	.word	0x08003748
  ldr r2, =_sbss
 8000cec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cf0:	20000314 	.word	0x20000314

08000cf4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <SystemInit+0x10>)
 8000cfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000cfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <HAL_MspInit>:
 */
__weak void HAL_MspInit(void) {
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_MspInit could be implemented in the user file
	 */
}
 8000d0c:	4770      	bx	lr
	...

08000d10 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000d10:	b510      	push	{r4, lr}
 8000d12:	4604      	mov	r4, r0
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_InitTick+0x40>)
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <HAL_InitTick+0x44>)
 8000d22:	6810      	ldr	r0, [r2, #0]
 8000d24:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d28:	f000 f89a 	bl	8000e60 <HAL_SYSTICK_Config>
 8000d2c:	b968      	cbnz	r0, 8000d4a <HAL_InitTick+0x3a>
		return HAL_ERROR;
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000d2e:	2c0f      	cmp	r4, #15
 8000d30:	d901      	bls.n	8000d36 <HAL_InitTick+0x26>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
		uwTickPrio = TickPriority;
	} else {
		return HAL_ERROR;
 8000d32:	2001      	movs	r0, #1
 8000d34:	e00a      	b.n	8000d4c <HAL_InitTick+0x3c>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d36:	2200      	movs	r2, #0
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3e:	f000 f859 	bl	8000df4 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000d42:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_InitTick+0x40>)
 8000d44:	605c      	str	r4, [r3, #4]
	}

	/* Return function status */
	return HAL_OK;
 8000d46:	2000      	movs	r0, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x3c>
		return HAL_ERROR;
 8000d4a:	2001      	movs	r0, #1
}
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000004 	.word	0x20000004
 8000d54:	20000000 	.word	0x20000000

08000d58 <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 8000d58:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_Init+0x28>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d62:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d6a:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f82f 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f7ff ffcc 	bl	8000d10 <HAL_InitTick>
	HAL_MspInit();
 8000d78:	f7ff ffc8 	bl	8000d0c <HAL_MspInit>
}
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	bd08      	pop	{r3, pc}
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
	uwTick += uwTickFreq;
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <HAL_IncTick+0x10>)
 8000d86:	6811      	ldr	r1, [r2, #0]
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_IncTick+0x14>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200001c0 	.word	0x200001c0
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 8000d9c:	4b01      	ldr	r3, [pc, #4]	; (8000da4 <HAL_GetTick+0x8>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200001c0 	.word	0x200001c0

08000da8 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000da8:	b538      	push	{r3, r4, r5, lr}
 8000daa:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff fff6 	bl	8000d9c <HAL_GetTick>
 8000db0:	4605      	mov	r5, r0
	uint32_t wait = Delay;

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000db2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000db6:	d002      	beq.n	8000dbe <HAL_Delay+0x16>
		wait += (uint32_t) (uwTickFreq);
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_Delay+0x24>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	441c      	add	r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000dbe:	f7ff ffed 	bl	8000d9c <HAL_GetTick>
 8000dc2:	1b40      	subs	r0, r0, r5
 8000dc4:	42a0      	cmp	r0, r4
 8000dc6:	d3fa      	bcc.n	8000dbe <HAL_Delay+0x16>
	}
}
 8000dc8:	bd38      	pop	{r3, r4, r5, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4906      	ldr	r1, [pc, #24]	; (8000dec <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000dd2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	0200      	lsls	r0, r0, #8
 8000dde:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000de4:	4a02      	ldr	r2, [pc, #8]	; (8000df0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000de6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000de8:	60ca      	str	r2, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00
 8000df0:	05fa0000 	.word	0x05fa0000

08000df4 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8000df4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_NVIC_SetPriority+0x60>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfe:	f1c3 0c07 	rsb	ip, r3, #7
 8000e02:	f1bc 0f04 	cmp.w	ip, #4
 8000e06:	bf28      	it	cs
 8000e08:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0c:	f103 0e04 	add.w	lr, r3, #4
 8000e10:	f1be 0f06 	cmp.w	lr, #6
 8000e14:	d914      	bls.n	8000e40 <HAL_NVIC_SetPriority+0x4c>
 8000e16:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 3eff 	mov.w	lr, #4294967295
 8000e1c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000e20:	ea21 010c 	bic.w	r1, r1, ip
 8000e24:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e26:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e2a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000e30:	2800      	cmp	r0, #0
 8000e32:	db07      	blt.n	8000e44 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_NVIC_SetPriority+0x64>)
 8000e3a:	541a      	strb	r2, [r3, r0]

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e3c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e40:	2300      	movs	r3, #0
 8000e42:	e7e9      	b.n	8000e18 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	f000 000f 	and.w	r0, r0, #15
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_NVIC_SetPriority+0x68>)
 8000e4e:	541a      	strb	r2, [r3, r0]
 8000e50:	e7f4      	b.n	8000e3c <HAL_NVIC_SetPriority+0x48>
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00
 8000e58:	e000e400 	.word	0xe000e400
 8000e5c:	e000ed14 	.word	0xe000ed14

08000e60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	3801      	subs	r0, #1
 8000e62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e66:	d20b      	bcs.n	8000e80 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000e6c:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_SYSTICK_Config+0x24>)
 8000e70:	21f0      	movs	r1, #240	; 0xf0
 8000e72:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e76:	2000      	movs	r0, #0
 8000e78:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e80:	2001      	movs	r0, #1
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
	return SysTick_Config(TicksNumb);
}
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <HAL_GPIO_Init>:
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	f200 80f4 	bhi.w	8001078 <HAL_GPIO_Init+0x1f0>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	e066      	b.n	8000f64 <HAL_GPIO_Init+0xdc>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8000e96:	6885      	ldr	r5, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e98:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e9c:	2403      	movs	r4, #3
 8000e9e:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ea2:	ea25 0504 	bic.w	r5, r5, r4
				temp |= (GPIO_Init->Speed << (position * 2));
 8000ea6:	68cc      	ldr	r4, [r1, #12]
 8000ea8:	fa04 f40e 	lsl.w	r4, r4, lr
 8000eac:	432c      	orrs	r4, r5
				GPIOx->OSPEEDR = temp;
 8000eae:	6084      	str	r4, [r0, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8000eb0:	6844      	ldr	r4, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8000eb2:	ea24 0402 	bic.w	r4, r4, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000eb6:	684a      	ldr	r2, [r1, #4]
 8000eb8:	f3c2 1200 	ubfx	r2, r2, #4, #1
						<< position);
 8000ebc:	409a      	lsls	r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000ebe:	4322      	orrs	r2, r4
				GPIOx->OTYPER = temp;
 8000ec0:	6042      	str	r2, [r0, #4]
 8000ec2:	e05d      	b.n	8000f80 <HAL_GPIO_Init+0xf8>
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 8000ec4:	08dc      	lsrs	r4, r3, #3
 8000ec6:	3408      	adds	r4, #8
 8000ec8:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 8000ecc:	f003 0507 	and.w	r5, r3, #7
 8000ed0:	00ad      	lsls	r5, r5, #2
 8000ed2:	f04f 0e0f 	mov.w	lr, #15
 8000ed6:	fa0e fe05 	lsl.w	lr, lr, r5
				temp &= ~((uint32_t) 0xF
 8000eda:	ea22 0e0e 	bic.w	lr, r2, lr
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8000ede:	690a      	ldr	r2, [r1, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 8000ee0:	40aa      	lsls	r2, r5
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8000ee2:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3] = temp;
 8000ee6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000eea:	e05d      	b.n	8000fa8 <HAL_GPIO_Init+0x120>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2];
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8000eec:	2209      	movs	r2, #9
 8000eee:	e000      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 8000ef0:	2200      	movs	r2, #0
						<< (4 * (position & 0x03)));
 8000ef2:	fa02 f20e 	lsl.w	r2, r2, lr
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8000ef6:	432a      	orrs	r2, r5
				SYSCFG->EXTICR[position >> 2] = temp;
 8000ef8:	3402      	adds	r4, #2
 8000efa:	4d60      	ldr	r5, [pc, #384]	; (800107c <HAL_GPIO_Init+0x1f4>)
 8000efc:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8000f00:	4a5f      	ldr	r2, [pc, #380]	; (8001080 <HAL_GPIO_Init+0x1f8>)
 8000f02:	6894      	ldr	r4, [r2, #8]
				temp &= ~((uint32_t) iocurrent);
 8000f04:	ea6f 020c 	mvn.w	r2, ip
 8000f08:	ea24 050c 	bic.w	r5, r4, ip
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8000f0c:	684e      	ldr	r6, [r1, #4]
 8000f0e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000f12:	d001      	beq.n	8000f18 <HAL_GPIO_Init+0x90>
					temp |= iocurrent;
 8000f14:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->RTSR = temp;
 8000f18:	4c59      	ldr	r4, [pc, #356]	; (8001080 <HAL_GPIO_Init+0x1f8>)
 8000f1a:	60a5      	str	r5, [r4, #8]

				temp = EXTI->FTSR;
 8000f1c:	68e4      	ldr	r4, [r4, #12]
				temp &= ~((uint32_t) iocurrent);
 8000f1e:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 8000f22:	684e      	ldr	r6, [r1, #4]
 8000f24:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000f28:	d001      	beq.n	8000f2e <HAL_GPIO_Init+0xa6>
					temp |= iocurrent;
 8000f2a:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->FTSR = temp;
 8000f2e:	4c54      	ldr	r4, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x1f8>)
 8000f30:	60e5      	str	r5, [r4, #12]

				temp = EXTI->EMR;
 8000f32:	6864      	ldr	r4, [r4, #4]
				temp &= ~((uint32_t) iocurrent);
 8000f34:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 8000f38:	684e      	ldr	r6, [r1, #4]
 8000f3a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000f3e:	d001      	beq.n	8000f44 <HAL_GPIO_Init+0xbc>
					temp |= iocurrent;
 8000f40:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->EMR = temp;
 8000f44:	4c4e      	ldr	r4, [pc, #312]	; (8001080 <HAL_GPIO_Init+0x1f8>)
 8000f46:	6065      	str	r5, [r4, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8000f48:	6824      	ldr	r4, [r4, #0]
				temp &= ~((uint32_t) iocurrent);
 8000f4a:	4022      	ands	r2, r4
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8000f4c:	684d      	ldr	r5, [r1, #4]
 8000f4e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8000f52:	d001      	beq.n	8000f58 <HAL_GPIO_Init+0xd0>
					temp |= iocurrent;
 8000f54:	ea4c 0204 	orr.w	r2, ip, r4
				}
				EXTI->IMR = temp;
 8000f58:	4c49      	ldr	r4, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x1f8>)
 8000f5a:	6022      	str	r2, [r4, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	f200 8088 	bhi.w	8001074 <HAL_GPIO_Init+0x1ec>
		ioposition = ((uint32_t) 0x01) << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	409a      	lsls	r2, r3
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8000f68:	680c      	ldr	r4, [r1, #0]
 8000f6a:	ea04 0c02 	and.w	ip, r4, r2
		if (iocurrent == ioposition) {
 8000f6e:	ea32 0404 	bics.w	r4, r2, r4
 8000f72:	d1f3      	bne.n	8000f5c <HAL_GPIO_Init+0xd4>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8000f74:	684c      	ldr	r4, [r1, #4]
 8000f76:	f004 0403 	and.w	r4, r4, #3
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 8000f7a:	3c01      	subs	r4, #1
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8000f7c:	2c01      	cmp	r4, #1
 8000f7e:	d98a      	bls.n	8000e96 <HAL_GPIO_Init+0xe>
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8000f80:	684a      	ldr	r2, [r1, #4]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	2a03      	cmp	r2, #3
 8000f88:	d009      	beq.n	8000f9e <HAL_GPIO_Init+0x116>
				temp = GPIOx->PUPDR;
 8000f8a:	68c4      	ldr	r4, [r0, #12]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f8c:	005d      	lsls	r5, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	40aa      	lsls	r2, r5
 8000f92:	ea24 0402 	bic.w	r4, r4, r2
				temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f96:	688a      	ldr	r2, [r1, #8]
 8000f98:	40aa      	lsls	r2, r5
 8000f9a:	4322      	orrs	r2, r4
				GPIOx->PUPDR = temp;
 8000f9c:	60c2      	str	r2, [r0, #12]
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8000f9e:	684a      	ldr	r2, [r1, #4]
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	2a02      	cmp	r2, #2
 8000fa6:	d08d      	beq.n	8000ec4 <HAL_GPIO_Init+0x3c>
			temp = GPIOx->MODER;
 8000fa8:	6804      	ldr	r4, [r0, #0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000faa:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fb4:	ea24 0402 	bic.w	r4, r4, r2
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fb8:	684a      	ldr	r2, [r1, #4]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fc2:	4322      	orrs	r2, r4
			GPIOx->MODER = temp;
 8000fc4:	6002      	str	r2, [r0, #0]
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 8000fc6:	684a      	ldr	r2, [r1, #4]
 8000fc8:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000fcc:	d0c6      	beq.n	8000f5c <HAL_GPIO_Init+0xd4>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <HAL_GPIO_Init+0x1fc>)
 8000fd0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000fd2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000fd6:	6454      	str	r4, [r2, #68]	; 0x44
 8000fd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000fda:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2];
 8000fe2:	089c      	lsrs	r4, r3, #2
 8000fe4:	1ca5      	adds	r5, r4, #2
 8000fe6:	4a25      	ldr	r2, [pc, #148]	; (800107c <HAL_GPIO_Init+0x1f4>)
 8000fe8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 8000fec:	f003 0e03 	and.w	lr, r3, #3
 8000ff0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ffa:	ea25 0502 	bic.w	r5, r5, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <HAL_GPIO_Init+0x200>)
 8001000:	4290      	cmp	r0, r2
 8001002:	f43f af75 	beq.w	8000ef0 <HAL_GPIO_Init+0x68>
 8001006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800100a:	4290      	cmp	r0, r2
 800100c:	d022      	beq.n	8001054 <HAL_GPIO_Init+0x1cc>
 800100e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001012:	4290      	cmp	r0, r2
 8001014:	d020      	beq.n	8001058 <HAL_GPIO_Init+0x1d0>
 8001016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800101a:	4290      	cmp	r0, r2
 800101c:	d01e      	beq.n	800105c <HAL_GPIO_Init+0x1d4>
 800101e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001022:	4290      	cmp	r0, r2
 8001024:	d01c      	beq.n	8001060 <HAL_GPIO_Init+0x1d8>
 8001026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800102a:	4290      	cmp	r0, r2
 800102c:	d01a      	beq.n	8001064 <HAL_GPIO_Init+0x1dc>
 800102e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001032:	4290      	cmp	r0, r2
 8001034:	d018      	beq.n	8001068 <HAL_GPIO_Init+0x1e0>
 8001036:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800103a:	4290      	cmp	r0, r2
 800103c:	d016      	beq.n	800106c <HAL_GPIO_Init+0x1e4>
 800103e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001042:	4290      	cmp	r0, r2
 8001044:	d014      	beq.n	8001070 <HAL_GPIO_Init+0x1e8>
 8001046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800104a:	4290      	cmp	r0, r2
 800104c:	f43f af4e 	beq.w	8000eec <HAL_GPIO_Init+0x64>
 8001050:	220a      	movs	r2, #10
 8001052:	e74e      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 8001054:	2201      	movs	r2, #1
 8001056:	e74c      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 8001058:	2202      	movs	r2, #2
 800105a:	e74a      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 800105c:	2203      	movs	r2, #3
 800105e:	e748      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 8001060:	2204      	movs	r2, #4
 8001062:	e746      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 8001064:	2205      	movs	r2, #5
 8001066:	e744      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 8001068:	2206      	movs	r2, #6
 800106a:	e742      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 800106c:	2207      	movs	r2, #7
 800106e:	e740      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
 8001070:	2208      	movs	r2, #8
 8001072:	e73e      	b.n	8000ef2 <HAL_GPIO_Init+0x6a>
			}
		}
	}
}
 8001074:	b002      	add	sp, #8
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40013800 	.word	0x40013800
 8001080:	40013c00 	.word	0x40013c00
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000

0800108c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800108c:	6803      	ldr	r3, [r0, #0]
 800108e:	699a      	ldr	r2, [r3, #24]
 8001090:	f012 0f02 	tst.w	r2, #2
 8001094:	d001      	beq.n	800109a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001096:	2200      	movs	r2, #0
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800109a:	6803      	ldr	r3, [r0, #0]
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	f012 0f01 	tst.w	r2, #1
 80010a2:	d103      	bne.n	80010ac <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80010a4:	699a      	ldr	r2, [r3, #24]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	619a      	str	r2, [r3, #24]
  }
}
 80010ac:	4770      	bx	lr

080010ae <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80010ae:	b410      	push	{r4}
 80010b0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80010b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010ba:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80010bc:	4321      	orrs	r1, r4
 80010be:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80010c2:	6802      	ldr	r2, [r0, #0]
 80010c4:	6853      	ldr	r3, [r2, #4]
 80010c6:	0d64      	lsrs	r4, r4, #21
 80010c8:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80010cc:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80010d0:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80010d4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80010d8:	f044 0403 	orr.w	r4, r4, #3
 80010dc:	ea23 0304 	bic.w	r3, r3, r4
 80010e0:	430b      	orrs	r3, r1
 80010e2:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80010e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <I2C_IsErrorOccurred>:
{
 80010ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ee:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80010f0:	6803      	ldr	r3, [r0, #0]
 80010f2:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80010f4:	f016 0610 	ands.w	r6, r6, #16
 80010f8:	d07e      	beq.n	80011f8 <I2C_IsErrorOccurred+0x10e>
 80010fa:	460d      	mov	r5, r1
 80010fc:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010fe:	2210      	movs	r2, #16
 8001100:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8001102:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	6998      	ldr	r0, [r3, #24]
 800110a:	f010 0f20 	tst.w	r0, #32
 800110e:	d132      	bne.n	8001176 <I2C_IsErrorOccurred+0x8c>
 8001110:	bb8f      	cbnz	r7, 8001176 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8001112:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001116:	d0f6      	beq.n	8001106 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001118:	f7ff fe40 	bl	8000d9c <HAL_GetTick>
 800111c:	eba0 0008 	sub.w	r0, r0, r8
 8001120:	42a8      	cmp	r0, r5
 8001122:	d801      	bhi.n	8001128 <I2C_IsErrorOccurred+0x3e>
 8001124:	2d00      	cmp	r5, #0
 8001126:	d1ee      	bne.n	8001106 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001128:	6821      	ldr	r1, [r4, #0]
 800112a:	684a      	ldr	r2, [r1, #4]
 800112c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8001130:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001134:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001136:	6988      	ldr	r0, [r1, #24]
 8001138:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800113c:	d004      	beq.n	8001148 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800113e:	3b20      	subs	r3, #32
 8001140:	bf18      	it	ne
 8001142:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8001144:	b902      	cbnz	r2, 8001148 <I2C_IsErrorOccurred+0x5e>
 8001146:	b973      	cbnz	r3, 8001166 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f013 0f20 	tst.w	r3, #32
 8001150:	d1d9      	bne.n	8001106 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001152:	f7ff fe23 	bl	8000d9c <HAL_GetTick>
 8001156:	eba0 0008 	sub.w	r0, r0, r8
 800115a:	2819      	cmp	r0, #25
 800115c:	d9f4      	bls.n	8001148 <I2C_IsErrorOccurred+0x5e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800115e:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8001162:	2701      	movs	r7, #1
              break;
 8001164:	e7cf      	b.n	8001106 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001166:	684b      	ldr	r3, [r1, #4]
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800116e:	f7ff fe15 	bl	8000d9c <HAL_GetTick>
 8001172:	4680      	mov	r8, r0
 8001174:	e7e8      	b.n	8001148 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8001176:	b90f      	cbnz	r7, 800117c <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001178:	2220      	movs	r2, #32
 800117a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800117c:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8001180:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8001182:	6822      	ldr	r2, [r4, #0]
 8001184:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001186:	f413 7f80 	tst.w	r3, #256	; 0x100
 800118a:	d005      	beq.n	8001198 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 800118c:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001194:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001196:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001198:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800119c:	d006      	beq.n	80011ac <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 800119e:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80011aa:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80011ac:	f413 7f00 	tst.w	r3, #512	; 0x200
 80011b0:	d024      	beq.n	80011fc <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 80011b2:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011bc:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80011be:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff ff63 	bl	800108c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80011c6:	6822      	ldr	r2, [r4, #0]
 80011c8:	6853      	ldr	r3, [r2, #4]
 80011ca:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80011ce:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80011d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80011dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011de:	4333      	orrs	r3, r6
 80011e0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80011e2:	2320      	movs	r3, #32
 80011e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80011ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80011f2:	4628      	mov	r0, r5
 80011f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80011f8:	2500      	movs	r5, #0
 80011fa:	e7c2      	b.n	8001182 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 80011fc:	2d00      	cmp	r5, #0
 80011fe:	d0f8      	beq.n	80011f2 <I2C_IsErrorOccurred+0x108>
 8001200:	e7de      	b.n	80011c0 <I2C_IsErrorOccurred+0xd6>

08001202 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001202:	b570      	push	{r4, r5, r6, lr}
 8001204:	4604      	mov	r4, r0
 8001206:	460d      	mov	r5, r1
 8001208:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f013 0f02 	tst.w	r3, #2
 8001212:	d11d      	bne.n	8001250 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001214:	4632      	mov	r2, r6
 8001216:	4629      	mov	r1, r5
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff ff66 	bl	80010ea <I2C_IsErrorOccurred>
 800121e:	b9c8      	cbnz	r0, 8001254 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001220:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001224:	d0f1      	beq.n	800120a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001226:	f7ff fdb9 	bl	8000d9c <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	42a8      	cmp	r0, r5
 800122e:	d801      	bhi.n	8001234 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001230:	2d00      	cmp	r5, #0
 8001232:	d1ea      	bne.n	800120a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001234:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800123c:	2320      	movs	r3, #32
 800123e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001242:	2300      	movs	r3, #0
 8001244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001248:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800124c:	2001      	movs	r0, #1
 800124e:	e000      	b.n	8001252 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001250:	2000      	movs	r0, #0
}
 8001252:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001254:	2001      	movs	r0, #1
 8001256:	e7fc      	b.n	8001252 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001258 <I2C_WaitOnFlagUntilTimeout>:
{
 8001258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800125c:	4606      	mov	r6, r0
 800125e:	4688      	mov	r8, r1
 8001260:	4617      	mov	r7, r2
 8001262:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001264:	6834      	ldr	r4, [r6, #0]
 8001266:	69a4      	ldr	r4, [r4, #24]
 8001268:	ea38 0404 	bics.w	r4, r8, r4
 800126c:	bf0c      	ite	eq
 800126e:	2401      	moveq	r4, #1
 8001270:	2400      	movne	r4, #0
 8001272:	42bc      	cmp	r4, r7
 8001274:	d118      	bne.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001276:	f1b5 3fff 	cmp.w	r5, #4294967295
 800127a:	d0f3      	beq.n	8001264 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127c:	f7ff fd8e 	bl	8000d9c <HAL_GetTick>
 8001280:	9b06      	ldr	r3, [sp, #24]
 8001282:	1ac0      	subs	r0, r0, r3
 8001284:	42a8      	cmp	r0, r5
 8001286:	d801      	bhi.n	800128c <I2C_WaitOnFlagUntilTimeout+0x34>
 8001288:	2d00      	cmp	r5, #0
 800128a:	d1eb      	bne.n	8001264 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800128c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001294:	2320      	movs	r3, #32
 8001296:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80012a0:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
 80012a6:	e000      	b.n	80012aa <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 80012a8:	2000      	movs	r0, #0
}
 80012aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080012b0 <I2C_RequestMemoryWrite>:
{
 80012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	4604      	mov	r4, r0
 80012b8:	4690      	mov	r8, r2
 80012ba:	461d      	mov	r5, r3
 80012bc:	9e08      	ldr	r6, [sp, #32]
 80012be:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <I2C_RequestMemoryWrite+0x78>)
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012c8:	b2ea      	uxtb	r2, r5
 80012ca:	f7ff fef0 	bl	80010ae <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ce:	463a      	mov	r2, r7
 80012d0:	4631      	mov	r1, r6
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff ff95 	bl	8001202 <I2C_WaitOnTXISFlagUntilTimeout>
 80012d8:	b9f8      	cbnz	r0, 800131a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012da:	2d01      	cmp	r5, #1
 80012dc:	d10e      	bne.n	80012fc <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	fa5f f288 	uxtb.w	r2, r8
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80012e6:	9700      	str	r7, [sp, #0]
 80012e8:	4633      	mov	r3, r6
 80012ea:	2200      	movs	r2, #0
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	4620      	mov	r0, r4
 80012f0:	f7ff ffb2 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 80012f4:	b9a8      	cbnz	r0, 8001322 <I2C_RequestMemoryWrite+0x72>
}
 80012f6:	b002      	add	sp, #8
 80012f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001304:	463a      	mov	r2, r7
 8001306:	4631      	mov	r1, r6
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff ff7a 	bl	8001202 <I2C_WaitOnTXISFlagUntilTimeout>
 800130e:	b930      	cbnz	r0, 800131e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	fa5f f288 	uxtb.w	r2, r8
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
 8001318:	e7e5      	b.n	80012e6 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
 800131c:	e7eb      	b.n	80012f6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800131e:	2001      	movs	r0, #1
 8001320:	e7e9      	b.n	80012f6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8001322:	2001      	movs	r0, #1
 8001324:	e7e7      	b.n	80012f6 <I2C_RequestMemoryWrite+0x46>
 8001326:	bf00      	nop
 8001328:	80002000 	.word	0x80002000

0800132c <I2C_RequestMemoryRead>:
{
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	4604      	mov	r4, r0
 8001334:	4690      	mov	r8, r2
 8001336:	461d      	mov	r5, r3
 8001338:	9e08      	ldr	r6, [sp, #32]
 800133a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <I2C_RequestMemoryRead+0x74>)
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	b2ea      	uxtb	r2, r5
 8001344:	f7ff feb3 	bl	80010ae <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001348:	463a      	mov	r2, r7
 800134a:	4631      	mov	r1, r6
 800134c:	4620      	mov	r0, r4
 800134e:	f7ff ff58 	bl	8001202 <I2C_WaitOnTXISFlagUntilTimeout>
 8001352:	b9f8      	cbnz	r0, 8001394 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001354:	2d01      	cmp	r5, #1
 8001356:	d10e      	bne.n	8001376 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	fa5f f288 	uxtb.w	r2, r8
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001360:	9700      	str	r7, [sp, #0]
 8001362:	4633      	mov	r3, r6
 8001364:	2200      	movs	r2, #0
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	4620      	mov	r0, r4
 800136a:	f7ff ff75 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 800136e:	b9a8      	cbnz	r0, 800139c <I2C_RequestMemoryRead+0x70>
}
 8001370:	b002      	add	sp, #8
 8001372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800137e:	463a      	mov	r2, r7
 8001380:	4631      	mov	r1, r6
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff ff3d 	bl	8001202 <I2C_WaitOnTXISFlagUntilTimeout>
 8001388:	b930      	cbnz	r0, 8001398 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	fa5f f288 	uxtb.w	r2, r8
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
 8001392:	e7e5      	b.n	8001360 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8001394:	2001      	movs	r0, #1
 8001396:	e7eb      	b.n	8001370 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001398:	2001      	movs	r0, #1
 800139a:	e7e9      	b.n	8001370 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
 800139e:	e7e7      	b.n	8001370 <I2C_RequestMemoryRead+0x44>
 80013a0:	80002000 	.word	0x80002000

080013a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80013a4:	b570      	push	{r4, r5, r6, lr}
 80013a6:	4605      	mov	r5, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f013 0f20 	tst.w	r3, #32
 80013b4:	d11a      	bne.n	80013ec <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b6:	4632      	mov	r2, r6
 80013b8:	4621      	mov	r1, r4
 80013ba:	4628      	mov	r0, r5
 80013bc:	f7ff fe95 	bl	80010ea <I2C_IsErrorOccurred>
 80013c0:	b9b0      	cbnz	r0, 80013f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c2:	f7ff fceb 	bl	8000d9c <HAL_GetTick>
 80013c6:	1b80      	subs	r0, r0, r6
 80013c8:	42a0      	cmp	r0, r4
 80013ca:	d801      	bhi.n	80013d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80013cc:	2c00      	cmp	r4, #0
 80013ce:	d1ed      	bne.n	80013ac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013d8:	2320      	movs	r3, #32
 80013da:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013de:	2300      	movs	r3, #0
 80013e0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80013e4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80013ec:	2000      	movs	r0, #0
 80013ee:	e7fc      	b.n	80013ea <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80013f0:	2001      	movs	r0, #1
 80013f2:	e7fa      	b.n	80013ea <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080013f4 <HAL_I2C_MspInit>:
}
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d057      	beq.n	80014ac <HAL_I2C_Init+0xb4>
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001400:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001404:	2b00      	cmp	r3, #0
 8001406:	d041      	beq.n	800148c <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001408:	2324      	movs	r3, #36	; 0x24
 800140a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800140e:	6822      	ldr	r2, [r4, #0]
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001418:	6863      	ldr	r3, [r4, #4]
 800141a:	6822      	ldr	r2, [r4, #0]
 800141c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001420:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	6893      	ldr	r3, [r2, #8]
 8001426:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800142a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800142c:	68e3      	ldr	r3, [r4, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d031      	beq.n	8001496 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001432:	68a3      	ldr	r3, [r4, #8]
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800143a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800143c:	68e3      	ldr	r3, [r4, #12]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d02f      	beq.n	80014a2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	6851      	ldr	r1, [r2, #4]
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_I2C_Init+0xb8>)
 8001448:	430b      	orrs	r3, r1
 800144a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	68d3      	ldr	r3, [r2, #12]
 8001450:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001454:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001456:	6923      	ldr	r3, [r4, #16]
 8001458:	6962      	ldr	r2, [r4, #20]
 800145a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800145c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800145e:	6822      	ldr	r2, [r4, #0]
 8001460:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001464:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001466:	69e3      	ldr	r3, [r4, #28]
 8001468:	6a21      	ldr	r1, [r4, #32]
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	430b      	orrs	r3, r1
 800146e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147a:	2000      	movs	r0, #0
 800147c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800147e:	2320      	movs	r3, #32
 8001480:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001484:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001486:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800148a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800148c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001490:	f7ff ffb0 	bl	80013f4 <HAL_I2C_MspInit>
 8001494:	e7b8      	b.n	8001408 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001496:	68a3      	ldr	r3, [r4, #8]
 8001498:	6822      	ldr	r2, [r4, #0]
 800149a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149e:	6093      	str	r3, [r2, #8]
 80014a0:	e7cc      	b.n	800143c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	e7ca      	b.n	8001442 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
}
 80014ae:	4770      	bx	lr
 80014b0:	02008000 	.word	0x02008000

080014b4 <HAL_I2C_Mem_Write>:
{
 80014b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b8:	b083      	sub	sp, #12
 80014ba:	460d      	mov	r5, r1
 80014bc:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80014c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80014c6:	b2c9      	uxtb	r1, r1
 80014c8:	2920      	cmp	r1, #32
 80014ca:	f040 80bc 	bne.w	8001646 <HAL_I2C_Mem_Write+0x192>
 80014ce:	4604      	mov	r4, r0
 80014d0:	4690      	mov	r8, r2
 80014d2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80014d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014d6:	f1ba 0f00 	cmp.w	sl, #0
 80014da:	bf18      	it	ne
 80014dc:	2b00      	cmpne	r3, #0
 80014de:	d016      	beq.n	800150e <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80014e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f000 80b2 	beq.w	800164e <HAL_I2C_Mem_Write+0x19a>
 80014ea:	f04f 0b01 	mov.w	fp, #1
 80014ee:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80014f2:	f7ff fc53 	bl	8000d9c <HAL_GetTick>
 80014f6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014f8:	9000      	str	r0, [sp, #0]
 80014fa:	2319      	movs	r3, #25
 80014fc:	465a      	mov	r2, fp
 80014fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fea8 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 8001508:	b130      	cbz	r0, 8001518 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800150a:	2001      	movs	r0, #1
 800150c:	e09c      	b.n	8001648 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001512:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001514:	2001      	movs	r0, #1
 8001516:	e097      	b.n	8001648 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001518:	2321      	movs	r3, #33	; 0x21
 800151a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001524:	2300      	movs	r3, #0
 8001526:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800152a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800152c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001530:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001532:	9601      	str	r6, [sp, #4]
 8001534:	9700      	str	r7, [sp, #0]
 8001536:	464b      	mov	r3, r9
 8001538:	4642      	mov	r2, r8
 800153a:	4629      	mov	r1, r5
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff feb7 	bl	80012b0 <I2C_RequestMemoryWrite>
 8001542:	b970      	cbnz	r0, 8001562 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001544:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001546:	b29b      	uxth	r3, r3
 8001548:	2bff      	cmp	r3, #255	; 0xff
 800154a:	d90f      	bls.n	800156c <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800154c:	22ff      	movs	r2, #255	; 0xff
 800154e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001550:	2300      	movs	r3, #0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001558:	4629      	mov	r1, r5
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fda7 	bl	80010ae <I2C_TransferConfig>
 8001560:	e021      	b.n	80015a6 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8001562:	2300      	movs	r3, #0
 8001564:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001568:	4658      	mov	r0, fp
 800156a:	e06d      	b.n	8001648 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800156c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800156e:	b292      	uxth	r2, r2
 8001570:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	4629      	mov	r1, r5
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff fd95 	bl	80010ae <I2C_TransferConfig>
 8001584:	e00f      	b.n	80015a6 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8001586:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001588:	b292      	uxth	r2, r2
 800158a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	4629      	mov	r1, r5
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fd88 	bl	80010ae <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800159e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d033      	beq.n	800160e <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a6:	4632      	mov	r2, r6
 80015a8:	4639      	mov	r1, r7
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff fe29 	bl	8001202 <I2C_WaitOnTXISFlagUntilTimeout>
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d14e      	bne.n	8001652 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80015bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015be:	3301      	adds	r3, #1
 80015c0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80015c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80015cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015ce:	3b01      	subs	r3, #1
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015d6:	b292      	uxth	r2, r2
 80015d8:	2a00      	cmp	r2, #0
 80015da:	d0e0      	beq.n	800159e <HAL_I2C_Mem_Write+0xea>
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1de      	bne.n	800159e <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015e0:	9600      	str	r6, [sp, #0]
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff fe35 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 80015ee:	bb90      	cbnz	r0, 8001656 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	2bff      	cmp	r3, #255	; 0xff
 80015f6:	d9c6      	bls.n	8001586 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f8:	22ff      	movs	r2, #255	; 0xff
 80015fa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015fc:	2300      	movs	r3, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001604:	4629      	mov	r1, r5
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff fd51 	bl	80010ae <I2C_TransferConfig>
 800160c:	e7c7      	b.n	800159e <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160e:	4632      	mov	r2, r6
 8001610:	4639      	mov	r1, r7
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fec6 	bl	80013a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001618:	b9f8      	cbnz	r0, 800165a <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	2220      	movs	r2, #32
 800161e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001620:	6821      	ldr	r1, [r4, #0]
 8001622:	684b      	ldr	r3, [r1, #4]
 8001624:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001628:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800162c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001636:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800163a:	2300      	movs	r3, #0
 800163c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001640:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001644:	e000      	b.n	8001648 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8001646:	2002      	movs	r0, #2
}
 8001648:	b003      	add	sp, #12
 800164a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800164e:	2002      	movs	r0, #2
 8001650:	e7fa      	b.n	8001648 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
 8001654:	e7f8      	b.n	8001648 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
 8001658:	e7f6      	b.n	8001648 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800165a:	2001      	movs	r0, #1
 800165c:	e7f4      	b.n	8001648 <HAL_I2C_Mem_Write+0x194>
	...

08001660 <HAL_I2C_Mem_Read>:
{
 8001660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001664:	b083      	sub	sp, #12
 8001666:	460d      	mov	r5, r1
 8001668:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800166c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800166e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001672:	b2c9      	uxtb	r1, r1
 8001674:	2920      	cmp	r1, #32
 8001676:	f040 80bd 	bne.w	80017f4 <HAL_I2C_Mem_Read+0x194>
 800167a:	4604      	mov	r4, r0
 800167c:	4690      	mov	r8, r2
 800167e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001682:	f1ba 0f00 	cmp.w	sl, #0
 8001686:	bf18      	it	ne
 8001688:	2b00      	cmpne	r3, #0
 800168a:	d016      	beq.n	80016ba <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 800168c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001690:	2b01      	cmp	r3, #1
 8001692:	f000 80b3 	beq.w	80017fc <HAL_I2C_Mem_Read+0x19c>
 8001696:	f04f 0b01 	mov.w	fp, #1
 800169a:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800169e:	f7ff fb7d 	bl	8000d9c <HAL_GetTick>
 80016a2:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016a4:	9000      	str	r0, [sp, #0]
 80016a6:	2319      	movs	r3, #25
 80016a8:	465a      	mov	r2, fp
 80016aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ae:	4620      	mov	r0, r4
 80016b0:	f7ff fdd2 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 80016b4:	b130      	cbz	r0, 80016c4 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 80016b6:	2001      	movs	r0, #1
 80016b8:	e09d      	b.n	80017f6 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016be:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80016c0:	2001      	movs	r0, #1
 80016c2:	e098      	b.n	80017f6 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016c4:	2322      	movs	r3, #34	; 0x22
 80016c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016ca:	2340      	movs	r3, #64	; 0x40
 80016cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80016d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80016d6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80016d8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016dc:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016de:	9601      	str	r6, [sp, #4]
 80016e0:	9700      	str	r7, [sp, #0]
 80016e2:	464b      	mov	r3, r9
 80016e4:	4642      	mov	r2, r8
 80016e6:	4629      	mov	r1, r5
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff fe1f 	bl	800132c <I2C_RequestMemoryRead>
 80016ee:	b970      	cbnz	r0, 800170e <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d90f      	bls.n	8001718 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f8:	22ff      	movs	r2, #255	; 0xff
 80016fa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_I2C_Mem_Read+0x1ac>)
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001704:	4629      	mov	r1, r5
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff fcd1 	bl	80010ae <I2C_TransferConfig>
 800170c:	e021      	b.n	8001752 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800170e:	2300      	movs	r3, #0
 8001710:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001714:	4658      	mov	r0, fp
 8001716:	e06e      	b.n	80017f6 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8001718:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800171a:	b292      	uxth	r2, r2
 800171c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_I2C_Mem_Read+0x1ac>)
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	4629      	mov	r1, r5
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff fcbf 	bl	80010ae <I2C_TransferConfig>
 8001730:	e00f      	b.n	8001752 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8001732:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001734:	b292      	uxth	r2, r2
 8001736:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001738:	2300      	movs	r3, #0
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	4629      	mov	r1, r5
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff fcb2 	bl	80010ae <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800174a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d034      	beq.n	80017bc <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001752:	9600      	str	r6, [sp, #0]
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	2104      	movs	r1, #4
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff fd7c 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 8001760:	2800      	cmp	r0, #0
 8001762:	d14d      	bne.n	8001800 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800176a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800176c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800176e:	3301      	adds	r3, #1
 8001770:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001772:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001774:	3a01      	subs	r2, #1
 8001776:	b292      	uxth	r2, r2
 8001778:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800177a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	3b01      	subs	r3, #1
 8001780:	b29b      	uxth	r3, r3
 8001782:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0de      	beq.n	800174a <HAL_I2C_Mem_Read+0xea>
 800178c:	2a00      	cmp	r2, #0
 800178e:	d1dc      	bne.n	800174a <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001790:	9600      	str	r6, [sp, #0]
 8001792:	463b      	mov	r3, r7
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	4620      	mov	r0, r4
 8001798:	f7ff fd5e 	bl	8001258 <I2C_WaitOnFlagUntilTimeout>
 800179c:	bb90      	cbnz	r0, 8001804 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800179e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2bff      	cmp	r3, #255	; 0xff
 80017a4:	d9c5      	bls.n	8001732 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017aa:	2300      	movs	r3, #0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b2:	4629      	mov	r1, r5
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fc7a 	bl	80010ae <I2C_TransferConfig>
 80017ba:	e7c6      	b.n	800174a <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	4632      	mov	r2, r6
 80017be:	4639      	mov	r1, r7
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff fdef 	bl	80013a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017c6:	b9f8      	cbnz	r0, 8001808 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	2220      	movs	r2, #32
 80017cc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80017ce:	6821      	ldr	r1, [r4, #0]
 80017d0:	684b      	ldr	r3, [r1, #4]
 80017d2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80017d6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80017da:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80017ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80017f2:	e000      	b.n	80017f6 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 80017f4:	2002      	movs	r0, #2
}
 80017f6:	b003      	add	sp, #12
 80017f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80017fc:	2002      	movs	r0, #2
 80017fe:	e7fa      	b.n	80017f6 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8001800:	2001      	movs	r0, #1
 8001802:	e7f8      	b.n	80017f6 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
 8001806:	e7f6      	b.n	80017f6 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
 800180a:	e7f4      	b.n	80017f6 <HAL_I2C_Mem_Read+0x196>
 800180c:	80002400 	.word	0x80002400

08001810 <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 8001810:	b510      	push	{r4, lr}
 8001812:	b082      	sub	sp, #8
	uint32_t tickstart = 0;

	__HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_PWREx_EnableOverDrive+0x74>)
 8001816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001818:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	9b01      	ldr	r3, [sp, #4]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_PWREx_EnableOverDrive+0x78>)
 800182a:	6813      	ldr	r3, [r2, #0]
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8001832:	f7ff fab3 	bl	8000d9c <HAL_GetTick>
 8001836:	4604      	mov	r4, r0

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_PWREx_EnableOverDrive+0x78>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001840:	d108      	bne.n	8001854 <HAL_PWREx_EnableOverDrive+0x44>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8001842:	f7ff faab 	bl	8000d9c <HAL_GetTick>
 8001846:	1b00      	subs	r0, r0, r4
 8001848:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800184c:	d9f4      	bls.n	8001838 <HAL_PWREx_EnableOverDrive+0x28>
			return HAL_TIMEOUT;
 800184e:	2003      	movs	r0, #3
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}
	return HAL_OK;
}
 8001850:	b002      	add	sp, #8
 8001852:	bd10      	pop	{r4, pc}
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001854:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <HAL_PWREx_EnableOverDrive+0x78>)
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	6013      	str	r3, [r2, #0]
	tickstart = HAL_GetTick();
 800185e:	f7ff fa9d 	bl	8000d9c <HAL_GetTick>
 8001862:	4604      	mov	r4, r0
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_PWREx_EnableOverDrive+0x78>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800186c:	d107      	bne.n	800187e <HAL_PWREx_EnableOverDrive+0x6e>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 800186e:	f7ff fa95 	bl	8000d9c <HAL_GetTick>
 8001872:	1b00      	subs	r0, r0, r4
 8001874:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001878:	d9f4      	bls.n	8001864 <HAL_PWREx_EnableOverDrive+0x54>
			return HAL_TIMEOUT;
 800187a:	2003      	movs	r0, #3
 800187c:	e7e8      	b.n	8001850 <HAL_PWREx_EnableOverDrive+0x40>
	return HAL_OK;
 800187e:	2000      	movs	r0, #0
 8001880:	e7e6      	b.n	8001850 <HAL_PWREx_EnableOverDrive+0x40>
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40007000 	.word	0x40007000

0800188c <HAL_RCC_OscConfig>:
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800188c:	2800      	cmp	r0, #0
 800188e:	f000 8206 	beq.w	8001c9e <HAL_RCC_OscConfig+0x412>
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001892:	b570      	push	{r4, r5, r6, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	4604      	mov	r4, r0

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001898:	6803      	ldr	r3, [r0, #0]
 800189a:	f013 0f01 	tst.w	r3, #1
 800189e:	d029      	beq.n	80018f4 <HAL_RCC_OscConfig+0x68>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a0:	4b95      	ldr	r3, [pc, #596]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d01a      	beq.n	80018e2 <HAL_RCC_OscConfig+0x56>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80018ac:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d00f      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	6863      	ldr	r3, [r4, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d040      	beq.n	8001942 <HAL_RCC_OscConfig+0xb6>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d154      	bne.n	800196e <HAL_RCC_OscConfig+0xe2>
 80018c4:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e039      	b.n	800194c <HAL_RCC_OscConfig+0xc0>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80018d8:	4b87      	ldr	r3, [pc, #540]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80018e0:	d0ea      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018ea:	d003      	beq.n	80018f4 <HAL_RCC_OscConfig+0x68>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80018ec:	6863      	ldr	r3, [r4, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 81d7 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x416>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f013 0f02 	tst.w	r3, #2
 80018fa:	d074      	beq.n	80019e6 <HAL_RCC_OscConfig+0x15a>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fc:	4b7e      	ldr	r3, [pc, #504]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f013 0f0c 	tst.w	r3, #12
 8001904:	d05e      	beq.n	80019c4 <HAL_RCC_OscConfig+0x138>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8001906:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b08      	cmp	r3, #8
 8001910:	d053      	beq.n	80019ba <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8001912:	68e3      	ldr	r3, [r4, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8089 	beq.w	8001a2c <HAL_RCC_OscConfig+0x1a0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800191a:	4a77      	ldr	r2, [pc, #476]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	6813      	ldr	r3, [r2, #0]
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001924:	f7ff fa3a 	bl	8000d9c <HAL_GetTick>
 8001928:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f013 0f02 	tst.w	r3, #2
 8001932:	d172      	bne.n	8001a1a <HAL_RCC_OscConfig+0x18e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001934:	f7ff fa32 	bl	8000d9c <HAL_GetTick>
 8001938:	1b40      	subs	r0, r0, r5
 800193a:	2802      	cmp	r0, #2
 800193c:	d9f5      	bls.n	800192a <HAL_RCC_OscConfig+0x9e>
						return HAL_TIMEOUT;
 800193e:	2003      	movs	r0, #3
 8001940:	e1b4      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001942:	4a6d      	ldr	r2, [pc, #436]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001944:	6813      	ldr	r3, [r2, #0]
 8001946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 800194c:	6863      	ldr	r3, [r4, #4]
 800194e:	b32b      	cbz	r3, 800199c <HAL_RCC_OscConfig+0x110>
				tickstart = HAL_GetTick();
 8001950:	f7ff fa24 	bl	8000d9c <HAL_GetTick>
 8001954:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001956:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800195e:	d1c9      	bne.n	80018f4 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001960:	f7ff fa1c 	bl	8000d9c <HAL_GetTick>
 8001964:	1b40      	subs	r0, r0, r5
 8001966:	2864      	cmp	r0, #100	; 0x64
 8001968:	d9f5      	bls.n	8001956 <HAL_RCC_OscConfig+0xca>
						return HAL_TIMEOUT;
 800196a:	2003      	movs	r0, #3
 800196c:	e19e      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001972:	d009      	beq.n	8001988 <HAL_RCC_OscConfig+0xfc>
 8001974:	4b60      	ldr	r3, [pc, #384]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e7e1      	b.n	800194c <HAL_RCC_OscConfig+0xc0>
 8001988:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e7d7      	b.n	800194c <HAL_RCC_OscConfig+0xc0>
				tickstart = HAL_GetTick();
 800199c:	f7ff f9fe 	bl	8000d9c <HAL_GetTick>
 80019a0:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80019a2:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80019aa:	d0a3      	beq.n	80018f4 <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80019ac:	f7ff f9f6 	bl	8000d9c <HAL_GetTick>
 80019b0:	1b40      	subs	r0, r0, r5
 80019b2:	2864      	cmp	r0, #100	; 0x64
 80019b4:	d9f5      	bls.n	80019a2 <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 80019b6:	2003      	movs	r0, #3
 80019b8:	e178      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80019ba:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019c2:	d1a6      	bne.n	8001912 <HAL_RCC_OscConfig+0x86>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c4:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f013 0f02 	tst.w	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_OscConfig+0x14a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80019ce:	68e3      	ldr	r3, [r4, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 8168 	bne.w	8001ca6 <HAL_RCC_OscConfig+0x41a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80019d6:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	6813      	ldr	r3, [r2, #0]
 80019da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019de:	6921      	ldr	r1, [r4, #16]
 80019e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019e4:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f013 0f08 	tst.w	r3, #8
 80019ec:	d046      	beq.n	8001a7c <HAL_RCC_OscConfig+0x1f0>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 80019ee:	6963      	ldr	r3, [r4, #20]
 80019f0:	b383      	cbz	r3, 8001a54 <HAL_RCC_OscConfig+0x1c8>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 80019f2:	4a41      	ldr	r2, [pc, #260]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80019fc:	f7ff f9ce 	bl	8000d9c <HAL_GetTick>
 8001a00:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a06:	f013 0f02 	tst.w	r3, #2
 8001a0a:	d137      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001a0c:	f7ff f9c6 	bl	8000d9c <HAL_GetTick>
 8001a10:	1b40      	subs	r0, r0, r5
 8001a12:	2802      	cmp	r0, #2
 8001a14:	d9f5      	bls.n	8001a02 <HAL_RCC_OscConfig+0x176>
					return HAL_TIMEOUT;
 8001a16:	2003      	movs	r0, #3
 8001a18:	e148      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001a1a:	4a37      	ldr	r2, [pc, #220]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	6813      	ldr	r3, [r2, #0]
 8001a1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a22:	6921      	ldr	r1, [r4, #16]
 8001a24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e7dc      	b.n	80019e6 <HAL_RCC_OscConfig+0x15a>
				__HAL_RCC_HSI_DISABLE();
 8001a2c:	4a32      	ldr	r2, [pc, #200]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	6813      	ldr	r3, [r2, #0]
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8001a36:	f7ff f9b1 	bl	8000d9c <HAL_GetTick>
 8001a3a:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f013 0f02 	tst.w	r3, #2
 8001a44:	d0cf      	beq.n	80019e6 <HAL_RCC_OscConfig+0x15a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001a46:	f7ff f9a9 	bl	8000d9c <HAL_GetTick>
 8001a4a:	1b40      	subs	r0, r0, r5
 8001a4c:	2802      	cmp	r0, #2
 8001a4e:	d9f5      	bls.n	8001a3c <HAL_RCC_OscConfig+0x1b0>
						return HAL_TIMEOUT;
 8001a50:	2003      	movs	r0, #3
 8001a52:	e12b      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8001a54:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001a5e:	f7ff f99d 	bl	8000d9c <HAL_GetTick>
 8001a62:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a68:	f013 0f02 	tst.w	r3, #2
 8001a6c:	d006      	beq.n	8001a7c <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001a6e:	f7ff f995 	bl	8000d9c <HAL_GetTick>
 8001a72:	1b40      	subs	r0, r0, r5
 8001a74:	2802      	cmp	r0, #2
 8001a76:	d9f5      	bls.n	8001a64 <HAL_RCC_OscConfig+0x1d8>
					return HAL_TIMEOUT;
 8001a78:	2003      	movs	r0, #3
 8001a7a:	e117      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	f013 0f04 	tst.w	r3, #4
 8001a82:	d07d      	beq.n	8001b80 <HAL_RCC_OscConfig+0x2f4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a8c:	d11e      	bne.n	8001acc <HAL_RCC_OscConfig+0x240>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 8001aa2:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x244>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aae:	68a3      	ldr	r3, [r4, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d025      	beq.n	8001b00 <HAL_RCC_OscConfig+0x274>
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d13b      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2a4>
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	671a      	str	r2, [r3, #112]	; 0x70
 8001ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ac4:	f022 0204 	bic.w	r2, r2, #4
 8001ac8:	671a      	str	r2, [r3, #112]	; 0x70
 8001aca:	e01e      	b.n	8001b0a <HAL_RCC_OscConfig+0x27e>
	FlagStatus pwrclkchanged = RESET;
 8001acc:	2500      	movs	r5, #0
 8001ace:	e7e9      	b.n	8001aa4 <HAL_RCC_OscConfig+0x218>
			PWR->CR1 |= PWR_CR1_DBP;
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001ad2:	6813      	ldr	r3, [r2, #0]
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 8001ada:	f7ff f95f 	bl	8000d9c <HAL_GetTick>
 8001ade:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ae8:	d1e1      	bne.n	8001aae <HAL_RCC_OscConfig+0x222>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8001aea:	f7ff f957 	bl	8000d9c <HAL_GetTick>
 8001aee:	1b80      	subs	r0, r0, r6
 8001af0:	2864      	cmp	r0, #100	; 0x64
 8001af2:	d9f5      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x254>
					return HAL_TIMEOUT;
 8001af4:	2003      	movs	r0, #3
 8001af6:	e0d9      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	4a72      	ldr	r2, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001b02:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8001b0a:	68a3      	ldr	r3, [r4, #8]
 8001b0c:	b333      	cbz	r3, 8001b5c <HAL_RCC_OscConfig+0x2d0>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001b0e:	f7ff f945 	bl	8000d9c <HAL_GetTick>
 8001b12:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8001b14:	4b6d      	ldr	r3, [pc, #436]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	f013 0f02 	tst.w	r3, #2
 8001b1c:	d12f      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001b1e:	f7ff f93d 	bl	8000d9c <HAL_GetTick>
 8001b22:	1b80      	subs	r0, r0, r6
 8001b24:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b28:	4298      	cmp	r0, r3
 8001b2a:	d9f3      	bls.n	8001b14 <HAL_RCC_OscConfig+0x288>
					return HAL_TIMEOUT;
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	e0bd      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d009      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2bc>
 8001b34:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001b36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	671a      	str	r2, [r3, #112]	; 0x70
 8001b3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b40:	f022 0204 	bic.w	r2, r2, #4
 8001b44:	671a      	str	r2, [r3, #112]	; 0x70
 8001b46:	e7e0      	b.n	8001b0a <HAL_RCC_OscConfig+0x27e>
 8001b48:	4b60      	ldr	r3, [pc, #384]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b4c:	f042 0204 	orr.w	r2, r2, #4
 8001b50:	671a      	str	r2, [r3, #112]	; 0x70
 8001b52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	671a      	str	r2, [r3, #112]	; 0x70
 8001b5a:	e7d6      	b.n	8001b0a <HAL_RCC_OscConfig+0x27e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001b5c:	f7ff f91e 	bl	8000d9c <HAL_GetTick>
 8001b60:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001b62:	4b5a      	ldr	r3, [pc, #360]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	f013 0f02 	tst.w	r3, #2
 8001b6a:	d008      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001b6c:	f7ff f916 	bl	8000d9c <HAL_GetTick>
 8001b70:	1b80      	subs	r0, r0, r6
 8001b72:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d9f3      	bls.n	8001b62 <HAL_RCC_OscConfig+0x2d6>
					return HAL_TIMEOUT;
 8001b7a:	2003      	movs	r0, #3
 8001b7c:	e096      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8001b7e:	b9fd      	cbnz	r5, 8001bc0 <HAL_RCC_OscConfig+0x334>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8001b80:	69a3      	ldr	r3, [r4, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8091 	beq.w	8001caa <HAL_RCC_OscConfig+0x41e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001b8a:	6892      	ldr	r2, [r2, #8]
 8001b8c:	f002 020c 	and.w	r2, r2, #12
 8001b90:	2a08      	cmp	r2, #8
 8001b92:	d059      	beq.n	8001c48 <HAL_RCC_OscConfig+0x3bc>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d019      	beq.n	8001bcc <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001b98:	4a4c      	ldr	r2, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001ba2:	f7ff f8fb 	bl	8000d9c <HAL_GetTick>
 8001ba6:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001ba8:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bb0:	d048      	beq.n	8001c44 <HAL_RCC_OscConfig+0x3b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001bb2:	f7ff f8f3 	bl	8000d9c <HAL_GetTick>
 8001bb6:	1b00      	subs	r0, r0, r4
 8001bb8:	2802      	cmp	r0, #2
 8001bba:	d9f5      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x31c>
						return HAL_TIMEOUT;
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	e075      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4a42      	ldr	r2, [pc, #264]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001bc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	e7d9      	b.n	8001b80 <HAL_RCC_OscConfig+0x2f4>
				__HAL_RCC_PLL_DISABLE();
 8001bcc:	4a3f      	ldr	r2, [pc, #252]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd4:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8001bd6:	f7ff f8e1 	bl	8000d9c <HAL_GetTick>
 8001bda:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001be4:	d006      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x368>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001be6:	f7ff f8d9 	bl	8000d9c <HAL_GetTick>
 8001bea:	1b40      	subs	r0, r0, r5
 8001bec:	2802      	cmp	r0, #2
 8001bee:	d9f5      	bls.n	8001bdc <HAL_RCC_OscConfig+0x350>
						return HAL_TIMEOUT;
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	e05b      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf4:	69e3      	ldr	r3, [r4, #28]
 8001bf6:	6a22      	ldr	r2, [r4, #32]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bfc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c02:	0852      	lsrs	r2, r2, #1
 8001c04:	3a01      	subs	r2, #1
 8001c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c12:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001c16:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001c18:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 8001c1a:	6813      	ldr	r3, [r2, #0]
 8001c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c20:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8001c22:	f7ff f8bb 	bl	8000d9c <HAL_GetTick>
 8001c26:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001c32:	f7ff f8b3 	bl	8000d9c <HAL_GetTick>
 8001c36:	1b00      	subs	r0, r0, r4
 8001c38:	2802      	cmp	r0, #2
 8001c3a:	d9f5      	bls.n	8001c28 <HAL_RCC_OscConfig+0x39c>
						return HAL_TIMEOUT;
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	e035      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
					{
				return HAL_ERROR;
			}
		}
	}
	return HAL_OK;
 8001c40:	2000      	movs	r0, #0
 8001c42:	e033      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001c44:	2000      	movs	r0, #0
 8001c46:	e031      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
			pll_config = RCC->PLLCFGR;
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_RCC_OscConfig+0x440>)
 8001c4a:	6852      	ldr	r2, [r2, #4]
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d02f      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x424>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8001c50:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 8001c54:	69e1      	ldr	r1, [r4, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8001c56:	428b      	cmp	r3, r1
 8001c58:	d12c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x428>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8001c5a:	f002 033f 	and.w	r3, r2, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 8001c5e:	6a21      	ldr	r1, [r4, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8001c60:	428b      	cmp	r3, r1
 8001c62:	d129      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x42c>
							!= (RCC_OscInitStruct->PLL.PLLN
 8001c64:	6a61      	ldr	r1, [r4, #36]	; 0x24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8001c66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001c70:	d124      	bne.n	8001cbc <HAL_RCC_OscConfig+0x430>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8001c72:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 8001c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c78:	085b      	lsrs	r3, r3, #1
 8001c7a:	3b01      	subs	r3, #1
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8001c7c:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001c80:	d11e      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x434>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8001c82:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 8001c86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8001c88:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001c8c:	d11a      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x438>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8001c8e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 8001c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8001c94:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x43c>
	return HAL_OK;
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e006      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
		return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
}
 8001ca0:	4770      	bx	lr
				return HAL_ERROR;
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	e002      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
				return HAL_ERROR;
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	e000      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
	return HAL_OK;
 8001caa:	2000      	movs	r0, #0
}
 8001cac:	b002      	add	sp, #8
 8001cae:	bd70      	pop	{r4, r5, r6, pc}
				return HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	e7fb      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	e7f9      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001cb8:	2001      	movs	r0, #1
 8001cba:	e7f7      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e7f5      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	e7f3      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	e7f1      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001cc8:	2001      	movs	r0, #1
 8001cca:	e7ef      	b.n	8001cac <HAL_RCC_OscConfig+0x420>
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8001cd0:	b508      	push	{r3, lr}
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
	uint32_t sysclockfreq = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d041      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x92>
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d141      	bne.n	8001d66 <HAL_RCC_GetSysClockFreq+0x96>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001cf0:	d012      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x48>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cf4:	6859      	ldr	r1, [r3, #4]
 8001cf6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001cfa:	481d      	ldr	r0, [pc, #116]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xa0>)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	fba1 0100 	umull	r0, r1, r1, r0
 8001d02:	f7fe faed 	bl	80002e0 <__aeabi_uldivmod>
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f3c3 4301 	ubfx	r3, r3, #16, #2
						+ 1) * 2);
 8001d0e:	3301      	adds	r3, #1
		pllp =
 8001d10:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 8001d12:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 8001d16:	e027      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x98>
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d1a:	6858      	ldr	r0, [r3, #4]
 8001d1c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001d20:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001d24:	ebbc 0c00 	subs.w	ip, ip, r0
 8001d28:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001d2c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001d30:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001d34:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001d38:	ebb1 010c 	subs.w	r1, r1, ip
 8001d3c:	eb63 030e 	sbc.w	r3, r3, lr
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d46:	00c9      	lsls	r1, r1, #3
 8001d48:	eb11 0c00 	adds.w	ip, r1, r0
 8001d4c:	f143 0300 	adc.w	r3, r3, #0
 8001d50:	0299      	lsls	r1, r3, #10
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001d52:	2300      	movs	r3, #0
 8001d54:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001d58:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001d5c:	f7fe fac0 	bl	80002e0 <__aeabi_uldivmod>
 8001d60:	e7d1      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x36>
		sysclockfreq = HSE_VALUE;
 8001d62:	4803      	ldr	r0, [pc, #12]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x98>
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xa4>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	017d7840 	.word	0x017d7840
 8001d74:	00f42400 	.word	0x00f42400

08001d78 <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	f000 80a0 	beq.w	8001ebe <HAL_RCC_ClockConfig+0x146>
		uint32_t FLatency) {
 8001d7e:	b570      	push	{r4, r5, r6, lr}
 8001d80:	460d      	mov	r5, r1
 8001d82:	4604      	mov	r4, r0
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8001d84:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <HAL_RCC_ClockConfig+0x158>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d20b      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x30>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001d90:	4a4f      	ldr	r2, [pc, #316]	; (8001ed0 <HAL_RCC_ClockConfig+0x158>)
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f023 030f 	bic.w	r3, r3, #15
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8001d9c:	6813      	ldr	r3, [r2, #0]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	428b      	cmp	r3, r1
 8001da4:	f040 808d 	bne.w	8001ec2 <HAL_RCC_ClockConfig+0x14a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	f013 0f02 	tst.w	r3, #2
 8001dae:	d017      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x68>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001db0:	f013 0f04 	tst.w	r3, #4
 8001db4:	d004      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db6:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001db8:	6893      	ldr	r3, [r2, #8]
 8001dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dbe:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	f013 0f08 	tst.w	r3, #8
 8001dc6:	d004      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x5a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc8:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001dca:	6893      	ldr	r3, [r2, #8]
 8001dcc:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dd0:	6093      	str	r3, [r2, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd2:	4a40      	ldr	r2, [pc, #256]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001dd4:	6893      	ldr	r3, [r2, #8]
 8001dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dda:	68a1      	ldr	r1, [r4, #8]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	f013 0f01 	tst.w	r3, #1
 8001de6:	d031      	beq.n	8001e4c <HAL_RCC_ClockConfig+0xd4>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8001de8:	6863      	ldr	r3, [r4, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d020      	beq.n	8001e30 <HAL_RCC_ClockConfig+0xb8>
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d025      	beq.n	8001e3e <HAL_RCC_ClockConfig+0xc6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001df2:	4a38      	ldr	r2, [pc, #224]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	f012 0f02 	tst.w	r2, #2
 8001dfa:	d064      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x14e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dfc:	4935      	ldr	r1, [pc, #212]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001dfe:	688a      	ldr	r2, [r1, #8]
 8001e00:	f022 0203 	bic.w	r2, r2, #3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 8001e08:	f7fe ffc8 	bl	8000d9c <HAL_GetTick>
 8001e0c:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8001e16:	6862      	ldr	r2, [r4, #4]
 8001e18:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e1c:	d016      	beq.n	8001e4c <HAL_RCC_ClockConfig+0xd4>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001e1e:	f7fe ffbd 	bl	8000d9c <HAL_GetTick>
 8001e22:	1b80      	subs	r0, r0, r6
 8001e24:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	d9f0      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x96>
				return HAL_TIMEOUT;
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	e045      	b.n	8001ebc <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001e38:	d1e0      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e03e      	b.n	8001ebc <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001e3e:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001e46:	d1d9      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 8001e48:	2001      	movs	r0, #1
 8001e4a:	e037      	b.n	8001ebc <HAL_RCC_ClockConfig+0x144>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_ClockConfig+0x158>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	42ab      	cmp	r3, r5
 8001e56:	d90a      	bls.n	8001e6e <HAL_RCC_ClockConfig+0xf6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_RCC_ClockConfig+0x158>)
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	f023 030f 	bic.w	r3, r3, #15
 8001e60:	432b      	orrs	r3, r5
 8001e62:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8001e64:	6813      	ldr	r3, [r2, #0]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	42ab      	cmp	r3, r5
 8001e6c:	d12d      	bne.n	8001eca <HAL_RCC_ClockConfig+0x152>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	f013 0f04 	tst.w	r3, #4
 8001e74:	d006      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x10c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001e78:	6893      	ldr	r3, [r2, #8]
 8001e7a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e7e:	68e1      	ldr	r1, [r4, #12]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	f013 0f08 	tst.w	r3, #8
 8001e8a:	d007      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x124>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001e8e:	6893      	ldr	r3, [r2, #8]
 8001e90:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e94:	6921      	ldr	r1, [r4, #16]
 8001e96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e9a:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001e9c:	f7ff ff18 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_RCC_ClockConfig+0x15c>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <HAL_RCC_ClockConfig+0x160>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_ClockConfig+0x164>)
 8001eb0:	6018      	str	r0, [r3, #0]
	HAL_InitTick(uwTickPrio);
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x168>)
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	f7fe ff2b 	bl	8000d10 <HAL_InitTick>
	return HAL_OK;
 8001eba:	2000      	movs	r0, #0
}
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 8001ebe:	2001      	movs	r0, #1
}
 8001ec0:	4770      	bx	lr
			return HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	e7fa      	b.n	8001ebc <HAL_RCC_ClockConfig+0x144>
				return HAL_ERROR;
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	e7f8      	b.n	8001ebc <HAL_RCC_ClockConfig+0x144>
			return HAL_ERROR;
 8001eca:	2001      	movs	r0, #1
 8001ecc:	e7f6      	b.n	8001ebc <HAL_RCC_ClockConfig+0x144>
 8001ece:	bf00      	nop
 8001ed0:	40023c00 	.word	0x40023c00
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	080036b4 	.word	0x080036b4
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
	return SystemCoreClock;
}
 8001ee4:	4b01      	ldr	r3, [pc, #4]	; (8001eec <HAL_RCC_GetHCLKFreq+0x8>)
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000000 	.word	0x20000000

08001ef0 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8001ef0:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8001ef2:	f7ff fff7 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001efe:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f02:	40d8      	lsrs	r0, r3
 8001f04:	bd08      	pop	{r3, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	080036c4 	.word	0x080036c4

08001f10 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8001f10:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8001f12:	f7ff ffe7 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f1e:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f22:	40d8      	lsrs	r0, r3
 8001f24:	bd08      	pop	{r3, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	080036c4 	.word	0x080036c4

08001f30 <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 8001f30:	b510      	push	{r4, lr}
 8001f32:	4604      	mov	r4, r0
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8001f34:	6883      	ldr	r3, [r0, #8]
 8001f36:	6902      	ldr	r2, [r0, #16]
 8001f38:	4313      	orrs	r3, r2
			| huart->Init.Mode | huart->Init.OverSampling;
 8001f3a:	6942      	ldr	r2, [r0, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	69c2      	ldr	r2, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8001f40:	4313      	orrs	r3, r2
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f42:	6801      	ldr	r1, [r0, #0]
 8001f44:	6808      	ldr	r0, [r1, #0]
 8001f46:	4a93      	ldr	r2, [pc, #588]	; (8002194 <UART_SetConfig+0x264>)
 8001f48:	4002      	ands	r2, r0
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	600a      	str	r2, [r1, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f4e:	6822      	ldr	r2, [r4, #0]
 8001f50:	6853      	ldr	r3, [r2, #4]
 8001f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f56:	68e1      	ldr	r1, [r4, #12]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6053      	str	r3, [r2, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8001f5c:	69a2      	ldr	r2, [r4, #24]

	tmpreg |= huart->Init.OneBitSampling;
 8001f5e:	6a23      	ldr	r3, [r4, #32]
 8001f60:	431a      	orrs	r2, r3
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f62:	6821      	ldr	r1, [r4, #0]
 8001f64:	688b      	ldr	r3, [r1, #8]
 8001f66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	4a89      	ldr	r2, [pc, #548]	; (8002198 <UART_SetConfig+0x268>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <UART_SetConfig+0x7a>
 8001f76:	4a89      	ldr	r2, [pc, #548]	; (800219c <UART_SetConfig+0x26c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d029      	beq.n	8001fd0 <UART_SetConfig+0xa0>
 8001f7c:	4a88      	ldr	r2, [pc, #544]	; (80021a0 <UART_SetConfig+0x270>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d03e      	beq.n	8002000 <UART_SetConfig+0xd0>
 8001f82:	4a88      	ldr	r2, [pc, #544]	; (80021a4 <UART_SetConfig+0x274>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d062      	beq.n	800204e <UART_SetConfig+0x11e>
 8001f88:	4a87      	ldr	r2, [pc, #540]	; (80021a8 <UART_SetConfig+0x278>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d071      	beq.n	8002072 <UART_SetConfig+0x142>
 8001f8e:	4a87      	ldr	r2, [pc, #540]	; (80021ac <UART_SetConfig+0x27c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	f000 8083 	beq.w	800209c <UART_SetConfig+0x16c>
 8001f96:	4a86      	ldr	r2, [pc, #536]	; (80021b0 <UART_SetConfig+0x280>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	f000 8094 	beq.w	80020c6 <UART_SetConfig+0x196>
 8001f9e:	4a85      	ldr	r2, [pc, #532]	; (80021b4 <UART_SetConfig+0x284>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	f000 80a5 	beq.w	80020f0 <UART_SetConfig+0x1c0>
 8001fa6:	2310      	movs	r3, #16
 8001fa8:	e03a      	b.n	8002020 <UART_SetConfig+0xf0>
 8001faa:	4b83      	ldr	r3, [pc, #524]	; (80021b8 <UART_SetConfig+0x288>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d809      	bhi.n	8001fcc <UART_SetConfig+0x9c>
 8001fb8:	e8df f003 	tbb	[pc, r3]
 8001fbc:	06ae0402 	.word	0x06ae0402
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e02d      	b.n	8002020 <UART_SetConfig+0xf0>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e02b      	b.n	8002020 <UART_SetConfig+0xf0>
 8001fc8:	2308      	movs	r3, #8
 8001fca:	e029      	b.n	8002020 <UART_SetConfig+0xf0>
 8001fcc:	2310      	movs	r3, #16
 8001fce:	e027      	b.n	8002020 <UART_SetConfig+0xf0>
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <UART_SetConfig+0x288>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d80e      	bhi.n	8001ffc <UART_SetConfig+0xcc>
 8001fde:	e8df f003 	tbb	[pc, r3]
 8001fe2:	0d07      	.short	0x0d07
 8001fe4:	0d090d0d 	.word	0x0d090d0d
 8001fe8:	0d9d0d0d 	.word	0x0d9d0d0d
 8001fec:	0d0d      	.short	0x0d0d
 8001fee:	0b          	.byte	0x0b
 8001fef:	00          	.byte	0x00
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e015      	b.n	8002020 <UART_SetConfig+0xf0>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e013      	b.n	8002020 <UART_SetConfig+0xf0>
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	e011      	b.n	8002020 <UART_SetConfig+0xf0>
 8001ffc:	2310      	movs	r3, #16
 8001ffe:	e00f      	b.n	8002020 <UART_SetConfig+0xf0>
 8002000:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <UART_SetConfig+0x288>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800200a:	2b20      	cmp	r3, #32
 800200c:	f000 8088 	beq.w	8002120 <UART_SetConfig+0x1f0>
 8002010:	d819      	bhi.n	8002046 <UART_SetConfig+0x116>
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8086 	beq.w	8002124 <UART_SetConfig+0x1f4>
 8002018:	2b10      	cmp	r3, #16
 800201a:	f040 8085 	bne.w	8002128 <UART_SetConfig+0x1f8>
 800201e:	2304      	movs	r3, #4

	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8002020:	69e0      	ldr	r0, [r4, #28]
 8002022:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002026:	f000 80ab 	beq.w	8002180 <UART_SetConfig+0x250>
			} else {
				ret = HAL_ERROR;
			}
		}
	} else {
		switch (clocksource) {
 800202a:	2b08      	cmp	r3, #8
 800202c:	f200 810c 	bhi.w	8002248 <UART_SetConfig+0x318>
 8002030:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002034:	00fb00e8 	.word	0x00fb00e8
 8002038:	010a00e6 	.word	0x010a00e6
 800203c:	010a00fe 	.word	0x010a00fe
 8002040:	010a010a 	.word	0x010a010a
 8002044:	0101      	.short	0x0101
	UART_GETCLOCKSOURCE(huart, clocksource);
 8002046:	2b30      	cmp	r3, #48	; 0x30
 8002048:	d170      	bne.n	800212c <UART_SetConfig+0x1fc>
 800204a:	2308      	movs	r3, #8
 800204c:	e7e8      	b.n	8002020 <UART_SetConfig+0xf0>
 800204e:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <UART_SetConfig+0x288>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002054:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d069      	beq.n	8002130 <UART_SetConfig+0x200>
 800205c:	d805      	bhi.n	800206a <UART_SetConfig+0x13a>
 800205e:	2b00      	cmp	r3, #0
 8002060:	d068      	beq.n	8002134 <UART_SetConfig+0x204>
 8002062:	2b40      	cmp	r3, #64	; 0x40
 8002064:	d168      	bne.n	8002138 <UART_SetConfig+0x208>
 8002066:	2304      	movs	r3, #4
 8002068:	e7da      	b.n	8002020 <UART_SetConfig+0xf0>
 800206a:	2bc0      	cmp	r3, #192	; 0xc0
 800206c:	d166      	bne.n	800213c <UART_SetConfig+0x20c>
 800206e:	2308      	movs	r3, #8
 8002070:	e7d6      	b.n	8002020 <UART_SetConfig+0xf0>
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <UART_SetConfig+0x288>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002080:	d05e      	beq.n	8002140 <UART_SetConfig+0x210>
 8002082:	d806      	bhi.n	8002092 <UART_SetConfig+0x162>
 8002084:	2b00      	cmp	r3, #0
 8002086:	d05d      	beq.n	8002144 <UART_SetConfig+0x214>
 8002088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800208c:	d15c      	bne.n	8002148 <UART_SetConfig+0x218>
 800208e:	2304      	movs	r3, #4
 8002090:	e7c6      	b.n	8002020 <UART_SetConfig+0xf0>
 8002092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002096:	d159      	bne.n	800214c <UART_SetConfig+0x21c>
 8002098:	2308      	movs	r3, #8
 800209a:	e7c1      	b.n	8002020 <UART_SetConfig+0xf0>
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <UART_SetConfig+0x288>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020aa:	d051      	beq.n	8002150 <UART_SetConfig+0x220>
 80020ac:	d806      	bhi.n	80020bc <UART_SetConfig+0x18c>
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d050      	beq.n	8002154 <UART_SetConfig+0x224>
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d14f      	bne.n	8002158 <UART_SetConfig+0x228>
 80020b8:	2304      	movs	r3, #4
 80020ba:	e7b1      	b.n	8002020 <UART_SetConfig+0xf0>
 80020bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80020c0:	d14c      	bne.n	800215c <UART_SetConfig+0x22c>
 80020c2:	2308      	movs	r3, #8
 80020c4:	e7ac      	b.n	8002020 <UART_SetConfig+0xf0>
 80020c6:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <UART_SetConfig+0x288>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80020d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d4:	d044      	beq.n	8002160 <UART_SetConfig+0x230>
 80020d6:	d806      	bhi.n	80020e6 <UART_SetConfig+0x1b6>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d043      	beq.n	8002164 <UART_SetConfig+0x234>
 80020dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e0:	d142      	bne.n	8002168 <UART_SetConfig+0x238>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e79c      	b.n	8002020 <UART_SetConfig+0xf0>
 80020e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80020ea:	d13f      	bne.n	800216c <UART_SetConfig+0x23c>
 80020ec:	2308      	movs	r3, #8
 80020ee:	e797      	b.n	8002020 <UART_SetConfig+0xf0>
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <UART_SetConfig+0x288>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fe:	d037      	beq.n	8002170 <UART_SetConfig+0x240>
 8002100:	d805      	bhi.n	800210e <UART_SetConfig+0x1de>
 8002102:	b3bb      	cbz	r3, 8002174 <UART_SetConfig+0x244>
 8002104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002108:	d136      	bne.n	8002178 <UART_SetConfig+0x248>
 800210a:	2304      	movs	r3, #4
 800210c:	e788      	b.n	8002020 <UART_SetConfig+0xf0>
 800210e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002112:	d133      	bne.n	800217c <UART_SetConfig+0x24c>
 8002114:	2308      	movs	r3, #8
 8002116:	e783      	b.n	8002020 <UART_SetConfig+0xf0>
 8002118:	2302      	movs	r3, #2
 800211a:	e781      	b.n	8002020 <UART_SetConfig+0xf0>
 800211c:	2302      	movs	r3, #2
 800211e:	e77f      	b.n	8002020 <UART_SetConfig+0xf0>
 8002120:	2302      	movs	r3, #2
 8002122:	e77d      	b.n	8002020 <UART_SetConfig+0xf0>
 8002124:	2300      	movs	r3, #0
 8002126:	e77b      	b.n	8002020 <UART_SetConfig+0xf0>
 8002128:	2310      	movs	r3, #16
 800212a:	e779      	b.n	8002020 <UART_SetConfig+0xf0>
 800212c:	2310      	movs	r3, #16
 800212e:	e777      	b.n	8002020 <UART_SetConfig+0xf0>
 8002130:	2302      	movs	r3, #2
 8002132:	e775      	b.n	8002020 <UART_SetConfig+0xf0>
 8002134:	2300      	movs	r3, #0
 8002136:	e773      	b.n	8002020 <UART_SetConfig+0xf0>
 8002138:	2310      	movs	r3, #16
 800213a:	e771      	b.n	8002020 <UART_SetConfig+0xf0>
 800213c:	2310      	movs	r3, #16
 800213e:	e76f      	b.n	8002020 <UART_SetConfig+0xf0>
 8002140:	2302      	movs	r3, #2
 8002142:	e76d      	b.n	8002020 <UART_SetConfig+0xf0>
 8002144:	2300      	movs	r3, #0
 8002146:	e76b      	b.n	8002020 <UART_SetConfig+0xf0>
 8002148:	2310      	movs	r3, #16
 800214a:	e769      	b.n	8002020 <UART_SetConfig+0xf0>
 800214c:	2310      	movs	r3, #16
 800214e:	e767      	b.n	8002020 <UART_SetConfig+0xf0>
 8002150:	2302      	movs	r3, #2
 8002152:	e765      	b.n	8002020 <UART_SetConfig+0xf0>
 8002154:	2301      	movs	r3, #1
 8002156:	e763      	b.n	8002020 <UART_SetConfig+0xf0>
 8002158:	2310      	movs	r3, #16
 800215a:	e761      	b.n	8002020 <UART_SetConfig+0xf0>
 800215c:	2310      	movs	r3, #16
 800215e:	e75f      	b.n	8002020 <UART_SetConfig+0xf0>
 8002160:	2302      	movs	r3, #2
 8002162:	e75d      	b.n	8002020 <UART_SetConfig+0xf0>
 8002164:	2300      	movs	r3, #0
 8002166:	e75b      	b.n	8002020 <UART_SetConfig+0xf0>
 8002168:	2310      	movs	r3, #16
 800216a:	e759      	b.n	8002020 <UART_SetConfig+0xf0>
 800216c:	2310      	movs	r3, #16
 800216e:	e757      	b.n	8002020 <UART_SetConfig+0xf0>
 8002170:	2302      	movs	r3, #2
 8002172:	e755      	b.n	8002020 <UART_SetConfig+0xf0>
 8002174:	2300      	movs	r3, #0
 8002176:	e753      	b.n	8002020 <UART_SetConfig+0xf0>
 8002178:	2310      	movs	r3, #16
 800217a:	e751      	b.n	8002020 <UART_SetConfig+0xf0>
 800217c:	2310      	movs	r3, #16
 800217e:	e74f      	b.n	8002020 <UART_SetConfig+0xf0>
		switch (clocksource) {
 8002180:	2b08      	cmp	r3, #8
 8002182:	d85b      	bhi.n	800223c <UART_SetConfig+0x30c>
 8002184:	e8df f003 	tbb	[pc, r3]
 8002188:	5a3a341a 	.word	0x5a3a341a
 800218c:	5a5a5a37 	.word	0x5a5a5a37
 8002190:	1e          	.byte	0x1e
 8002191:	00          	.byte	0x00
 8002192:	bf00      	nop
 8002194:	efff69f3 	.word	0xefff69f3
 8002198:	40011000 	.word	0x40011000
 800219c:	40004400 	.word	0x40004400
 80021a0:	40004800 	.word	0x40004800
 80021a4:	40004c00 	.word	0x40004c00
 80021a8:	40005000 	.word	0x40005000
 80021ac:	40011400 	.word	0x40011400
 80021b0:	40007800 	.word	0x40007800
 80021b4:	40007c00 	.word	0x40007c00
 80021b8:	40023800 	.word	0x40023800
			pclk = HAL_RCC_GetPCLK1Freq();
 80021bc:	f7ff fe98 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d03d      	beq.n	8002240 <UART_SetConfig+0x310>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 80021c4:	6862      	ldr	r2, [r4, #4]
 80021c6:	0853      	lsrs	r3, r2, #1
 80021c8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80021cc:	fbb3 f3f2 	udiv	r3, r3, r2
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80021d0:	f1a3 0110 	sub.w	r1, r3, #16
 80021d4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80021d8:	4291      	cmp	r1, r2
 80021da:	d833      	bhi.n	8002244 <UART_SetConfig+0x314>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 80021dc:	b29a      	uxth	r2, r3
 80021de:	f022 020f 	bic.w	r2, r2, #15
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 80021e2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80021e6:	4313      	orrs	r3, r2
				huart->Instance->BRR = brrtemp;
 80021e8:	6822      	ldr	r2, [r4, #0]
 80021ea:	60d3      	str	r3, [r2, #12]
 80021ec:	2000      	movs	r0, #0
 80021ee:	e030      	b.n	8002252 <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 80021f0:	f7ff fe8e 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
			break;
 80021f4:	e7e4      	b.n	80021c0 <UART_SetConfig+0x290>
			pclk = HAL_RCC_GetSysClockFreq();
 80021f6:	f7ff fd6b 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
			break;
 80021fa:	e7e1      	b.n	80021c0 <UART_SetConfig+0x290>
			pclk = (uint32_t) HSI_VALUE;
 80021fc:	4817      	ldr	r0, [pc, #92]	; (800225c <UART_SetConfig+0x32c>)
 80021fe:	e7e1      	b.n	80021c4 <UART_SetConfig+0x294>
		switch (clocksource) {
 8002200:	4816      	ldr	r0, [pc, #88]	; (800225c <UART_SetConfig+0x32c>)
 8002202:	e002      	b.n	800220a <UART_SetConfig+0x2da>
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8002204:	f7ff fe74 	bl	8001ef0 <HAL_RCC_GetPCLK1Freq>
			pclk = 0U;
			ret = HAL_ERROR;
			break;
		}

		if (pclk != 0U) {
 8002208:	b300      	cbz	r0, 800224c <UART_SetConfig+0x31c>
			/* USARTDIV must be greater than or equal to 0d16 */
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 800220a:	6863      	ldr	r3, [r4, #4]
 800220c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002210:	fbb0 f0f3 	udiv	r0, r0, r3
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8002214:	f1a0 0210 	sub.w	r2, r0, #16
 8002218:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800221c:	429a      	cmp	r2, r3
 800221e:	d817      	bhi.n	8002250 <UART_SetConfig+0x320>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	b280      	uxth	r0, r0
 8002224:	60d8      	str	r0, [r3, #12]
 8002226:	2000      	movs	r0, #0
 8002228:	e013      	b.n	8002252 <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 800222a:	f7ff fe71 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
			break;
 800222e:	e7eb      	b.n	8002208 <UART_SetConfig+0x2d8>
			pclk = HAL_RCC_GetSysClockFreq();
 8002230:	f7ff fd4e 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
			break;
 8002234:	e7e8      	b.n	8002208 <UART_SetConfig+0x2d8>
			pclk = (uint32_t) LSE_VALUE;
 8002236:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800223a:	e7e6      	b.n	800220a <UART_SetConfig+0x2da>
		switch (clocksource) {
 800223c:	2001      	movs	r0, #1
 800223e:	e008      	b.n	8002252 <UART_SetConfig+0x322>
 8002240:	2000      	movs	r0, #0
 8002242:	e006      	b.n	8002252 <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 8002244:	2001      	movs	r0, #1
 8002246:	e004      	b.n	8002252 <UART_SetConfig+0x322>
		switch (clocksource) {
 8002248:	2001      	movs	r0, #1
 800224a:	e002      	b.n	8002252 <UART_SetConfig+0x322>
 800224c:	2000      	movs	r0, #0
 800224e:	e000      	b.n	8002252 <UART_SetConfig+0x322>
			} else {
				ret = HAL_ERROR;
 8002250:	2001      	movs	r0, #1
			}
		}
	}

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 8002252:	2300      	movs	r3, #0
 8002254:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->TxISR = NULL;
 8002256:	66e3      	str	r3, [r4, #108]	; 0x6c

	return ret;
}
 8002258:	bd10      	pop	{r4, pc}
 800225a:	bf00      	nop
 800225c:	00f42400 	.word	0x00f42400

08002260 <UART_AdvFeatureConfig>:
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002260:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002262:	f013 0f01 	tst.w	r3, #1
 8002266:	d006      	beq.n	8002276 <UART_AdvFeatureConfig+0x16>
			UART_ADVFEATURE_TXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8002268:	6802      	ldr	r2, [r0, #0]
 800226a:	6853      	ldr	r3, [r2, #4]
 800226c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002270:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002272:	430b      	orrs	r3, r1
 8002274:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.TxPinLevelInvert);
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002276:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002278:	f013 0f02 	tst.w	r3, #2
 800227c:	d006      	beq.n	800228c <UART_AdvFeatureConfig+0x2c>
			UART_ADVFEATURE_RXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 800227e:	6802      	ldr	r2, [r0, #0]
 8002280:	6853      	ldr	r3, [r2, #4]
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002288:	430b      	orrs	r3, r1
 800228a:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.RxPinLevelInvert);
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800228c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800228e:	f013 0f04 	tst.w	r3, #4
 8002292:	d006      	beq.n	80022a2 <UART_AdvFeatureConfig+0x42>
			UART_ADVFEATURE_DATAINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8002294:	6802      	ldr	r2, [r0, #0]
 8002296:	6853      	ldr	r3, [r2, #4]
 8002298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800229e:	430b      	orrs	r3, r1
 80022a0:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.DataInvert);
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80022a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022a4:	f013 0f08 	tst.w	r3, #8
 80022a8:	d006      	beq.n	80022b8 <UART_AdvFeatureConfig+0x58>
			UART_ADVFEATURE_SWAP_INIT)) {
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 80022aa:	6802      	ldr	r2, [r0, #0]
 80022ac:	6853      	ldr	r3, [r2, #4]
 80022ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022b2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.Swap);
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80022b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022ba:	f013 0f10 	tst.w	r3, #16
 80022be:	d006      	beq.n	80022ce <UART_AdvFeatureConfig+0x6e>
			UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 80022c0:	6802      	ldr	r2, [r0, #0]
 80022c2:	6893      	ldr	r3, [r2, #8]
 80022c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022c8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80022ca:	430b      	orrs	r3, r1
 80022cc:	6093      	str	r3, [r2, #8]
				huart->AdvancedInit.OverrunDisable);
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80022ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022d0:	f013 0f20 	tst.w	r3, #32
 80022d4:	d006      	beq.n	80022e4 <UART_AdvFeatureConfig+0x84>
			UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 80022d6:	6802      	ldr	r2, [r0, #0]
 80022d8:	6893      	ldr	r3, [r2, #8]
 80022da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022de:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6093      	str	r3, [r2, #8]
				huart->AdvancedInit.DMADisableonRxError);
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80022e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80022ea:	d00a      	beq.n	8002302 <UART_AdvFeatureConfig+0xa2>
			UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(
				IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 80022ec:	6802      	ldr	r2, [r0, #0]
 80022ee:	6853      	ldr	r3, [r2, #4]
 80022f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80022f6:	430b      	orrs	r3, r1
 80022f8:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.AutoBaudRateEnable);
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable
 80022fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002300:	d00b      	beq.n	800231a <UART_AdvFeatureConfig+0xba>
					huart->AdvancedInit.AutoBaudRateMode);
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002302:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002304:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002308:	d006      	beq.n	8002318 <UART_AdvFeatureConfig+0xb8>
			UART_ADVFEATURE_MSBFIRST_INIT)) {
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 800230a:	6802      	ldr	r2, [r0, #0]
 800230c:	6853      	ldr	r3, [r2, #4]
 800230e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002312:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002314:	430b      	orrs	r3, r1
 8002316:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.MSBFirst);
	}
}
 8002318:	4770      	bx	lr
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 800231a:	6802      	ldr	r2, [r0, #0]
 800231c:	6853      	ldr	r3, [r2, #4]
 800231e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002322:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002324:	430b      	orrs	r3, r1
 8002326:	6053      	str	r3, [r2, #4]
 8002328:	e7eb      	b.n	8002302 <UART_AdvFeatureConfig+0xa2>

0800232a <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 800232a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800232e:	4605      	mov	r5, r0
 8002330:	460f      	mov	r7, r1
 8002332:	4616      	mov	r6, r2
 8002334:	4699      	mov	r9, r3
 8002336:	f8dd 8020 	ldr.w	r8, [sp, #32]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 800233a:	682b      	ldr	r3, [r5, #0]
 800233c:	69dc      	ldr	r4, [r3, #28]
 800233e:	ea37 0404 	bics.w	r4, r7, r4
 8002342:	bf0c      	ite	eq
 8002344:	2401      	moveq	r4, #1
 8002346:	2400      	movne	r4, #0
 8002348:	42b4      	cmp	r4, r6
 800234a:	d155      	bne.n	80023f8 <UART_WaitOnFlagUntilTimeout+0xce>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 800234c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002350:	d0f3      	beq.n	800233a <UART_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002352:	f7fe fd23 	bl	8000d9c <HAL_GetTick>
 8002356:	eba0 0009 	sub.w	r0, r0, r9
 800235a:	4540      	cmp	r0, r8
 800235c:	d82e      	bhi.n	80023bc <UART_WaitOnFlagUntilTimeout+0x92>
 800235e:	f1b8 0f00 	cmp.w	r8, #0
 8002362:	d02b      	beq.n	80023bc <UART_WaitOnFlagUntilTimeout+0x92>
				__HAL_UNLOCK(huart);

				return HAL_TIMEOUT;
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	f012 0f04 	tst.w	r2, #4
 800236c:	d0e5      	beq.n	800233a <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002374:	d0e1      	beq.n	800233a <UART_WaitOnFlagUntilTimeout+0x10>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800237a:	621a      	str	r2, [r3, #32]

					/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
					 interrupts for the interrupt process */
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 800237c:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	e852 3f00 	ldrex	r3, [r2]
 8002382:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002386:	e842 3100 	strex	r1, r3, [r2]
 800238a:	2900      	cmp	r1, #0
 800238c:	d1f6      	bne.n	800237c <UART_WaitOnFlagUntilTimeout+0x52>
							(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800238e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002390:	f102 0308 	add.w	r3, r2, #8
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239c:	3208      	adds	r2, #8
 800239e:	e842 3100 	strex	r1, r3, [r2]
 80023a2:	2900      	cmp	r1, #0
 80023a4:	d1f3      	bne.n	800238e <UART_WaitOnFlagUntilTimeout+0x64>

					huart->gState = HAL_UART_STATE_READY;
 80023a6:	2320      	movs	r3, #32
 80023a8:	67eb      	str	r3, [r5, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 80023aa:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023ae:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 80023b2:	2300      	movs	r3, #0
 80023b4:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78

					return HAL_TIMEOUT;
 80023b8:	2003      	movs	r0, #3
 80023ba:	e01e      	b.n	80023fa <UART_WaitOnFlagUntilTimeout+0xd0>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 80023bc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023be:	e852 3f00 	ldrex	r3, [r2]
 80023c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c6:	e842 3100 	strex	r1, r3, [r2]
 80023ca:	2900      	cmp	r1, #0
 80023cc:	d1f6      	bne.n	80023bc <UART_WaitOnFlagUntilTimeout+0x92>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ce:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d0:	f102 0308 	add.w	r3, r2, #8
 80023d4:	e853 3f00 	ldrex	r3, [r3]
 80023d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023dc:	3208      	adds	r2, #8
 80023de:	e842 3100 	strex	r1, r3, [r2]
 80023e2:	2900      	cmp	r1, #0
 80023e4:	d1f3      	bne.n	80023ce <UART_WaitOnFlagUntilTimeout+0xa4>
				huart->gState = HAL_UART_STATE_READY;
 80023e6:	2320      	movs	r3, #32
 80023e8:	67eb      	str	r3, [r5, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 80023ea:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				__HAL_UNLOCK(huart);
 80023ee:	2300      	movs	r3, #0
 80023f0:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
				return HAL_TIMEOUT;
 80023f4:	2003      	movs	r0, #3
 80023f6:	e000      	b.n	80023fa <UART_WaitOnFlagUntilTimeout+0xd0>
				}
			}
		}
	}
	return HAL_OK;
 80023f8:	2000      	movs	r0, #0
}
 80023fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080023fe <HAL_UART_Transmit>:
		const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80023fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	461e      	mov	r6, r3
	if (huart->gState == HAL_UART_STATE_READY) {
 8002406:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002408:	2b20      	cmp	r3, #32
 800240a:	d14e      	bne.n	80024aa <HAL_UART_Transmit+0xac>
 800240c:	4604      	mov	r4, r0
 800240e:	460d      	mov	r5, r1
 8002410:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 8002412:	2a00      	cmp	r2, #0
 8002414:	bf18      	it	ne
 8002416:	2900      	cmpne	r1, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Transmit+0x20>
			return HAL_ERROR;
 800241a:	2001      	movs	r0, #1
 800241c:	e046      	b.n	80024ac <HAL_UART_Transmit+0xae>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8002424:	2321      	movs	r3, #33	; 0x21
 8002426:	67c3      	str	r3, [r0, #124]	; 0x7c
		tickstart = HAL_GetTick();
 8002428:	f7fe fcb8 	bl	8000d9c <HAL_GetTick>
 800242c:	4607      	mov	r7, r0
		huart->TxXferSize = Size;
 800242e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
		huart->TxXferCount = Size;
 8002432:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002436:	68a3      	ldr	r3, [r4, #8]
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243c:	d002      	beq.n	8002444 <HAL_UART_Transmit+0x46>
			pdata16bits = NULL;
 800243e:	f04f 0800 	mov.w	r8, #0
 8002442:	e011      	b.n	8002468 <HAL_UART_Transmit+0x6a>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8002444:	6923      	ldr	r3, [r4, #16]
 8002446:	b313      	cbz	r3, 800248e <HAL_UART_Transmit+0x90>
			pdata16bits = NULL;
 8002448:	f04f 0800 	mov.w	r8, #0
 800244c:	e00c      	b.n	8002468 <HAL_UART_Transmit+0x6a>
				huart->Instance->TDR = (uint16_t) (*pdata16bits & 0x01FFU);
 800244e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002452:	6822      	ldr	r2, [r4, #0]
 8002454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002458:	6293      	str	r3, [r2, #40]	; 0x28
			huart->TxXferCount--;
 800245a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800245e:	b292      	uxth	r2, r2
 8002460:	3a01      	subs	r2, #1
 8002462:	b292      	uxth	r2, r2
 8002464:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
		while (huart->TxXferCount > 0U) {
 8002468:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800246c:	b29b      	uxth	r3, r3
 800246e:	b18b      	cbz	r3, 8002494 <HAL_UART_Transmit+0x96>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8002470:	9600      	str	r6, [sp, #0]
 8002472:	463b      	mov	r3, r7
 8002474:	2200      	movs	r2, #0
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff ff56 	bl	800232a <UART_WaitOnFlagUntilTimeout>
 800247e:	b9c0      	cbnz	r0, 80024b2 <HAL_UART_Transmit+0xb4>
			if (pdata8bits == NULL) {
 8002480:	2d00      	cmp	r5, #0
 8002482:	d0e4      	beq.n	800244e <HAL_UART_Transmit+0x50>
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 8002484:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
				pdata8bits++;
 800248c:	e7e5      	b.n	800245a <HAL_UART_Transmit+0x5c>
			pdata16bits = (const uint16_t*) pData;
 800248e:	46a8      	mov	r8, r5
			pdata8bits = NULL;
 8002490:	2500      	movs	r5, #0
 8002492:	e7e9      	b.n	8002468 <HAL_UART_Transmit+0x6a>
		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 8002494:	9600      	str	r6, [sp, #0]
 8002496:	463b      	mov	r3, r7
 8002498:	2200      	movs	r2, #0
 800249a:	2140      	movs	r1, #64	; 0x40
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff ff44 	bl	800232a <UART_WaitOnFlagUntilTimeout>
 80024a2:	b940      	cbnz	r0, 80024b6 <HAL_UART_Transmit+0xb8>
		huart->gState = HAL_UART_STATE_READY;
 80024a4:	2320      	movs	r3, #32
 80024a6:	67e3      	str	r3, [r4, #124]	; 0x7c
		return HAL_OK;
 80024a8:	e000      	b.n	80024ac <HAL_UART_Transmit+0xae>
		return HAL_BUSY;
 80024aa:	2002      	movs	r0, #2
}
 80024ac:	b002      	add	sp, #8
 80024ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return HAL_TIMEOUT;
 80024b2:	2003      	movs	r0, #3
 80024b4:	e7fa      	b.n	80024ac <HAL_UART_Transmit+0xae>
			return HAL_TIMEOUT;
 80024b6:	2003      	movs	r0, #3
 80024b8:	e7f8      	b.n	80024ac <HAL_UART_Transmit+0xae>

080024ba <HAL_UART_Receive>:
		uint16_t Size, uint32_t Timeout) {
 80024ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024be:	b083      	sub	sp, #12
 80024c0:	461e      	mov	r6, r3
	if (huart->RxState == HAL_UART_STATE_READY) {
 80024c2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d178      	bne.n	80025bc <HAL_UART_Receive+0x102>
 80024ca:	4604      	mov	r4, r0
 80024cc:	460d      	mov	r5, r1
 80024ce:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 80024d0:	2a00      	cmp	r2, #0
 80024d2:	bf18      	it	ne
 80024d4:	2900      	cmpne	r1, #0
 80024d6:	d101      	bne.n	80024dc <HAL_UART_Receive+0x22>
			return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e070      	b.n	80025be <HAL_UART_Receive+0x104>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024e2:	2222      	movs	r2, #34	; 0x22
 80024e4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e8:	6603      	str	r3, [r0, #96]	; 0x60
		tickstart = HAL_GetTick();
 80024ea:	f7fe fc57 	bl	8000d9c <HAL_GetTick>
 80024ee:	4607      	mov	r7, r0
		huart->RxXferSize = Size;
 80024f0:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
		huart->RxXferCount = Size;
 80024f4:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
		UART_MASK_COMPUTATION(huart);
 80024f8:	68a3      	ldr	r3, [r4, #8]
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d006      	beq.n	800250e <HAL_UART_Receive+0x54>
 8002500:	b9a3      	cbnz	r3, 800252c <HAL_UART_Receive+0x72>
 8002502:	6922      	ldr	r2, [r4, #16]
 8002504:	b972      	cbnz	r2, 8002524 <HAL_UART_Receive+0x6a>
 8002506:	22ff      	movs	r2, #255	; 0xff
 8002508:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800250c:	e014      	b.n	8002538 <HAL_UART_Receive+0x7e>
 800250e:	6922      	ldr	r2, [r4, #16]
 8002510:	b922      	cbnz	r2, 800251c <HAL_UART_Receive+0x62>
 8002512:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002516:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800251a:	e00d      	b.n	8002538 <HAL_UART_Receive+0x7e>
 800251c:	22ff      	movs	r2, #255	; 0xff
 800251e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002522:	e009      	b.n	8002538 <HAL_UART_Receive+0x7e>
 8002524:	227f      	movs	r2, #127	; 0x7f
 8002526:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800252a:	e005      	b.n	8002538 <HAL_UART_Receive+0x7e>
 800252c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002530:	d00a      	beq.n	8002548 <HAL_UART_Receive+0x8e>
 8002532:	2200      	movs	r2, #0
 8002534:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
		uhMask = huart->Mask;
 8002538:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002540:	d00c      	beq.n	800255c <HAL_UART_Receive+0xa2>
			pdata16bits = NULL;
 8002542:	f04f 0900 	mov.w	r9, #0
 8002546:	e01f      	b.n	8002588 <HAL_UART_Receive+0xce>
		UART_MASK_COMPUTATION(huart);
 8002548:	6922      	ldr	r2, [r4, #16]
 800254a:	b91a      	cbnz	r2, 8002554 <HAL_UART_Receive+0x9a>
 800254c:	227f      	movs	r2, #127	; 0x7f
 800254e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002552:	e7f1      	b.n	8002538 <HAL_UART_Receive+0x7e>
 8002554:	223f      	movs	r2, #63	; 0x3f
 8002556:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800255a:	e7ed      	b.n	8002538 <HAL_UART_Receive+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800255c:	6923      	ldr	r3, [r4, #16]
 800255e:	b113      	cbz	r3, 8002566 <HAL_UART_Receive+0xac>
			pdata16bits = NULL;
 8002560:	f04f 0900 	mov.w	r9, #0
 8002564:	e010      	b.n	8002588 <HAL_UART_Receive+0xce>
			pdata16bits = (uint16_t*) pData;
 8002566:	46a9      	mov	r9, r5
			pdata8bits = NULL;
 8002568:	2500      	movs	r5, #0
 800256a:	e00d      	b.n	8002588 <HAL_UART_Receive+0xce>
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002570:	fa5f f388 	uxtb.w	r3, r8
 8002574:	4013      	ands	r3, r2
				*pdata8bits =
 8002576:	f805 3b01 	strb.w	r3, [r5], #1
			huart->RxXferCount--;
 800257a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800257e:	b292      	uxth	r2, r2
 8002580:	3a01      	subs	r2, #1
 8002582:	b292      	uxth	r2, r2
 8002584:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 8002588:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800258c:	b29b      	uxth	r3, r3
 800258e:	b183      	cbz	r3, 80025b2 <HAL_UART_Receive+0xf8>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8002590:	9600      	str	r6, [sp, #0]
 8002592:	463b      	mov	r3, r7
 8002594:	2200      	movs	r2, #0
 8002596:	2120      	movs	r1, #32
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff fec6 	bl	800232a <UART_WaitOnFlagUntilTimeout>
 800259e:	b988      	cbnz	r0, 80025c4 <HAL_UART_Receive+0x10a>
			if (pdata8bits == NULL) {
 80025a0:	2d00      	cmp	r5, #0
 80025a2:	d1e3      	bne.n	800256c <HAL_UART_Receive+0xb2>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	ea08 0303 	and.w	r3, r8, r3
 80025ac:	f829 3b02 	strh.w	r3, [r9], #2
				pdata16bits++;
 80025b0:	e7e3      	b.n	800257a <HAL_UART_Receive+0xc0>
		huart->RxState = HAL_UART_STATE_READY;
 80025b2:	2320      	movs	r3, #32
 80025b4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		return HAL_OK;
 80025b8:	2000      	movs	r0, #0
 80025ba:	e000      	b.n	80025be <HAL_UART_Receive+0x104>
		return HAL_BUSY;
 80025bc:	2002      	movs	r0, #2
}
 80025be:	b003      	add	sp, #12
 80025c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return HAL_TIMEOUT;
 80025c4:	2003      	movs	r0, #3
 80025c6:	e7fa      	b.n	80025be <HAL_UART_Receive+0x104>

080025c8 <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 80025c8:	b530      	push	{r4, r5, lr}
 80025ca:	b083      	sub	sp, #12
 80025cc:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tickstart = HAL_GetTick();
 80025d4:	f7fe fbe2 	bl	8000d9c <HAL_GetTick>
 80025d8:	4605      	mov	r5, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	f012 0f08 	tst.w	r2, #8
 80025e2:	d10f      	bne.n	8002604 <UART_CheckIdleState+0x3c>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f013 0f04 	tst.w	r3, #4
 80025ec:	d118      	bne.n	8002620 <UART_CheckIdleState+0x58>
	huart->gState = HAL_UART_STATE_READY;
 80025ee:	2320      	movs	r3, #32
 80025f0:	67e3      	str	r3, [r4, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 80025f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f6:	2000      	movs	r0, #0
 80025f8:	6620      	str	r0, [r4, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025fa:	6660      	str	r0, [r4, #100]	; 0x64
	__HAL_UNLOCK(huart);
 80025fc:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8002600:	b003      	add	sp, #12
 8002602:	bd30      	pop	{r4, r5, pc}
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8002604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	4603      	mov	r3, r0
 800260c:	2200      	movs	r2, #0
 800260e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff fe89 	bl	800232a <UART_WaitOnFlagUntilTimeout>
 8002618:	2800      	cmp	r0, #0
 800261a:	d0e3      	beq.n	80025e4 <UART_CheckIdleState+0x1c>
			return HAL_TIMEOUT;
 800261c:	2003      	movs	r0, #3
 800261e:	e7ef      	b.n	8002600 <UART_CheckIdleState+0x38>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8002620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	462b      	mov	r3, r5
 8002628:	2200      	movs	r2, #0
 800262a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff fe7b 	bl	800232a <UART_WaitOnFlagUntilTimeout>
 8002634:	2800      	cmp	r0, #0
 8002636:	d0da      	beq.n	80025ee <UART_CheckIdleState+0x26>
			return HAL_TIMEOUT;
 8002638:	2003      	movs	r0, #3
 800263a:	e7e1      	b.n	8002600 <UART_CheckIdleState+0x38>

0800263c <HAL_UART_Init>:
	if (huart == NULL) {
 800263c:	b368      	cbz	r0, 800269a <HAL_UART_Init+0x5e>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 800263e:	b510      	push	{r4, lr}
 8002640:	4604      	mov	r4, r0
	if (huart->gState == HAL_UART_STATE_RESET) {
 8002642:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002644:	b303      	cbz	r3, 8002688 <HAL_UART_Init+0x4c>
	huart->gState = HAL_UART_STATE_BUSY;
 8002646:	2324      	movs	r3, #36	; 0x24
 8002648:	67e3      	str	r3, [r4, #124]	; 0x7c
	__HAL_UART_DISABLE(huart);
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	6813      	ldr	r3, [r2, #0]
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff fc6b 	bl	8001f30 <UART_SetConfig>
 800265a:	2801      	cmp	r0, #1
 800265c:	d013      	beq.n	8002686 <HAL_UART_Init+0x4a>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 800265e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002660:	b9bb      	cbnz	r3, 8002692 <HAL_UART_Init+0x56>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	6853      	ldr	r3, [r2, #4]
 8002666:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800266a:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(huart->Instance->CR3,
 800266c:	6822      	ldr	r2, [r4, #0]
 800266e:	6893      	ldr	r3, [r2, #8]
 8002670:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002674:	6093      	str	r3, [r2, #8]
	__HAL_UART_ENABLE(huart);
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	6813      	ldr	r3, [r2, #0]
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]
	return (UART_CheckIdleState(huart));
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff ffa1 	bl	80025c8 <UART_CheckIdleState>
}
 8002686:	bd10      	pop	{r4, pc}
		huart->Lock = HAL_UNLOCKED;
 8002688:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		HAL_UART_MspInit(huart);
 800268c:	f7fe fa74 	bl	8000b78 <HAL_UART_MspInit>
 8002690:	e7d9      	b.n	8002646 <HAL_UART_Init+0xa>
		UART_AdvFeatureConfig(huart);
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff fde4 	bl	8002260 <UART_AdvFeatureConfig>
 8002698:	e7e3      	b.n	8002662 <HAL_UART_Init+0x26>
		return HAL_ERROR;
 800269a:	2001      	movs	r0, #1
}
 800269c:	4770      	bx	lr
	...

080026a0 <std>:
 80026a0:	2300      	movs	r3, #0
 80026a2:	b510      	push	{r4, lr}
 80026a4:	4604      	mov	r4, r0
 80026a6:	e9c0 3300 	strd	r3, r3, [r0]
 80026aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026ae:	6083      	str	r3, [r0, #8]
 80026b0:	8181      	strh	r1, [r0, #12]
 80026b2:	6643      	str	r3, [r0, #100]	; 0x64
 80026b4:	81c2      	strh	r2, [r0, #14]
 80026b6:	6183      	str	r3, [r0, #24]
 80026b8:	4619      	mov	r1, r3
 80026ba:	2208      	movs	r2, #8
 80026bc:	305c      	adds	r0, #92	; 0x5c
 80026be:	f000 f9bc 	bl	8002a3a <memset>
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <std+0x58>)
 80026c4:	6263      	str	r3, [r4, #36]	; 0x24
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <std+0x5c>)
 80026c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <std+0x60>)
 80026cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <std+0x64>)
 80026d0:	6323      	str	r3, [r4, #48]	; 0x30
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <std+0x68>)
 80026d4:	6224      	str	r4, [r4, #32]
 80026d6:	429c      	cmp	r4, r3
 80026d8:	d006      	beq.n	80026e8 <std+0x48>
 80026da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80026de:	4294      	cmp	r4, r2
 80026e0:	d002      	beq.n	80026e8 <std+0x48>
 80026e2:	33d0      	adds	r3, #208	; 0xd0
 80026e4:	429c      	cmp	r4, r3
 80026e6:	d105      	bne.n	80026f4 <std+0x54>
 80026e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f0:	f000 ba16 	b.w	8002b20 <__retarget_lock_init_recursive>
 80026f4:	bd10      	pop	{r4, pc}
 80026f6:	bf00      	nop
 80026f8:	080029b5 	.word	0x080029b5
 80026fc:	080029d7 	.word	0x080029d7
 8002700:	08002a0f 	.word	0x08002a0f
 8002704:	08002a33 	.word	0x08002a33
 8002708:	200001c4 	.word	0x200001c4

0800270c <stdio_exit_handler>:
 800270c:	4a02      	ldr	r2, [pc, #8]	; (8002718 <stdio_exit_handler+0xc>)
 800270e:	4903      	ldr	r1, [pc, #12]	; (800271c <stdio_exit_handler+0x10>)
 8002710:	4803      	ldr	r0, [pc, #12]	; (8002720 <stdio_exit_handler+0x14>)
 8002712:	f000 b869 	b.w	80027e8 <_fwalk_sglue>
 8002716:	bf00      	nop
 8002718:	2000000c 	.word	0x2000000c
 800271c:	080033dd 	.word	0x080033dd
 8002720:	20000018 	.word	0x20000018

08002724 <cleanup_stdio>:
 8002724:	6841      	ldr	r1, [r0, #4]
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <cleanup_stdio+0x34>)
 8002728:	4299      	cmp	r1, r3
 800272a:	b510      	push	{r4, lr}
 800272c:	4604      	mov	r4, r0
 800272e:	d001      	beq.n	8002734 <cleanup_stdio+0x10>
 8002730:	f000 fe54 	bl	80033dc <_fflush_r>
 8002734:	68a1      	ldr	r1, [r4, #8]
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <cleanup_stdio+0x38>)
 8002738:	4299      	cmp	r1, r3
 800273a:	d002      	beq.n	8002742 <cleanup_stdio+0x1e>
 800273c:	4620      	mov	r0, r4
 800273e:	f000 fe4d 	bl	80033dc <_fflush_r>
 8002742:	68e1      	ldr	r1, [r4, #12]
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <cleanup_stdio+0x3c>)
 8002746:	4299      	cmp	r1, r3
 8002748:	d004      	beq.n	8002754 <cleanup_stdio+0x30>
 800274a:	4620      	mov	r0, r4
 800274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002750:	f000 be44 	b.w	80033dc <_fflush_r>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	bf00      	nop
 8002758:	200001c4 	.word	0x200001c4
 800275c:	2000022c 	.word	0x2000022c
 8002760:	20000294 	.word	0x20000294

08002764 <global_stdio_init.part.0>:
 8002764:	b510      	push	{r4, lr}
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <global_stdio_init.part.0+0x30>)
 8002768:	4c0b      	ldr	r4, [pc, #44]	; (8002798 <global_stdio_init.part.0+0x34>)
 800276a:	4a0c      	ldr	r2, [pc, #48]	; (800279c <global_stdio_init.part.0+0x38>)
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4620      	mov	r0, r4
 8002770:	2200      	movs	r2, #0
 8002772:	2104      	movs	r1, #4
 8002774:	f7ff ff94 	bl	80026a0 <std>
 8002778:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800277c:	2201      	movs	r2, #1
 800277e:	2109      	movs	r1, #9
 8002780:	f7ff ff8e 	bl	80026a0 <std>
 8002784:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002788:	2202      	movs	r2, #2
 800278a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800278e:	2112      	movs	r1, #18
 8002790:	f7ff bf86 	b.w	80026a0 <std>
 8002794:	200002fc 	.word	0x200002fc
 8002798:	200001c4 	.word	0x200001c4
 800279c:	0800270d 	.word	0x0800270d

080027a0 <__sfp_lock_acquire>:
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <__sfp_lock_acquire+0x8>)
 80027a2:	f000 b9be 	b.w	8002b22 <__retarget_lock_acquire_recursive>
 80027a6:	bf00      	nop
 80027a8:	20000305 	.word	0x20000305

080027ac <__sfp_lock_release>:
 80027ac:	4801      	ldr	r0, [pc, #4]	; (80027b4 <__sfp_lock_release+0x8>)
 80027ae:	f000 b9b9 	b.w	8002b24 <__retarget_lock_release_recursive>
 80027b2:	bf00      	nop
 80027b4:	20000305 	.word	0x20000305

080027b8 <__sinit>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	4604      	mov	r4, r0
 80027bc:	f7ff fff0 	bl	80027a0 <__sfp_lock_acquire>
 80027c0:	6a23      	ldr	r3, [r4, #32]
 80027c2:	b11b      	cbz	r3, 80027cc <__sinit+0x14>
 80027c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c8:	f7ff bff0 	b.w	80027ac <__sfp_lock_release>
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <__sinit+0x28>)
 80027ce:	6223      	str	r3, [r4, #32]
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <__sinit+0x2c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f5      	bne.n	80027c4 <__sinit+0xc>
 80027d8:	f7ff ffc4 	bl	8002764 <global_stdio_init.part.0>
 80027dc:	e7f2      	b.n	80027c4 <__sinit+0xc>
 80027de:	bf00      	nop
 80027e0:	08002725 	.word	0x08002725
 80027e4:	200002fc 	.word	0x200002fc

080027e8 <_fwalk_sglue>:
 80027e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ec:	4607      	mov	r7, r0
 80027ee:	4688      	mov	r8, r1
 80027f0:	4614      	mov	r4, r2
 80027f2:	2600      	movs	r6, #0
 80027f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027f8:	f1b9 0901 	subs.w	r9, r9, #1
 80027fc:	d505      	bpl.n	800280a <_fwalk_sglue+0x22>
 80027fe:	6824      	ldr	r4, [r4, #0]
 8002800:	2c00      	cmp	r4, #0
 8002802:	d1f7      	bne.n	80027f4 <_fwalk_sglue+0xc>
 8002804:	4630      	mov	r0, r6
 8002806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800280a:	89ab      	ldrh	r3, [r5, #12]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d907      	bls.n	8002820 <_fwalk_sglue+0x38>
 8002810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002814:	3301      	adds	r3, #1
 8002816:	d003      	beq.n	8002820 <_fwalk_sglue+0x38>
 8002818:	4629      	mov	r1, r5
 800281a:	4638      	mov	r0, r7
 800281c:	47c0      	blx	r8
 800281e:	4306      	orrs	r6, r0
 8002820:	3568      	adds	r5, #104	; 0x68
 8002822:	e7e9      	b.n	80027f8 <_fwalk_sglue+0x10>

08002824 <iprintf>:
 8002824:	b40f      	push	{r0, r1, r2, r3}
 8002826:	b507      	push	{r0, r1, r2, lr}
 8002828:	4906      	ldr	r1, [pc, #24]	; (8002844 <iprintf+0x20>)
 800282a:	ab04      	add	r3, sp, #16
 800282c:	6808      	ldr	r0, [r1, #0]
 800282e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002832:	6881      	ldr	r1, [r0, #8]
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	f000 faa1 	bl	8002d7c <_vfiprintf_r>
 800283a:	b003      	add	sp, #12
 800283c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002840:	b004      	add	sp, #16
 8002842:	4770      	bx	lr
 8002844:	20000064 	.word	0x20000064

08002848 <setbuf>:
 8002848:	fab1 f281 	clz	r2, r1
 800284c:	0952      	lsrs	r2, r2, #5
 800284e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002852:	0052      	lsls	r2, r2, #1
 8002854:	f000 b800 	b.w	8002858 <setvbuf>

08002858 <setvbuf>:
 8002858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800285c:	461d      	mov	r5, r3
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <setvbuf+0x158>)
 8002860:	681f      	ldr	r7, [r3, #0]
 8002862:	4604      	mov	r4, r0
 8002864:	460e      	mov	r6, r1
 8002866:	4690      	mov	r8, r2
 8002868:	b127      	cbz	r7, 8002874 <setvbuf+0x1c>
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	b913      	cbnz	r3, 8002874 <setvbuf+0x1c>
 800286e:	4638      	mov	r0, r7
 8002870:	f7ff ffa2 	bl	80027b8 <__sinit>
 8002874:	f1b8 0f02 	cmp.w	r8, #2
 8002878:	d006      	beq.n	8002888 <setvbuf+0x30>
 800287a:	f1b8 0f01 	cmp.w	r8, #1
 800287e:	f200 8094 	bhi.w	80029aa <setvbuf+0x152>
 8002882:	2d00      	cmp	r5, #0
 8002884:	f2c0 8091 	blt.w	80029aa <setvbuf+0x152>
 8002888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800288a:	07da      	lsls	r2, r3, #31
 800288c:	d405      	bmi.n	800289a <setvbuf+0x42>
 800288e:	89a3      	ldrh	r3, [r4, #12]
 8002890:	059b      	lsls	r3, r3, #22
 8002892:	d402      	bmi.n	800289a <setvbuf+0x42>
 8002894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002896:	f000 f944 	bl	8002b22 <__retarget_lock_acquire_recursive>
 800289a:	4621      	mov	r1, r4
 800289c:	4638      	mov	r0, r7
 800289e:	f000 fd9d 	bl	80033dc <_fflush_r>
 80028a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028a4:	b141      	cbz	r1, 80028b8 <setvbuf+0x60>
 80028a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028aa:	4299      	cmp	r1, r3
 80028ac:	d002      	beq.n	80028b4 <setvbuf+0x5c>
 80028ae:	4638      	mov	r0, r7
 80028b0:	f000 f93a 	bl	8002b28 <_free_r>
 80028b4:	2300      	movs	r3, #0
 80028b6:	6363      	str	r3, [r4, #52]	; 0x34
 80028b8:	2300      	movs	r3, #0
 80028ba:	61a3      	str	r3, [r4, #24]
 80028bc:	6063      	str	r3, [r4, #4]
 80028be:	89a3      	ldrh	r3, [r4, #12]
 80028c0:	0618      	lsls	r0, r3, #24
 80028c2:	d503      	bpl.n	80028cc <setvbuf+0x74>
 80028c4:	6921      	ldr	r1, [r4, #16]
 80028c6:	4638      	mov	r0, r7
 80028c8:	f000 f92e 	bl	8002b28 <_free_r>
 80028cc:	89a3      	ldrh	r3, [r4, #12]
 80028ce:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	f1b8 0f02 	cmp.w	r8, #2
 80028da:	81a3      	strh	r3, [r4, #12]
 80028dc:	d05f      	beq.n	800299e <setvbuf+0x146>
 80028de:	ab01      	add	r3, sp, #4
 80028e0:	466a      	mov	r2, sp
 80028e2:	4621      	mov	r1, r4
 80028e4:	4638      	mov	r0, r7
 80028e6:	f000 fda1 	bl	800342c <__swhatbuf_r>
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	4318      	orrs	r0, r3
 80028ee:	81a0      	strh	r0, [r4, #12]
 80028f0:	bb2d      	cbnz	r5, 800293e <setvbuf+0xe6>
 80028f2:	9d00      	ldr	r5, [sp, #0]
 80028f4:	4628      	mov	r0, r5
 80028f6:	f000 f963 	bl	8002bc0 <malloc>
 80028fa:	4606      	mov	r6, r0
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d150      	bne.n	80029a2 <setvbuf+0x14a>
 8002900:	f8dd 9000 	ldr.w	r9, [sp]
 8002904:	45a9      	cmp	r9, r5
 8002906:	d13e      	bne.n	8002986 <setvbuf+0x12e>
 8002908:	f04f 35ff 	mov.w	r5, #4294967295
 800290c:	2200      	movs	r2, #0
 800290e:	60a2      	str	r2, [r4, #8]
 8002910:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002914:	6022      	str	r2, [r4, #0]
 8002916:	6122      	str	r2, [r4, #16]
 8002918:	2201      	movs	r2, #1
 800291a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800291e:	6162      	str	r2, [r4, #20]
 8002920:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	07d1      	lsls	r1, r2, #31
 8002928:	81a3      	strh	r3, [r4, #12]
 800292a:	d404      	bmi.n	8002936 <setvbuf+0xde>
 800292c:	059b      	lsls	r3, r3, #22
 800292e:	d402      	bmi.n	8002936 <setvbuf+0xde>
 8002930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002932:	f000 f8f7 	bl	8002b24 <__retarget_lock_release_recursive>
 8002936:	4628      	mov	r0, r5
 8002938:	b003      	add	sp, #12
 800293a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800293e:	2e00      	cmp	r6, #0
 8002940:	d0d8      	beq.n	80028f4 <setvbuf+0x9c>
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	b913      	cbnz	r3, 800294c <setvbuf+0xf4>
 8002946:	4638      	mov	r0, r7
 8002948:	f7ff ff36 	bl	80027b8 <__sinit>
 800294c:	f1b8 0f01 	cmp.w	r8, #1
 8002950:	bf08      	it	eq
 8002952:	89a3      	ldrheq	r3, [r4, #12]
 8002954:	6026      	str	r6, [r4, #0]
 8002956:	bf04      	itt	eq
 8002958:	f043 0301 	orreq.w	r3, r3, #1
 800295c:	81a3      	strheq	r3, [r4, #12]
 800295e:	89a3      	ldrh	r3, [r4, #12]
 8002960:	f013 0208 	ands.w	r2, r3, #8
 8002964:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002968:	d01d      	beq.n	80029a6 <setvbuf+0x14e>
 800296a:	07da      	lsls	r2, r3, #31
 800296c:	bf41      	itttt	mi
 800296e:	2200      	movmi	r2, #0
 8002970:	426d      	negmi	r5, r5
 8002972:	60a2      	strmi	r2, [r4, #8]
 8002974:	61a5      	strmi	r5, [r4, #24]
 8002976:	bf58      	it	pl
 8002978:	60a5      	strpl	r5, [r4, #8]
 800297a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800297c:	f015 0501 	ands.w	r5, r5, #1
 8002980:	d0d4      	beq.n	800292c <setvbuf+0xd4>
 8002982:	2500      	movs	r5, #0
 8002984:	e7d7      	b.n	8002936 <setvbuf+0xde>
 8002986:	4648      	mov	r0, r9
 8002988:	f000 f91a 	bl	8002bc0 <malloc>
 800298c:	4606      	mov	r6, r0
 800298e:	2800      	cmp	r0, #0
 8002990:	d0ba      	beq.n	8002908 <setvbuf+0xb0>
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002998:	81a3      	strh	r3, [r4, #12]
 800299a:	464d      	mov	r5, r9
 800299c:	e7d1      	b.n	8002942 <setvbuf+0xea>
 800299e:	2500      	movs	r5, #0
 80029a0:	e7b4      	b.n	800290c <setvbuf+0xb4>
 80029a2:	46a9      	mov	r9, r5
 80029a4:	e7f5      	b.n	8002992 <setvbuf+0x13a>
 80029a6:	60a2      	str	r2, [r4, #8]
 80029a8:	e7e7      	b.n	800297a <setvbuf+0x122>
 80029aa:	f04f 35ff 	mov.w	r5, #4294967295
 80029ae:	e7c2      	b.n	8002936 <setvbuf+0xde>
 80029b0:	20000064 	.word	0x20000064

080029b4 <__sread>:
 80029b4:	b510      	push	{r4, lr}
 80029b6:	460c      	mov	r4, r1
 80029b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029bc:	f000 f868 	bl	8002a90 <_read_r>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	bfab      	itete	ge
 80029c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80029c6:	89a3      	ldrhlt	r3, [r4, #12]
 80029c8:	181b      	addge	r3, r3, r0
 80029ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80029ce:	bfac      	ite	ge
 80029d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80029d2:	81a3      	strhlt	r3, [r4, #12]
 80029d4:	bd10      	pop	{r4, pc}

080029d6 <__swrite>:
 80029d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029da:	461f      	mov	r7, r3
 80029dc:	898b      	ldrh	r3, [r1, #12]
 80029de:	05db      	lsls	r3, r3, #23
 80029e0:	4605      	mov	r5, r0
 80029e2:	460c      	mov	r4, r1
 80029e4:	4616      	mov	r6, r2
 80029e6:	d505      	bpl.n	80029f4 <__swrite+0x1e>
 80029e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ec:	2302      	movs	r3, #2
 80029ee:	2200      	movs	r2, #0
 80029f0:	f000 f83c 	bl	8002a6c <_lseek_r>
 80029f4:	89a3      	ldrh	r3, [r4, #12]
 80029f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029fe:	81a3      	strh	r3, [r4, #12]
 8002a00:	4632      	mov	r2, r6
 8002a02:	463b      	mov	r3, r7
 8002a04:	4628      	mov	r0, r5
 8002a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0a:	f000 b853 	b.w	8002ab4 <_write_r>

08002a0e <__sseek>:
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	460c      	mov	r4, r1
 8002a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a16:	f000 f829 	bl	8002a6c <_lseek_r>
 8002a1a:	1c43      	adds	r3, r0, #1
 8002a1c:	89a3      	ldrh	r3, [r4, #12]
 8002a1e:	bf15      	itete	ne
 8002a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a2a:	81a3      	strheq	r3, [r4, #12]
 8002a2c:	bf18      	it	ne
 8002a2e:	81a3      	strhne	r3, [r4, #12]
 8002a30:	bd10      	pop	{r4, pc}

08002a32 <__sclose>:
 8002a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a36:	f000 b809 	b.w	8002a4c <_close_r>

08002a3a <memset>:
 8002a3a:	4402      	add	r2, r0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d100      	bne.n	8002a44 <memset+0xa>
 8002a42:	4770      	bx	lr
 8002a44:	f803 1b01 	strb.w	r1, [r3], #1
 8002a48:	e7f9      	b.n	8002a3e <memset+0x4>
	...

08002a4c <_close_r>:
 8002a4c:	b538      	push	{r3, r4, r5, lr}
 8002a4e:	4d06      	ldr	r5, [pc, #24]	; (8002a68 <_close_r+0x1c>)
 8002a50:	2300      	movs	r3, #0
 8002a52:	4604      	mov	r4, r0
 8002a54:	4608      	mov	r0, r1
 8002a56:	602b      	str	r3, [r5, #0]
 8002a58:	f7fe f920 	bl	8000c9c <_close>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d102      	bne.n	8002a66 <_close_r+0x1a>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	b103      	cbz	r3, 8002a66 <_close_r+0x1a>
 8002a64:	6023      	str	r3, [r4, #0]
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	20000300 	.word	0x20000300

08002a6c <_lseek_r>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4d07      	ldr	r5, [pc, #28]	; (8002a8c <_lseek_r+0x20>)
 8002a70:	4604      	mov	r4, r0
 8002a72:	4608      	mov	r0, r1
 8002a74:	4611      	mov	r1, r2
 8002a76:	2200      	movs	r2, #0
 8002a78:	602a      	str	r2, [r5, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7fe f90f 	bl	8000c9e <_lseek>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_lseek_r+0x1e>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_lseek_r+0x1e>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	20000300 	.word	0x20000300

08002a90 <_read_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4d07      	ldr	r5, [pc, #28]	; (8002ab0 <_read_r+0x20>)
 8002a94:	4604      	mov	r4, r0
 8002a96:	4608      	mov	r0, r1
 8002a98:	4611      	mov	r1, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	602a      	str	r2, [r5, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7fe f8ee 	bl	8000c80 <_read>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d102      	bne.n	8002aae <_read_r+0x1e>
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	b103      	cbz	r3, 8002aae <_read_r+0x1e>
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	bd38      	pop	{r3, r4, r5, pc}
 8002ab0:	20000300 	.word	0x20000300

08002ab4 <_write_r>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	4d07      	ldr	r5, [pc, #28]	; (8002ad4 <_write_r+0x20>)
 8002ab8:	4604      	mov	r4, r0
 8002aba:	4608      	mov	r0, r1
 8002abc:	4611      	mov	r1, r2
 8002abe:	2200      	movs	r2, #0
 8002ac0:	602a      	str	r2, [r5, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f7fe f8d0 	bl	8000c68 <_write>
 8002ac8:	1c43      	adds	r3, r0, #1
 8002aca:	d102      	bne.n	8002ad2 <_write_r+0x1e>
 8002acc:	682b      	ldr	r3, [r5, #0]
 8002ace:	b103      	cbz	r3, 8002ad2 <_write_r+0x1e>
 8002ad0:	6023      	str	r3, [r4, #0]
 8002ad2:	bd38      	pop	{r3, r4, r5, pc}
 8002ad4:	20000300 	.word	0x20000300

08002ad8 <__libc_init_array>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	4d0d      	ldr	r5, [pc, #52]	; (8002b10 <__libc_init_array+0x38>)
 8002adc:	4c0d      	ldr	r4, [pc, #52]	; (8002b14 <__libc_init_array+0x3c>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	42a6      	cmp	r6, r4
 8002ae6:	d109      	bne.n	8002afc <__libc_init_array+0x24>
 8002ae8:	4d0b      	ldr	r5, [pc, #44]	; (8002b18 <__libc_init_array+0x40>)
 8002aea:	4c0c      	ldr	r4, [pc, #48]	; (8002b1c <__libc_init_array+0x44>)
 8002aec:	f000 fdd6 	bl	800369c <_init>
 8002af0:	1b64      	subs	r4, r4, r5
 8002af2:	10a4      	asrs	r4, r4, #2
 8002af4:	2600      	movs	r6, #0
 8002af6:	42a6      	cmp	r6, r4
 8002af8:	d105      	bne.n	8002b06 <__libc_init_array+0x2e>
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b00:	4798      	blx	r3
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7ee      	b.n	8002ae4 <__libc_init_array+0xc>
 8002b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0a:	4798      	blx	r3
 8002b0c:	3601      	adds	r6, #1
 8002b0e:	e7f2      	b.n	8002af6 <__libc_init_array+0x1e>
 8002b10:	08003740 	.word	0x08003740
 8002b14:	08003740 	.word	0x08003740
 8002b18:	08003740 	.word	0x08003740
 8002b1c:	08003744 	.word	0x08003744

08002b20 <__retarget_lock_init_recursive>:
 8002b20:	4770      	bx	lr

08002b22 <__retarget_lock_acquire_recursive>:
 8002b22:	4770      	bx	lr

08002b24 <__retarget_lock_release_recursive>:
 8002b24:	4770      	bx	lr
	...

08002b28 <_free_r>:
 8002b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b2a:	2900      	cmp	r1, #0
 8002b2c:	d044      	beq.n	8002bb8 <_free_r+0x90>
 8002b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b32:	9001      	str	r0, [sp, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f1a1 0404 	sub.w	r4, r1, #4
 8002b3a:	bfb8      	it	lt
 8002b3c:	18e4      	addlt	r4, r4, r3
 8002b3e:	f000 f8e7 	bl	8002d10 <__malloc_lock>
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <_free_r+0x94>)
 8002b44:	9801      	ldr	r0, [sp, #4]
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	b933      	cbnz	r3, 8002b58 <_free_r+0x30>
 8002b4a:	6063      	str	r3, [r4, #4]
 8002b4c:	6014      	str	r4, [r2, #0]
 8002b4e:	b003      	add	sp, #12
 8002b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b54:	f000 b8e2 	b.w	8002d1c <__malloc_unlock>
 8002b58:	42a3      	cmp	r3, r4
 8002b5a:	d908      	bls.n	8002b6e <_free_r+0x46>
 8002b5c:	6825      	ldr	r5, [r4, #0]
 8002b5e:	1961      	adds	r1, r4, r5
 8002b60:	428b      	cmp	r3, r1
 8002b62:	bf01      	itttt	eq
 8002b64:	6819      	ldreq	r1, [r3, #0]
 8002b66:	685b      	ldreq	r3, [r3, #4]
 8002b68:	1949      	addeq	r1, r1, r5
 8002b6a:	6021      	streq	r1, [r4, #0]
 8002b6c:	e7ed      	b.n	8002b4a <_free_r+0x22>
 8002b6e:	461a      	mov	r2, r3
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	b10b      	cbz	r3, 8002b78 <_free_r+0x50>
 8002b74:	42a3      	cmp	r3, r4
 8002b76:	d9fa      	bls.n	8002b6e <_free_r+0x46>
 8002b78:	6811      	ldr	r1, [r2, #0]
 8002b7a:	1855      	adds	r5, r2, r1
 8002b7c:	42a5      	cmp	r5, r4
 8002b7e:	d10b      	bne.n	8002b98 <_free_r+0x70>
 8002b80:	6824      	ldr	r4, [r4, #0]
 8002b82:	4421      	add	r1, r4
 8002b84:	1854      	adds	r4, r2, r1
 8002b86:	42a3      	cmp	r3, r4
 8002b88:	6011      	str	r1, [r2, #0]
 8002b8a:	d1e0      	bne.n	8002b4e <_free_r+0x26>
 8002b8c:	681c      	ldr	r4, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	6053      	str	r3, [r2, #4]
 8002b92:	440c      	add	r4, r1
 8002b94:	6014      	str	r4, [r2, #0]
 8002b96:	e7da      	b.n	8002b4e <_free_r+0x26>
 8002b98:	d902      	bls.n	8002ba0 <_free_r+0x78>
 8002b9a:	230c      	movs	r3, #12
 8002b9c:	6003      	str	r3, [r0, #0]
 8002b9e:	e7d6      	b.n	8002b4e <_free_r+0x26>
 8002ba0:	6825      	ldr	r5, [r4, #0]
 8002ba2:	1961      	adds	r1, r4, r5
 8002ba4:	428b      	cmp	r3, r1
 8002ba6:	bf04      	itt	eq
 8002ba8:	6819      	ldreq	r1, [r3, #0]
 8002baa:	685b      	ldreq	r3, [r3, #4]
 8002bac:	6063      	str	r3, [r4, #4]
 8002bae:	bf04      	itt	eq
 8002bb0:	1949      	addeq	r1, r1, r5
 8002bb2:	6021      	streq	r1, [r4, #0]
 8002bb4:	6054      	str	r4, [r2, #4]
 8002bb6:	e7ca      	b.n	8002b4e <_free_r+0x26>
 8002bb8:	b003      	add	sp, #12
 8002bba:	bd30      	pop	{r4, r5, pc}
 8002bbc:	20000308 	.word	0x20000308

08002bc0 <malloc>:
 8002bc0:	4b02      	ldr	r3, [pc, #8]	; (8002bcc <malloc+0xc>)
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	f000 b823 	b.w	8002c10 <_malloc_r>
 8002bca:	bf00      	nop
 8002bcc:	20000064 	.word	0x20000064

08002bd0 <sbrk_aligned>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	4e0e      	ldr	r6, [pc, #56]	; (8002c0c <sbrk_aligned+0x3c>)
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	6831      	ldr	r1, [r6, #0]
 8002bd8:	4605      	mov	r5, r0
 8002bda:	b911      	cbnz	r1, 8002be2 <sbrk_aligned+0x12>
 8002bdc:	f000 fd40 	bl	8003660 <_sbrk_r>
 8002be0:	6030      	str	r0, [r6, #0]
 8002be2:	4621      	mov	r1, r4
 8002be4:	4628      	mov	r0, r5
 8002be6:	f000 fd3b 	bl	8003660 <_sbrk_r>
 8002bea:	1c43      	adds	r3, r0, #1
 8002bec:	d00a      	beq.n	8002c04 <sbrk_aligned+0x34>
 8002bee:	1cc4      	adds	r4, r0, #3
 8002bf0:	f024 0403 	bic.w	r4, r4, #3
 8002bf4:	42a0      	cmp	r0, r4
 8002bf6:	d007      	beq.n	8002c08 <sbrk_aligned+0x38>
 8002bf8:	1a21      	subs	r1, r4, r0
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f000 fd30 	bl	8003660 <_sbrk_r>
 8002c00:	3001      	adds	r0, #1
 8002c02:	d101      	bne.n	8002c08 <sbrk_aligned+0x38>
 8002c04:	f04f 34ff 	mov.w	r4, #4294967295
 8002c08:	4620      	mov	r0, r4
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	2000030c 	.word	0x2000030c

08002c10 <_malloc_r>:
 8002c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c14:	1ccd      	adds	r5, r1, #3
 8002c16:	f025 0503 	bic.w	r5, r5, #3
 8002c1a:	3508      	adds	r5, #8
 8002c1c:	2d0c      	cmp	r5, #12
 8002c1e:	bf38      	it	cc
 8002c20:	250c      	movcc	r5, #12
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	4607      	mov	r7, r0
 8002c26:	db01      	blt.n	8002c2c <_malloc_r+0x1c>
 8002c28:	42a9      	cmp	r1, r5
 8002c2a:	d905      	bls.n	8002c38 <_malloc_r+0x28>
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	2600      	movs	r6, #0
 8002c32:	4630      	mov	r0, r6
 8002c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d0c <_malloc_r+0xfc>
 8002c3c:	f000 f868 	bl	8002d10 <__malloc_lock>
 8002c40:	f8d8 3000 	ldr.w	r3, [r8]
 8002c44:	461c      	mov	r4, r3
 8002c46:	bb5c      	cbnz	r4, 8002ca0 <_malloc_r+0x90>
 8002c48:	4629      	mov	r1, r5
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	f7ff ffc0 	bl	8002bd0 <sbrk_aligned>
 8002c50:	1c43      	adds	r3, r0, #1
 8002c52:	4604      	mov	r4, r0
 8002c54:	d155      	bne.n	8002d02 <_malloc_r+0xf2>
 8002c56:	f8d8 4000 	ldr.w	r4, [r8]
 8002c5a:	4626      	mov	r6, r4
 8002c5c:	2e00      	cmp	r6, #0
 8002c5e:	d145      	bne.n	8002cec <_malloc_r+0xdc>
 8002c60:	2c00      	cmp	r4, #0
 8002c62:	d048      	beq.n	8002cf6 <_malloc_r+0xe6>
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	4631      	mov	r1, r6
 8002c68:	4638      	mov	r0, r7
 8002c6a:	eb04 0903 	add.w	r9, r4, r3
 8002c6e:	f000 fcf7 	bl	8003660 <_sbrk_r>
 8002c72:	4581      	cmp	r9, r0
 8002c74:	d13f      	bne.n	8002cf6 <_malloc_r+0xe6>
 8002c76:	6821      	ldr	r1, [r4, #0]
 8002c78:	1a6d      	subs	r5, r5, r1
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	4638      	mov	r0, r7
 8002c7e:	f7ff ffa7 	bl	8002bd0 <sbrk_aligned>
 8002c82:	3001      	adds	r0, #1
 8002c84:	d037      	beq.n	8002cf6 <_malloc_r+0xe6>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	442b      	add	r3, r5
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d038      	beq.n	8002d06 <_malloc_r+0xf6>
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	42a2      	cmp	r2, r4
 8002c98:	d12b      	bne.n	8002cf2 <_malloc_r+0xe2>
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	e00f      	b.n	8002cc0 <_malloc_r+0xb0>
 8002ca0:	6822      	ldr	r2, [r4, #0]
 8002ca2:	1b52      	subs	r2, r2, r5
 8002ca4:	d41f      	bmi.n	8002ce6 <_malloc_r+0xd6>
 8002ca6:	2a0b      	cmp	r2, #11
 8002ca8:	d917      	bls.n	8002cda <_malloc_r+0xca>
 8002caa:	1961      	adds	r1, r4, r5
 8002cac:	42a3      	cmp	r3, r4
 8002cae:	6025      	str	r5, [r4, #0]
 8002cb0:	bf18      	it	ne
 8002cb2:	6059      	strne	r1, [r3, #4]
 8002cb4:	6863      	ldr	r3, [r4, #4]
 8002cb6:	bf08      	it	eq
 8002cb8:	f8c8 1000 	streq.w	r1, [r8]
 8002cbc:	5162      	str	r2, [r4, r5]
 8002cbe:	604b      	str	r3, [r1, #4]
 8002cc0:	4638      	mov	r0, r7
 8002cc2:	f104 060b 	add.w	r6, r4, #11
 8002cc6:	f000 f829 	bl	8002d1c <__malloc_unlock>
 8002cca:	f026 0607 	bic.w	r6, r6, #7
 8002cce:	1d23      	adds	r3, r4, #4
 8002cd0:	1af2      	subs	r2, r6, r3
 8002cd2:	d0ae      	beq.n	8002c32 <_malloc_r+0x22>
 8002cd4:	1b9b      	subs	r3, r3, r6
 8002cd6:	50a3      	str	r3, [r4, r2]
 8002cd8:	e7ab      	b.n	8002c32 <_malloc_r+0x22>
 8002cda:	42a3      	cmp	r3, r4
 8002cdc:	6862      	ldr	r2, [r4, #4]
 8002cde:	d1dd      	bne.n	8002c9c <_malloc_r+0x8c>
 8002ce0:	f8c8 2000 	str.w	r2, [r8]
 8002ce4:	e7ec      	b.n	8002cc0 <_malloc_r+0xb0>
 8002ce6:	4623      	mov	r3, r4
 8002ce8:	6864      	ldr	r4, [r4, #4]
 8002cea:	e7ac      	b.n	8002c46 <_malloc_r+0x36>
 8002cec:	4634      	mov	r4, r6
 8002cee:	6876      	ldr	r6, [r6, #4]
 8002cf0:	e7b4      	b.n	8002c5c <_malloc_r+0x4c>
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	e7cc      	b.n	8002c90 <_malloc_r+0x80>
 8002cf6:	230c      	movs	r3, #12
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	4638      	mov	r0, r7
 8002cfc:	f000 f80e 	bl	8002d1c <__malloc_unlock>
 8002d00:	e797      	b.n	8002c32 <_malloc_r+0x22>
 8002d02:	6025      	str	r5, [r4, #0]
 8002d04:	e7dc      	b.n	8002cc0 <_malloc_r+0xb0>
 8002d06:	605b      	str	r3, [r3, #4]
 8002d08:	deff      	udf	#255	; 0xff
 8002d0a:	bf00      	nop
 8002d0c:	20000308 	.word	0x20000308

08002d10 <__malloc_lock>:
 8002d10:	4801      	ldr	r0, [pc, #4]	; (8002d18 <__malloc_lock+0x8>)
 8002d12:	f7ff bf06 	b.w	8002b22 <__retarget_lock_acquire_recursive>
 8002d16:	bf00      	nop
 8002d18:	20000304 	.word	0x20000304

08002d1c <__malloc_unlock>:
 8002d1c:	4801      	ldr	r0, [pc, #4]	; (8002d24 <__malloc_unlock+0x8>)
 8002d1e:	f7ff bf01 	b.w	8002b24 <__retarget_lock_release_recursive>
 8002d22:	bf00      	nop
 8002d24:	20000304 	.word	0x20000304

08002d28 <__sfputc_r>:
 8002d28:	6893      	ldr	r3, [r2, #8]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	b410      	push	{r4}
 8002d30:	6093      	str	r3, [r2, #8]
 8002d32:	da08      	bge.n	8002d46 <__sfputc_r+0x1e>
 8002d34:	6994      	ldr	r4, [r2, #24]
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	db01      	blt.n	8002d3e <__sfputc_r+0x16>
 8002d3a:	290a      	cmp	r1, #10
 8002d3c:	d103      	bne.n	8002d46 <__sfputc_r+0x1e>
 8002d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d42:	f000 bbd5 	b.w	80034f0 <__swbuf_r>
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	1c58      	adds	r0, r3, #1
 8002d4a:	6010      	str	r0, [r2, #0]
 8002d4c:	7019      	strb	r1, [r3, #0]
 8002d4e:	4608      	mov	r0, r1
 8002d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <__sfputs_r>:
 8002d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d58:	4606      	mov	r6, r0
 8002d5a:	460f      	mov	r7, r1
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	18d5      	adds	r5, r2, r3
 8002d60:	42ac      	cmp	r4, r5
 8002d62:	d101      	bne.n	8002d68 <__sfputs_r+0x12>
 8002d64:	2000      	movs	r0, #0
 8002d66:	e007      	b.n	8002d78 <__sfputs_r+0x22>
 8002d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d6c:	463a      	mov	r2, r7
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f7ff ffda 	bl	8002d28 <__sfputc_r>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d1f3      	bne.n	8002d60 <__sfputs_r+0xa>
 8002d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d7c <_vfiprintf_r>:
 8002d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d80:	460d      	mov	r5, r1
 8002d82:	b09d      	sub	sp, #116	; 0x74
 8002d84:	4614      	mov	r4, r2
 8002d86:	4698      	mov	r8, r3
 8002d88:	4606      	mov	r6, r0
 8002d8a:	b118      	cbz	r0, 8002d94 <_vfiprintf_r+0x18>
 8002d8c:	6a03      	ldr	r3, [r0, #32]
 8002d8e:	b90b      	cbnz	r3, 8002d94 <_vfiprintf_r+0x18>
 8002d90:	f7ff fd12 	bl	80027b8 <__sinit>
 8002d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d96:	07d9      	lsls	r1, r3, #31
 8002d98:	d405      	bmi.n	8002da6 <_vfiprintf_r+0x2a>
 8002d9a:	89ab      	ldrh	r3, [r5, #12]
 8002d9c:	059a      	lsls	r2, r3, #22
 8002d9e:	d402      	bmi.n	8002da6 <_vfiprintf_r+0x2a>
 8002da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002da2:	f7ff febe 	bl	8002b22 <__retarget_lock_acquire_recursive>
 8002da6:	89ab      	ldrh	r3, [r5, #12]
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	d501      	bpl.n	8002db0 <_vfiprintf_r+0x34>
 8002dac:	692b      	ldr	r3, [r5, #16]
 8002dae:	b99b      	cbnz	r3, 8002dd8 <_vfiprintf_r+0x5c>
 8002db0:	4629      	mov	r1, r5
 8002db2:	4630      	mov	r0, r6
 8002db4:	f000 fbda 	bl	800356c <__swsetup_r>
 8002db8:	b170      	cbz	r0, 8002dd8 <_vfiprintf_r+0x5c>
 8002dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dbc:	07dc      	lsls	r4, r3, #31
 8002dbe:	d504      	bpl.n	8002dca <_vfiprintf_r+0x4e>
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	b01d      	add	sp, #116	; 0x74
 8002dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dca:	89ab      	ldrh	r3, [r5, #12]
 8002dcc:	0598      	lsls	r0, r3, #22
 8002dce:	d4f7      	bmi.n	8002dc0 <_vfiprintf_r+0x44>
 8002dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dd2:	f7ff fea7 	bl	8002b24 <__retarget_lock_release_recursive>
 8002dd6:	e7f3      	b.n	8002dc0 <_vfiprintf_r+0x44>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9309      	str	r3, [sp, #36]	; 0x24
 8002ddc:	2320      	movs	r3, #32
 8002dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002de6:	2330      	movs	r3, #48	; 0x30
 8002de8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002f9c <_vfiprintf_r+0x220>
 8002dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002df0:	f04f 0901 	mov.w	r9, #1
 8002df4:	4623      	mov	r3, r4
 8002df6:	469a      	mov	sl, r3
 8002df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dfc:	b10a      	cbz	r2, 8002e02 <_vfiprintf_r+0x86>
 8002dfe:	2a25      	cmp	r2, #37	; 0x25
 8002e00:	d1f9      	bne.n	8002df6 <_vfiprintf_r+0x7a>
 8002e02:	ebba 0b04 	subs.w	fp, sl, r4
 8002e06:	d00b      	beq.n	8002e20 <_vfiprintf_r+0xa4>
 8002e08:	465b      	mov	r3, fp
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f7ff ffa1 	bl	8002d56 <__sfputs_r>
 8002e14:	3001      	adds	r0, #1
 8002e16:	f000 80a9 	beq.w	8002f6c <_vfiprintf_r+0x1f0>
 8002e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e1c:	445a      	add	r2, fp
 8002e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8002e20:	f89a 3000 	ldrb.w	r3, [sl]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a1 	beq.w	8002f6c <_vfiprintf_r+0x1f0>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e34:	f10a 0a01 	add.w	sl, sl, #1
 8002e38:	9304      	str	r3, [sp, #16]
 8002e3a:	9307      	str	r3, [sp, #28]
 8002e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e40:	931a      	str	r3, [sp, #104]	; 0x68
 8002e42:	4654      	mov	r4, sl
 8002e44:	2205      	movs	r2, #5
 8002e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e4a:	4854      	ldr	r0, [pc, #336]	; (8002f9c <_vfiprintf_r+0x220>)
 8002e4c:	f7fd f9f8 	bl	8000240 <memchr>
 8002e50:	9a04      	ldr	r2, [sp, #16]
 8002e52:	b9d8      	cbnz	r0, 8002e8c <_vfiprintf_r+0x110>
 8002e54:	06d1      	lsls	r1, r2, #27
 8002e56:	bf44      	itt	mi
 8002e58:	2320      	movmi	r3, #32
 8002e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e5e:	0713      	lsls	r3, r2, #28
 8002e60:	bf44      	itt	mi
 8002e62:	232b      	movmi	r3, #43	; 0x2b
 8002e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e68:	f89a 3000 	ldrb.w	r3, [sl]
 8002e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e6e:	d015      	beq.n	8002e9c <_vfiprintf_r+0x120>
 8002e70:	9a07      	ldr	r2, [sp, #28]
 8002e72:	4654      	mov	r4, sl
 8002e74:	2000      	movs	r0, #0
 8002e76:	f04f 0c0a 	mov.w	ip, #10
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e80:	3b30      	subs	r3, #48	; 0x30
 8002e82:	2b09      	cmp	r3, #9
 8002e84:	d94d      	bls.n	8002f22 <_vfiprintf_r+0x1a6>
 8002e86:	b1b0      	cbz	r0, 8002eb6 <_vfiprintf_r+0x13a>
 8002e88:	9207      	str	r2, [sp, #28]
 8002e8a:	e014      	b.n	8002eb6 <_vfiprintf_r+0x13a>
 8002e8c:	eba0 0308 	sub.w	r3, r0, r8
 8002e90:	fa09 f303 	lsl.w	r3, r9, r3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	9304      	str	r3, [sp, #16]
 8002e98:	46a2      	mov	sl, r4
 8002e9a:	e7d2      	b.n	8002e42 <_vfiprintf_r+0xc6>
 8002e9c:	9b03      	ldr	r3, [sp, #12]
 8002e9e:	1d19      	adds	r1, r3, #4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	9103      	str	r1, [sp, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bfbb      	ittet	lt
 8002ea8:	425b      	neglt	r3, r3
 8002eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8002eae:	9307      	strge	r3, [sp, #28]
 8002eb0:	9307      	strlt	r3, [sp, #28]
 8002eb2:	bfb8      	it	lt
 8002eb4:	9204      	strlt	r2, [sp, #16]
 8002eb6:	7823      	ldrb	r3, [r4, #0]
 8002eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eba:	d10c      	bne.n	8002ed6 <_vfiprintf_r+0x15a>
 8002ebc:	7863      	ldrb	r3, [r4, #1]
 8002ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8002ec0:	d134      	bne.n	8002f2c <_vfiprintf_r+0x1b0>
 8002ec2:	9b03      	ldr	r3, [sp, #12]
 8002ec4:	1d1a      	adds	r2, r3, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	9203      	str	r2, [sp, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bfb8      	it	lt
 8002ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ed2:	3402      	adds	r4, #2
 8002ed4:	9305      	str	r3, [sp, #20]
 8002ed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002fac <_vfiprintf_r+0x230>
 8002eda:	7821      	ldrb	r1, [r4, #0]
 8002edc:	2203      	movs	r2, #3
 8002ede:	4650      	mov	r0, sl
 8002ee0:	f7fd f9ae 	bl	8000240 <memchr>
 8002ee4:	b138      	cbz	r0, 8002ef6 <_vfiprintf_r+0x17a>
 8002ee6:	9b04      	ldr	r3, [sp, #16]
 8002ee8:	eba0 000a 	sub.w	r0, r0, sl
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	4082      	lsls	r2, r0
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	3401      	adds	r4, #1
 8002ef4:	9304      	str	r3, [sp, #16]
 8002ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002efa:	4829      	ldr	r0, [pc, #164]	; (8002fa0 <_vfiprintf_r+0x224>)
 8002efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f00:	2206      	movs	r2, #6
 8002f02:	f7fd f99d 	bl	8000240 <memchr>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d03f      	beq.n	8002f8a <_vfiprintf_r+0x20e>
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <_vfiprintf_r+0x228>)
 8002f0c:	bb1b      	cbnz	r3, 8002f56 <_vfiprintf_r+0x1da>
 8002f0e:	9b03      	ldr	r3, [sp, #12]
 8002f10:	3307      	adds	r3, #7
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	3308      	adds	r3, #8
 8002f18:	9303      	str	r3, [sp, #12]
 8002f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f1c:	443b      	add	r3, r7
 8002f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f20:	e768      	b.n	8002df4 <_vfiprintf_r+0x78>
 8002f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f26:	460c      	mov	r4, r1
 8002f28:	2001      	movs	r0, #1
 8002f2a:	e7a6      	b.n	8002e7a <_vfiprintf_r+0xfe>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	3401      	adds	r4, #1
 8002f30:	9305      	str	r3, [sp, #20]
 8002f32:	4619      	mov	r1, r3
 8002f34:	f04f 0c0a 	mov.w	ip, #10
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f3e:	3a30      	subs	r2, #48	; 0x30
 8002f40:	2a09      	cmp	r2, #9
 8002f42:	d903      	bls.n	8002f4c <_vfiprintf_r+0x1d0>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0c6      	beq.n	8002ed6 <_vfiprintf_r+0x15a>
 8002f48:	9105      	str	r1, [sp, #20]
 8002f4a:	e7c4      	b.n	8002ed6 <_vfiprintf_r+0x15a>
 8002f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f50:	4604      	mov	r4, r0
 8002f52:	2301      	movs	r3, #1
 8002f54:	e7f0      	b.n	8002f38 <_vfiprintf_r+0x1bc>
 8002f56:	ab03      	add	r3, sp, #12
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <_vfiprintf_r+0x22c>)
 8002f5e:	a904      	add	r1, sp, #16
 8002f60:	4630      	mov	r0, r6
 8002f62:	f3af 8000 	nop.w
 8002f66:	4607      	mov	r7, r0
 8002f68:	1c78      	adds	r0, r7, #1
 8002f6a:	d1d6      	bne.n	8002f1a <_vfiprintf_r+0x19e>
 8002f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f6e:	07d9      	lsls	r1, r3, #31
 8002f70:	d405      	bmi.n	8002f7e <_vfiprintf_r+0x202>
 8002f72:	89ab      	ldrh	r3, [r5, #12]
 8002f74:	059a      	lsls	r2, r3, #22
 8002f76:	d402      	bmi.n	8002f7e <_vfiprintf_r+0x202>
 8002f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f7a:	f7ff fdd3 	bl	8002b24 <__retarget_lock_release_recursive>
 8002f7e:	89ab      	ldrh	r3, [r5, #12]
 8002f80:	065b      	lsls	r3, r3, #25
 8002f82:	f53f af1d 	bmi.w	8002dc0 <_vfiprintf_r+0x44>
 8002f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f88:	e71c      	b.n	8002dc4 <_vfiprintf_r+0x48>
 8002f8a:	ab03      	add	r3, sp, #12
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	462a      	mov	r2, r5
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <_vfiprintf_r+0x22c>)
 8002f92:	a904      	add	r1, sp, #16
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 f879 	bl	800308c <_printf_i>
 8002f9a:	e7e4      	b.n	8002f66 <_vfiprintf_r+0x1ea>
 8002f9c:	08003702 	.word	0x08003702
 8002fa0:	0800370c 	.word	0x0800370c
 8002fa4:	00000000 	.word	0x00000000
 8002fa8:	08002d57 	.word	0x08002d57
 8002fac:	08003708 	.word	0x08003708

08002fb0 <_printf_common>:
 8002fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb4:	4616      	mov	r6, r2
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	688a      	ldr	r2, [r1, #8]
 8002fba:	690b      	ldr	r3, [r1, #16]
 8002fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bfb8      	it	lt
 8002fc4:	4613      	movlt	r3, r2
 8002fc6:	6033      	str	r3, [r6, #0]
 8002fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fcc:	4607      	mov	r7, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	b10a      	cbz	r2, 8002fd6 <_printf_common+0x26>
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	6033      	str	r3, [r6, #0]
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	0699      	lsls	r1, r3, #26
 8002fda:	bf42      	ittt	mi
 8002fdc:	6833      	ldrmi	r3, [r6, #0]
 8002fde:	3302      	addmi	r3, #2
 8002fe0:	6033      	strmi	r3, [r6, #0]
 8002fe2:	6825      	ldr	r5, [r4, #0]
 8002fe4:	f015 0506 	ands.w	r5, r5, #6
 8002fe8:	d106      	bne.n	8002ff8 <_printf_common+0x48>
 8002fea:	f104 0a19 	add.w	sl, r4, #25
 8002fee:	68e3      	ldr	r3, [r4, #12]
 8002ff0:	6832      	ldr	r2, [r6, #0]
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	42ab      	cmp	r3, r5
 8002ff6:	dc26      	bgt.n	8003046 <_printf_common+0x96>
 8002ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ffc:	1e13      	subs	r3, r2, #0
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	bf18      	it	ne
 8003002:	2301      	movne	r3, #1
 8003004:	0692      	lsls	r2, r2, #26
 8003006:	d42b      	bmi.n	8003060 <_printf_common+0xb0>
 8003008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800300c:	4649      	mov	r1, r9
 800300e:	4638      	mov	r0, r7
 8003010:	47c0      	blx	r8
 8003012:	3001      	adds	r0, #1
 8003014:	d01e      	beq.n	8003054 <_printf_common+0xa4>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	6922      	ldr	r2, [r4, #16]
 800301a:	f003 0306 	and.w	r3, r3, #6
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf02      	ittt	eq
 8003022:	68e5      	ldreq	r5, [r4, #12]
 8003024:	6833      	ldreq	r3, [r6, #0]
 8003026:	1aed      	subeq	r5, r5, r3
 8003028:	68a3      	ldr	r3, [r4, #8]
 800302a:	bf0c      	ite	eq
 800302c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003030:	2500      	movne	r5, #0
 8003032:	4293      	cmp	r3, r2
 8003034:	bfc4      	itt	gt
 8003036:	1a9b      	subgt	r3, r3, r2
 8003038:	18ed      	addgt	r5, r5, r3
 800303a:	2600      	movs	r6, #0
 800303c:	341a      	adds	r4, #26
 800303e:	42b5      	cmp	r5, r6
 8003040:	d11a      	bne.n	8003078 <_printf_common+0xc8>
 8003042:	2000      	movs	r0, #0
 8003044:	e008      	b.n	8003058 <_printf_common+0xa8>
 8003046:	2301      	movs	r3, #1
 8003048:	4652      	mov	r2, sl
 800304a:	4649      	mov	r1, r9
 800304c:	4638      	mov	r0, r7
 800304e:	47c0      	blx	r8
 8003050:	3001      	adds	r0, #1
 8003052:	d103      	bne.n	800305c <_printf_common+0xac>
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305c:	3501      	adds	r5, #1
 800305e:	e7c6      	b.n	8002fee <_printf_common+0x3e>
 8003060:	18e1      	adds	r1, r4, r3
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	2030      	movs	r0, #48	; 0x30
 8003066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800306a:	4422      	add	r2, r4
 800306c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003074:	3302      	adds	r3, #2
 8003076:	e7c7      	b.n	8003008 <_printf_common+0x58>
 8003078:	2301      	movs	r3, #1
 800307a:	4622      	mov	r2, r4
 800307c:	4649      	mov	r1, r9
 800307e:	4638      	mov	r0, r7
 8003080:	47c0      	blx	r8
 8003082:	3001      	adds	r0, #1
 8003084:	d0e6      	beq.n	8003054 <_printf_common+0xa4>
 8003086:	3601      	adds	r6, #1
 8003088:	e7d9      	b.n	800303e <_printf_common+0x8e>
	...

0800308c <_printf_i>:
 800308c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	7e0f      	ldrb	r7, [r1, #24]
 8003092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003094:	2f78      	cmp	r7, #120	; 0x78
 8003096:	4691      	mov	r9, r2
 8003098:	4680      	mov	r8, r0
 800309a:	460c      	mov	r4, r1
 800309c:	469a      	mov	sl, r3
 800309e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030a2:	d807      	bhi.n	80030b4 <_printf_i+0x28>
 80030a4:	2f62      	cmp	r7, #98	; 0x62
 80030a6:	d80a      	bhi.n	80030be <_printf_i+0x32>
 80030a8:	2f00      	cmp	r7, #0
 80030aa:	f000 80d4 	beq.w	8003256 <_printf_i+0x1ca>
 80030ae:	2f58      	cmp	r7, #88	; 0x58
 80030b0:	f000 80c0 	beq.w	8003234 <_printf_i+0x1a8>
 80030b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030bc:	e03a      	b.n	8003134 <_printf_i+0xa8>
 80030be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030c2:	2b15      	cmp	r3, #21
 80030c4:	d8f6      	bhi.n	80030b4 <_printf_i+0x28>
 80030c6:	a101      	add	r1, pc, #4	; (adr r1, 80030cc <_printf_i+0x40>)
 80030c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030cc:	08003125 	.word	0x08003125
 80030d0:	08003139 	.word	0x08003139
 80030d4:	080030b5 	.word	0x080030b5
 80030d8:	080030b5 	.word	0x080030b5
 80030dc:	080030b5 	.word	0x080030b5
 80030e0:	080030b5 	.word	0x080030b5
 80030e4:	08003139 	.word	0x08003139
 80030e8:	080030b5 	.word	0x080030b5
 80030ec:	080030b5 	.word	0x080030b5
 80030f0:	080030b5 	.word	0x080030b5
 80030f4:	080030b5 	.word	0x080030b5
 80030f8:	0800323d 	.word	0x0800323d
 80030fc:	08003165 	.word	0x08003165
 8003100:	080031f7 	.word	0x080031f7
 8003104:	080030b5 	.word	0x080030b5
 8003108:	080030b5 	.word	0x080030b5
 800310c:	0800325f 	.word	0x0800325f
 8003110:	080030b5 	.word	0x080030b5
 8003114:	08003165 	.word	0x08003165
 8003118:	080030b5 	.word	0x080030b5
 800311c:	080030b5 	.word	0x080030b5
 8003120:	080031ff 	.word	0x080031ff
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	1d1a      	adds	r2, r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	602a      	str	r2, [r5, #0]
 800312c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003134:	2301      	movs	r3, #1
 8003136:	e09f      	b.n	8003278 <_printf_i+0x1ec>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	0607      	lsls	r7, r0, #24
 800313e:	f103 0104 	add.w	r1, r3, #4
 8003142:	6029      	str	r1, [r5, #0]
 8003144:	d501      	bpl.n	800314a <_printf_i+0xbe>
 8003146:	681e      	ldr	r6, [r3, #0]
 8003148:	e003      	b.n	8003152 <_printf_i+0xc6>
 800314a:	0646      	lsls	r6, r0, #25
 800314c:	d5fb      	bpl.n	8003146 <_printf_i+0xba>
 800314e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003152:	2e00      	cmp	r6, #0
 8003154:	da03      	bge.n	800315e <_printf_i+0xd2>
 8003156:	232d      	movs	r3, #45	; 0x2d
 8003158:	4276      	negs	r6, r6
 800315a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800315e:	485a      	ldr	r0, [pc, #360]	; (80032c8 <_printf_i+0x23c>)
 8003160:	230a      	movs	r3, #10
 8003162:	e012      	b.n	800318a <_printf_i+0xfe>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	6820      	ldr	r0, [r4, #0]
 8003168:	1d19      	adds	r1, r3, #4
 800316a:	6029      	str	r1, [r5, #0]
 800316c:	0605      	lsls	r5, r0, #24
 800316e:	d501      	bpl.n	8003174 <_printf_i+0xe8>
 8003170:	681e      	ldr	r6, [r3, #0]
 8003172:	e002      	b.n	800317a <_printf_i+0xee>
 8003174:	0641      	lsls	r1, r0, #25
 8003176:	d5fb      	bpl.n	8003170 <_printf_i+0xe4>
 8003178:	881e      	ldrh	r6, [r3, #0]
 800317a:	4853      	ldr	r0, [pc, #332]	; (80032c8 <_printf_i+0x23c>)
 800317c:	2f6f      	cmp	r7, #111	; 0x6f
 800317e:	bf0c      	ite	eq
 8003180:	2308      	moveq	r3, #8
 8003182:	230a      	movne	r3, #10
 8003184:	2100      	movs	r1, #0
 8003186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800318a:	6865      	ldr	r5, [r4, #4]
 800318c:	60a5      	str	r5, [r4, #8]
 800318e:	2d00      	cmp	r5, #0
 8003190:	bfa2      	ittt	ge
 8003192:	6821      	ldrge	r1, [r4, #0]
 8003194:	f021 0104 	bicge.w	r1, r1, #4
 8003198:	6021      	strge	r1, [r4, #0]
 800319a:	b90e      	cbnz	r6, 80031a0 <_printf_i+0x114>
 800319c:	2d00      	cmp	r5, #0
 800319e:	d04b      	beq.n	8003238 <_printf_i+0x1ac>
 80031a0:	4615      	mov	r5, r2
 80031a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80031a6:	fb03 6711 	mls	r7, r3, r1, r6
 80031aa:	5dc7      	ldrb	r7, [r0, r7]
 80031ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031b0:	4637      	mov	r7, r6
 80031b2:	42bb      	cmp	r3, r7
 80031b4:	460e      	mov	r6, r1
 80031b6:	d9f4      	bls.n	80031a2 <_printf_i+0x116>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d10b      	bne.n	80031d4 <_printf_i+0x148>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	07de      	lsls	r6, r3, #31
 80031c0:	d508      	bpl.n	80031d4 <_printf_i+0x148>
 80031c2:	6923      	ldr	r3, [r4, #16]
 80031c4:	6861      	ldr	r1, [r4, #4]
 80031c6:	4299      	cmp	r1, r3
 80031c8:	bfde      	ittt	le
 80031ca:	2330      	movle	r3, #48	; 0x30
 80031cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031d4:	1b52      	subs	r2, r2, r5
 80031d6:	6122      	str	r2, [r4, #16]
 80031d8:	f8cd a000 	str.w	sl, [sp]
 80031dc:	464b      	mov	r3, r9
 80031de:	aa03      	add	r2, sp, #12
 80031e0:	4621      	mov	r1, r4
 80031e2:	4640      	mov	r0, r8
 80031e4:	f7ff fee4 	bl	8002fb0 <_printf_common>
 80031e8:	3001      	adds	r0, #1
 80031ea:	d14a      	bne.n	8003282 <_printf_i+0x1f6>
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	b004      	add	sp, #16
 80031f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	f043 0320 	orr.w	r3, r3, #32
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	4833      	ldr	r0, [pc, #204]	; (80032cc <_printf_i+0x240>)
 8003200:	2778      	movs	r7, #120	; 0x78
 8003202:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	6829      	ldr	r1, [r5, #0]
 800320a:	061f      	lsls	r7, r3, #24
 800320c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003210:	d402      	bmi.n	8003218 <_printf_i+0x18c>
 8003212:	065f      	lsls	r7, r3, #25
 8003214:	bf48      	it	mi
 8003216:	b2b6      	uxthmi	r6, r6
 8003218:	07df      	lsls	r7, r3, #31
 800321a:	bf48      	it	mi
 800321c:	f043 0320 	orrmi.w	r3, r3, #32
 8003220:	6029      	str	r1, [r5, #0]
 8003222:	bf48      	it	mi
 8003224:	6023      	strmi	r3, [r4, #0]
 8003226:	b91e      	cbnz	r6, 8003230 <_printf_i+0x1a4>
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f023 0320 	bic.w	r3, r3, #32
 800322e:	6023      	str	r3, [r4, #0]
 8003230:	2310      	movs	r3, #16
 8003232:	e7a7      	b.n	8003184 <_printf_i+0xf8>
 8003234:	4824      	ldr	r0, [pc, #144]	; (80032c8 <_printf_i+0x23c>)
 8003236:	e7e4      	b.n	8003202 <_printf_i+0x176>
 8003238:	4615      	mov	r5, r2
 800323a:	e7bd      	b.n	80031b8 <_printf_i+0x12c>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	6826      	ldr	r6, [r4, #0]
 8003240:	6961      	ldr	r1, [r4, #20]
 8003242:	1d18      	adds	r0, r3, #4
 8003244:	6028      	str	r0, [r5, #0]
 8003246:	0635      	lsls	r5, r6, #24
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	d501      	bpl.n	8003250 <_printf_i+0x1c4>
 800324c:	6019      	str	r1, [r3, #0]
 800324e:	e002      	b.n	8003256 <_printf_i+0x1ca>
 8003250:	0670      	lsls	r0, r6, #25
 8003252:	d5fb      	bpl.n	800324c <_printf_i+0x1c0>
 8003254:	8019      	strh	r1, [r3, #0]
 8003256:	2300      	movs	r3, #0
 8003258:	6123      	str	r3, [r4, #16]
 800325a:	4615      	mov	r5, r2
 800325c:	e7bc      	b.n	80031d8 <_printf_i+0x14c>
 800325e:	682b      	ldr	r3, [r5, #0]
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	602a      	str	r2, [r5, #0]
 8003264:	681d      	ldr	r5, [r3, #0]
 8003266:	6862      	ldr	r2, [r4, #4]
 8003268:	2100      	movs	r1, #0
 800326a:	4628      	mov	r0, r5
 800326c:	f7fc ffe8 	bl	8000240 <memchr>
 8003270:	b108      	cbz	r0, 8003276 <_printf_i+0x1ea>
 8003272:	1b40      	subs	r0, r0, r5
 8003274:	6060      	str	r0, [r4, #4]
 8003276:	6863      	ldr	r3, [r4, #4]
 8003278:	6123      	str	r3, [r4, #16]
 800327a:	2300      	movs	r3, #0
 800327c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003280:	e7aa      	b.n	80031d8 <_printf_i+0x14c>
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	462a      	mov	r2, r5
 8003286:	4649      	mov	r1, r9
 8003288:	4640      	mov	r0, r8
 800328a:	47d0      	blx	sl
 800328c:	3001      	adds	r0, #1
 800328e:	d0ad      	beq.n	80031ec <_printf_i+0x160>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	079b      	lsls	r3, r3, #30
 8003294:	d413      	bmi.n	80032be <_printf_i+0x232>
 8003296:	68e0      	ldr	r0, [r4, #12]
 8003298:	9b03      	ldr	r3, [sp, #12]
 800329a:	4298      	cmp	r0, r3
 800329c:	bfb8      	it	lt
 800329e:	4618      	movlt	r0, r3
 80032a0:	e7a6      	b.n	80031f0 <_printf_i+0x164>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4632      	mov	r2, r6
 80032a6:	4649      	mov	r1, r9
 80032a8:	4640      	mov	r0, r8
 80032aa:	47d0      	blx	sl
 80032ac:	3001      	adds	r0, #1
 80032ae:	d09d      	beq.n	80031ec <_printf_i+0x160>
 80032b0:	3501      	adds	r5, #1
 80032b2:	68e3      	ldr	r3, [r4, #12]
 80032b4:	9903      	ldr	r1, [sp, #12]
 80032b6:	1a5b      	subs	r3, r3, r1
 80032b8:	42ab      	cmp	r3, r5
 80032ba:	dcf2      	bgt.n	80032a2 <_printf_i+0x216>
 80032bc:	e7eb      	b.n	8003296 <_printf_i+0x20a>
 80032be:	2500      	movs	r5, #0
 80032c0:	f104 0619 	add.w	r6, r4, #25
 80032c4:	e7f5      	b.n	80032b2 <_printf_i+0x226>
 80032c6:	bf00      	nop
 80032c8:	08003713 	.word	0x08003713
 80032cc:	08003724 	.word	0x08003724

080032d0 <__sflush_r>:
 80032d0:	898a      	ldrh	r2, [r1, #12]
 80032d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032d6:	4605      	mov	r5, r0
 80032d8:	0710      	lsls	r0, r2, #28
 80032da:	460c      	mov	r4, r1
 80032dc:	d458      	bmi.n	8003390 <__sflush_r+0xc0>
 80032de:	684b      	ldr	r3, [r1, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	dc05      	bgt.n	80032f0 <__sflush_r+0x20>
 80032e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	dc02      	bgt.n	80032f0 <__sflush_r+0x20>
 80032ea:	2000      	movs	r0, #0
 80032ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032f2:	2e00      	cmp	r6, #0
 80032f4:	d0f9      	beq.n	80032ea <__sflush_r+0x1a>
 80032f6:	2300      	movs	r3, #0
 80032f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032fc:	682f      	ldr	r7, [r5, #0]
 80032fe:	6a21      	ldr	r1, [r4, #32]
 8003300:	602b      	str	r3, [r5, #0]
 8003302:	d032      	beq.n	800336a <__sflush_r+0x9a>
 8003304:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	075a      	lsls	r2, r3, #29
 800330a:	d505      	bpl.n	8003318 <__sflush_r+0x48>
 800330c:	6863      	ldr	r3, [r4, #4]
 800330e:	1ac0      	subs	r0, r0, r3
 8003310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003312:	b10b      	cbz	r3, 8003318 <__sflush_r+0x48>
 8003314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003316:	1ac0      	subs	r0, r0, r3
 8003318:	2300      	movs	r3, #0
 800331a:	4602      	mov	r2, r0
 800331c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800331e:	6a21      	ldr	r1, [r4, #32]
 8003320:	4628      	mov	r0, r5
 8003322:	47b0      	blx	r6
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	89a3      	ldrh	r3, [r4, #12]
 8003328:	d106      	bne.n	8003338 <__sflush_r+0x68>
 800332a:	6829      	ldr	r1, [r5, #0]
 800332c:	291d      	cmp	r1, #29
 800332e:	d82b      	bhi.n	8003388 <__sflush_r+0xb8>
 8003330:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <__sflush_r+0x108>)
 8003332:	410a      	asrs	r2, r1
 8003334:	07d6      	lsls	r6, r2, #31
 8003336:	d427      	bmi.n	8003388 <__sflush_r+0xb8>
 8003338:	2200      	movs	r2, #0
 800333a:	6062      	str	r2, [r4, #4]
 800333c:	04d9      	lsls	r1, r3, #19
 800333e:	6922      	ldr	r2, [r4, #16]
 8003340:	6022      	str	r2, [r4, #0]
 8003342:	d504      	bpl.n	800334e <__sflush_r+0x7e>
 8003344:	1c42      	adds	r2, r0, #1
 8003346:	d101      	bne.n	800334c <__sflush_r+0x7c>
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	b903      	cbnz	r3, 800334e <__sflush_r+0x7e>
 800334c:	6560      	str	r0, [r4, #84]	; 0x54
 800334e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003350:	602f      	str	r7, [r5, #0]
 8003352:	2900      	cmp	r1, #0
 8003354:	d0c9      	beq.n	80032ea <__sflush_r+0x1a>
 8003356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800335a:	4299      	cmp	r1, r3
 800335c:	d002      	beq.n	8003364 <__sflush_r+0x94>
 800335e:	4628      	mov	r0, r5
 8003360:	f7ff fbe2 	bl	8002b28 <_free_r>
 8003364:	2000      	movs	r0, #0
 8003366:	6360      	str	r0, [r4, #52]	; 0x34
 8003368:	e7c0      	b.n	80032ec <__sflush_r+0x1c>
 800336a:	2301      	movs	r3, #1
 800336c:	4628      	mov	r0, r5
 800336e:	47b0      	blx	r6
 8003370:	1c41      	adds	r1, r0, #1
 8003372:	d1c8      	bne.n	8003306 <__sflush_r+0x36>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0c5      	beq.n	8003306 <__sflush_r+0x36>
 800337a:	2b1d      	cmp	r3, #29
 800337c:	d001      	beq.n	8003382 <__sflush_r+0xb2>
 800337e:	2b16      	cmp	r3, #22
 8003380:	d101      	bne.n	8003386 <__sflush_r+0xb6>
 8003382:	602f      	str	r7, [r5, #0]
 8003384:	e7b1      	b.n	80032ea <__sflush_r+0x1a>
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	e7ad      	b.n	80032ec <__sflush_r+0x1c>
 8003390:	690f      	ldr	r7, [r1, #16]
 8003392:	2f00      	cmp	r7, #0
 8003394:	d0a9      	beq.n	80032ea <__sflush_r+0x1a>
 8003396:	0793      	lsls	r3, r2, #30
 8003398:	680e      	ldr	r6, [r1, #0]
 800339a:	bf08      	it	eq
 800339c:	694b      	ldreq	r3, [r1, #20]
 800339e:	600f      	str	r7, [r1, #0]
 80033a0:	bf18      	it	ne
 80033a2:	2300      	movne	r3, #0
 80033a4:	eba6 0807 	sub.w	r8, r6, r7
 80033a8:	608b      	str	r3, [r1, #8]
 80033aa:	f1b8 0f00 	cmp.w	r8, #0
 80033ae:	dd9c      	ble.n	80032ea <__sflush_r+0x1a>
 80033b0:	6a21      	ldr	r1, [r4, #32]
 80033b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033b4:	4643      	mov	r3, r8
 80033b6:	463a      	mov	r2, r7
 80033b8:	4628      	mov	r0, r5
 80033ba:	47b0      	blx	r6
 80033bc:	2800      	cmp	r0, #0
 80033be:	dc06      	bgt.n	80033ce <__sflush_r+0xfe>
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c6:	81a3      	strh	r3, [r4, #12]
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	e78e      	b.n	80032ec <__sflush_r+0x1c>
 80033ce:	4407      	add	r7, r0
 80033d0:	eba8 0800 	sub.w	r8, r8, r0
 80033d4:	e7e9      	b.n	80033aa <__sflush_r+0xda>
 80033d6:	bf00      	nop
 80033d8:	dfbffffe 	.word	0xdfbffffe

080033dc <_fflush_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	690b      	ldr	r3, [r1, #16]
 80033e0:	4605      	mov	r5, r0
 80033e2:	460c      	mov	r4, r1
 80033e4:	b913      	cbnz	r3, 80033ec <_fflush_r+0x10>
 80033e6:	2500      	movs	r5, #0
 80033e8:	4628      	mov	r0, r5
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	b118      	cbz	r0, 80033f6 <_fflush_r+0x1a>
 80033ee:	6a03      	ldr	r3, [r0, #32]
 80033f0:	b90b      	cbnz	r3, 80033f6 <_fflush_r+0x1a>
 80033f2:	f7ff f9e1 	bl	80027b8 <__sinit>
 80033f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f3      	beq.n	80033e6 <_fflush_r+0xa>
 80033fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003400:	07d0      	lsls	r0, r2, #31
 8003402:	d404      	bmi.n	800340e <_fflush_r+0x32>
 8003404:	0599      	lsls	r1, r3, #22
 8003406:	d402      	bmi.n	800340e <_fflush_r+0x32>
 8003408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800340a:	f7ff fb8a 	bl	8002b22 <__retarget_lock_acquire_recursive>
 800340e:	4628      	mov	r0, r5
 8003410:	4621      	mov	r1, r4
 8003412:	f7ff ff5d 	bl	80032d0 <__sflush_r>
 8003416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003418:	07da      	lsls	r2, r3, #31
 800341a:	4605      	mov	r5, r0
 800341c:	d4e4      	bmi.n	80033e8 <_fflush_r+0xc>
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	059b      	lsls	r3, r3, #22
 8003422:	d4e1      	bmi.n	80033e8 <_fflush_r+0xc>
 8003424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003426:	f7ff fb7d 	bl	8002b24 <__retarget_lock_release_recursive>
 800342a:	e7dd      	b.n	80033e8 <_fflush_r+0xc>

0800342c <__swhatbuf_r>:
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	460c      	mov	r4, r1
 8003430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003434:	2900      	cmp	r1, #0
 8003436:	b096      	sub	sp, #88	; 0x58
 8003438:	4615      	mov	r5, r2
 800343a:	461e      	mov	r6, r3
 800343c:	da0d      	bge.n	800345a <__swhatbuf_r+0x2e>
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	bf0c      	ite	eq
 800344a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800344e:	2340      	movne	r3, #64	; 0x40
 8003450:	2000      	movs	r0, #0
 8003452:	6031      	str	r1, [r6, #0]
 8003454:	602b      	str	r3, [r5, #0]
 8003456:	b016      	add	sp, #88	; 0x58
 8003458:	bd70      	pop	{r4, r5, r6, pc}
 800345a:	466a      	mov	r2, sp
 800345c:	f000 f8de 	bl	800361c <_fstat_r>
 8003460:	2800      	cmp	r0, #0
 8003462:	dbec      	blt.n	800343e <__swhatbuf_r+0x12>
 8003464:	9901      	ldr	r1, [sp, #4]
 8003466:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800346a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800346e:	4259      	negs	r1, r3
 8003470:	4159      	adcs	r1, r3
 8003472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003476:	e7eb      	b.n	8003450 <__swhatbuf_r+0x24>

08003478 <__smakebuf_r>:
 8003478:	898b      	ldrh	r3, [r1, #12]
 800347a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800347c:	079d      	lsls	r5, r3, #30
 800347e:	4606      	mov	r6, r0
 8003480:	460c      	mov	r4, r1
 8003482:	d507      	bpl.n	8003494 <__smakebuf_r+0x1c>
 8003484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	6123      	str	r3, [r4, #16]
 800348c:	2301      	movs	r3, #1
 800348e:	6163      	str	r3, [r4, #20]
 8003490:	b002      	add	sp, #8
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	ab01      	add	r3, sp, #4
 8003496:	466a      	mov	r2, sp
 8003498:	f7ff ffc8 	bl	800342c <__swhatbuf_r>
 800349c:	9900      	ldr	r1, [sp, #0]
 800349e:	4605      	mov	r5, r0
 80034a0:	4630      	mov	r0, r6
 80034a2:	f7ff fbb5 	bl	8002c10 <_malloc_r>
 80034a6:	b948      	cbnz	r0, 80034bc <__smakebuf_r+0x44>
 80034a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ac:	059a      	lsls	r2, r3, #22
 80034ae:	d4ef      	bmi.n	8003490 <__smakebuf_r+0x18>
 80034b0:	f023 0303 	bic.w	r3, r3, #3
 80034b4:	f043 0302 	orr.w	r3, r3, #2
 80034b8:	81a3      	strh	r3, [r4, #12]
 80034ba:	e7e3      	b.n	8003484 <__smakebuf_r+0xc>
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	6020      	str	r0, [r4, #0]
 80034c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	9b00      	ldr	r3, [sp, #0]
 80034c8:	6163      	str	r3, [r4, #20]
 80034ca:	9b01      	ldr	r3, [sp, #4]
 80034cc:	6120      	str	r0, [r4, #16]
 80034ce:	b15b      	cbz	r3, 80034e8 <__smakebuf_r+0x70>
 80034d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034d4:	4630      	mov	r0, r6
 80034d6:	f000 f8b3 	bl	8003640 <_isatty_r>
 80034da:	b128      	cbz	r0, 80034e8 <__smakebuf_r+0x70>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	431d      	orrs	r5, r3
 80034ec:	81a5      	strh	r5, [r4, #12]
 80034ee:	e7cf      	b.n	8003490 <__smakebuf_r+0x18>

080034f0 <__swbuf_r>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	460e      	mov	r6, r1
 80034f4:	4614      	mov	r4, r2
 80034f6:	4605      	mov	r5, r0
 80034f8:	b118      	cbz	r0, 8003502 <__swbuf_r+0x12>
 80034fa:	6a03      	ldr	r3, [r0, #32]
 80034fc:	b90b      	cbnz	r3, 8003502 <__swbuf_r+0x12>
 80034fe:	f7ff f95b 	bl	80027b8 <__sinit>
 8003502:	69a3      	ldr	r3, [r4, #24]
 8003504:	60a3      	str	r3, [r4, #8]
 8003506:	89a3      	ldrh	r3, [r4, #12]
 8003508:	071a      	lsls	r2, r3, #28
 800350a:	d525      	bpl.n	8003558 <__swbuf_r+0x68>
 800350c:	6923      	ldr	r3, [r4, #16]
 800350e:	b31b      	cbz	r3, 8003558 <__swbuf_r+0x68>
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	6922      	ldr	r2, [r4, #16]
 8003514:	1a98      	subs	r0, r3, r2
 8003516:	6963      	ldr	r3, [r4, #20]
 8003518:	b2f6      	uxtb	r6, r6
 800351a:	4283      	cmp	r3, r0
 800351c:	4637      	mov	r7, r6
 800351e:	dc04      	bgt.n	800352a <__swbuf_r+0x3a>
 8003520:	4621      	mov	r1, r4
 8003522:	4628      	mov	r0, r5
 8003524:	f7ff ff5a 	bl	80033dc <_fflush_r>
 8003528:	b9e0      	cbnz	r0, 8003564 <__swbuf_r+0x74>
 800352a:	68a3      	ldr	r3, [r4, #8]
 800352c:	3b01      	subs	r3, #1
 800352e:	60a3      	str	r3, [r4, #8]
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	6022      	str	r2, [r4, #0]
 8003536:	701e      	strb	r6, [r3, #0]
 8003538:	6962      	ldr	r2, [r4, #20]
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	429a      	cmp	r2, r3
 800353e:	d004      	beq.n	800354a <__swbuf_r+0x5a>
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	07db      	lsls	r3, r3, #31
 8003544:	d506      	bpl.n	8003554 <__swbuf_r+0x64>
 8003546:	2e0a      	cmp	r6, #10
 8003548:	d104      	bne.n	8003554 <__swbuf_r+0x64>
 800354a:	4621      	mov	r1, r4
 800354c:	4628      	mov	r0, r5
 800354e:	f7ff ff45 	bl	80033dc <_fflush_r>
 8003552:	b938      	cbnz	r0, 8003564 <__swbuf_r+0x74>
 8003554:	4638      	mov	r0, r7
 8003556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003558:	4621      	mov	r1, r4
 800355a:	4628      	mov	r0, r5
 800355c:	f000 f806 	bl	800356c <__swsetup_r>
 8003560:	2800      	cmp	r0, #0
 8003562:	d0d5      	beq.n	8003510 <__swbuf_r+0x20>
 8003564:	f04f 37ff 	mov.w	r7, #4294967295
 8003568:	e7f4      	b.n	8003554 <__swbuf_r+0x64>
	...

0800356c <__swsetup_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <__swsetup_r+0xac>)
 8003570:	4605      	mov	r5, r0
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	460c      	mov	r4, r1
 8003576:	b118      	cbz	r0, 8003580 <__swsetup_r+0x14>
 8003578:	6a03      	ldr	r3, [r0, #32]
 800357a:	b90b      	cbnz	r3, 8003580 <__swsetup_r+0x14>
 800357c:	f7ff f91c 	bl	80027b8 <__sinit>
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003586:	0718      	lsls	r0, r3, #28
 8003588:	d422      	bmi.n	80035d0 <__swsetup_r+0x64>
 800358a:	06d9      	lsls	r1, r3, #27
 800358c:	d407      	bmi.n	800359e <__swsetup_r+0x32>
 800358e:	2309      	movs	r3, #9
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003596:	81a3      	strh	r3, [r4, #12]
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	e034      	b.n	8003608 <__swsetup_r+0x9c>
 800359e:	0758      	lsls	r0, r3, #29
 80035a0:	d512      	bpl.n	80035c8 <__swsetup_r+0x5c>
 80035a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035a4:	b141      	cbz	r1, 80035b8 <__swsetup_r+0x4c>
 80035a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035aa:	4299      	cmp	r1, r3
 80035ac:	d002      	beq.n	80035b4 <__swsetup_r+0x48>
 80035ae:	4628      	mov	r0, r5
 80035b0:	f7ff faba 	bl	8002b28 <_free_r>
 80035b4:	2300      	movs	r3, #0
 80035b6:	6363      	str	r3, [r4, #52]	; 0x34
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	2300      	movs	r3, #0
 80035c2:	6063      	str	r3, [r4, #4]
 80035c4:	6923      	ldr	r3, [r4, #16]
 80035c6:	6023      	str	r3, [r4, #0]
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f043 0308 	orr.w	r3, r3, #8
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	b94b      	cbnz	r3, 80035e8 <__swsetup_r+0x7c>
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035de:	d003      	beq.n	80035e8 <__swsetup_r+0x7c>
 80035e0:	4621      	mov	r1, r4
 80035e2:	4628      	mov	r0, r5
 80035e4:	f7ff ff48 	bl	8003478 <__smakebuf_r>
 80035e8:	89a0      	ldrh	r0, [r4, #12]
 80035ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035ee:	f010 0301 	ands.w	r3, r0, #1
 80035f2:	d00a      	beq.n	800360a <__swsetup_r+0x9e>
 80035f4:	2300      	movs	r3, #0
 80035f6:	60a3      	str	r3, [r4, #8]
 80035f8:	6963      	ldr	r3, [r4, #20]
 80035fa:	425b      	negs	r3, r3
 80035fc:	61a3      	str	r3, [r4, #24]
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	b943      	cbnz	r3, 8003614 <__swsetup_r+0xa8>
 8003602:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003606:	d1c4      	bne.n	8003592 <__swsetup_r+0x26>
 8003608:	bd38      	pop	{r3, r4, r5, pc}
 800360a:	0781      	lsls	r1, r0, #30
 800360c:	bf58      	it	pl
 800360e:	6963      	ldrpl	r3, [r4, #20]
 8003610:	60a3      	str	r3, [r4, #8]
 8003612:	e7f4      	b.n	80035fe <__swsetup_r+0x92>
 8003614:	2000      	movs	r0, #0
 8003616:	e7f7      	b.n	8003608 <__swsetup_r+0x9c>
 8003618:	20000064 	.word	0x20000064

0800361c <_fstat_r>:
 800361c:	b538      	push	{r3, r4, r5, lr}
 800361e:	4d07      	ldr	r5, [pc, #28]	; (800363c <_fstat_r+0x20>)
 8003620:	2300      	movs	r3, #0
 8003622:	4604      	mov	r4, r0
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	602b      	str	r3, [r5, #0]
 800362a:	f7fd fb39 	bl	8000ca0 <_fstat>
 800362e:	1c43      	adds	r3, r0, #1
 8003630:	d102      	bne.n	8003638 <_fstat_r+0x1c>
 8003632:	682b      	ldr	r3, [r5, #0]
 8003634:	b103      	cbz	r3, 8003638 <_fstat_r+0x1c>
 8003636:	6023      	str	r3, [r4, #0]
 8003638:	bd38      	pop	{r3, r4, r5, pc}
 800363a:	bf00      	nop
 800363c:	20000300 	.word	0x20000300

08003640 <_isatty_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4d06      	ldr	r5, [pc, #24]	; (800365c <_isatty_r+0x1c>)
 8003644:	2300      	movs	r3, #0
 8003646:	4604      	mov	r4, r0
 8003648:	4608      	mov	r0, r1
 800364a:	602b      	str	r3, [r5, #0]
 800364c:	f7fd fb29 	bl	8000ca2 <_isatty>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d102      	bne.n	800365a <_isatty_r+0x1a>
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	b103      	cbz	r3, 800365a <_isatty_r+0x1a>
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	20000300 	.word	0x20000300

08003660 <_sbrk_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	4d06      	ldr	r5, [pc, #24]	; (800367c <_sbrk_r+0x1c>)
 8003664:	2300      	movs	r3, #0
 8003666:	4604      	mov	r4, r0
 8003668:	4608      	mov	r0, r1
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	f000 f808 	bl	8003680 <_sbrk>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d102      	bne.n	800367a <_sbrk_r+0x1a>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	b103      	cbz	r3, 800367a <_sbrk_r+0x1a>
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	bd38      	pop	{r3, r4, r5, pc}
 800367c:	20000300 	.word	0x20000300

08003680 <_sbrk>:
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <_sbrk+0x14>)
 8003682:	6811      	ldr	r1, [r2, #0]
 8003684:	4603      	mov	r3, r0
 8003686:	b909      	cbnz	r1, 800368c <_sbrk+0xc>
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <_sbrk+0x18>)
 800368a:	6011      	str	r1, [r2, #0]
 800368c:	6810      	ldr	r0, [r2, #0]
 800368e:	4403      	add	r3, r0
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4770      	bx	lr
 8003694:	20000310 	.word	0x20000310
 8003698:	20000318 	.word	0x20000318

0800369c <_init>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr

080036a8 <_fini>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr
