
final_project_4790.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000374c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a24  08003a24  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a2c  08003a2c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000068  08003a9c  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  20000314  08003a9c  00020314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011da8  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff0  00000000  00000000  00031e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000071bf  00000000  00000000  00033e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009b0  00000000  00000000  0003b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000078d  00000000  00000000  0003b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e3c2  00000000  00000000  0003c16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000131a8  00000000  00000000  0006a52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d680  00000000  00000000  0007d6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002324  00000000  00000000  0019ad58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0019d07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08003934 	.word	0x08003934

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08003934 	.word	0x08003934

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 80005dc:	b500      	push	{lr}
 80005de:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005f2:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005f4:	2219      	movs	r2, #25
 80005f6:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 80005f8:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80005fc:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000600:	2309      	movs	r3, #9
 8000602:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000604:	2307      	movs	r3, #7
 8000606:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000608:	4668      	mov	r0, sp
 800060a:	f001 fa8b 	bl	8001b24 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800060e:	b100      	cbz	r0, 8000612 <SystemClock_Config+0x36>
    while(1) { ; }
 8000610:	e7fe      	b.n	8000610 <SystemClock_Config+0x34>
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8000612:	f001 fa49 	bl	8001aa8 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000616:	b100      	cbz	r0, 800061a <SystemClock_Config+0x3e>
    while(1) { ; }
 8000618:	e7fe      	b.n	8000618 <SystemClock_Config+0x3c>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800061a:	230f      	movs	r3, #15
 800061c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000630:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000632:	2107      	movs	r1, #7
 8000634:	a80d      	add	r0, sp, #52	; 0x34
 8000636:	f001 fceb 	bl	8002010 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 800063a:	b100      	cbz	r0, 800063e <SystemClock_Config+0x62>
    while(1) { ; }
 800063c:	e7fe      	b.n	800063c <SystemClock_Config+0x60>
  }
}
 800063e:	b013      	add	sp, #76	; 0x4c
 8000640:	f85d fb04 	ldr.w	pc, [sp], #4

08000644 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 8000644:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000646:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800064a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <CPU_CACHE_Enable+0x7c>)
 8000650:	2100      	movs	r1, #0
 8000652:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000656:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800065a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000664:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000666:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800066a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800066e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000672:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000676:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800067a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800067e:	e000      	b.n	8000682 <CPU_CACHE_Enable+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000680:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000682:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000686:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800068a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800068e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000692:	490b      	ldr	r1, [pc, #44]	; (80006c0 <CPU_CACHE_Enable+0x7c>)
 8000694:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000698:	4613      	mov	r3, r2
 800069a:	3a01      	subs	r2, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f2      	bne.n	8000686 <CPU_CACHE_Enable+0x42>
    } while(sets-- != 0U);
 80006a0:	1e43      	subs	r3, r0, #1
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d1ec      	bne.n	8000680 <CPU_CACHE_Enable+0x3c>
 80006a6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006aa:	694b      	ldr	r3, [r1, #20]
 80006ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b0:	614b      	str	r3, [r1, #20]
 80006b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006b6:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80006ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <Clock_Inits>:
	initUart(&USB_UART, 115200, USART1);
	setbuf(stdout, NULL);
}

// Initializes clocks for various peripherals. Some might need to be added!
void Clock_Inits(void) {
 80006c4:	b0a4      	sub	sp, #144	; 0x90
	// Clock all GPIO ports and Timers.
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b9f      	ldr	r3, [pc, #636]	; (8000944 <Clock_Inits+0x280>)
 80006c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ca:	f042 0201 	orr.w	r2, r2, #1
 80006ce:	631a      	str	r2, [r3, #48]	; 0x30
 80006d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d2:	f002 0201 	and.w	r2, r2, #1
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006dc:	f042 0202 	orr.w	r2, r2, #2
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
 80006e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e4:	f002 0202 	and.w	r2, r2, #2
 80006e8:	9202      	str	r2, [sp, #8]
 80006ea:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ee:	f042 0204 	orr.w	r2, r2, #4
 80006f2:	631a      	str	r2, [r3, #48]	; 0x30
 80006f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f6:	f002 0204 	and.w	r2, r2, #4
 80006fa:	9203      	str	r2, [sp, #12]
 80006fc:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000700:	f042 0208 	orr.w	r2, r2, #8
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
 8000706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000708:	f002 0208 	and.w	r2, r2, #8
 800070c:	9204      	str	r2, [sp, #16]
 800070e:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000712:	f042 0210 	orr.w	r2, r2, #16
 8000716:	631a      	str	r2, [r3, #48]	; 0x30
 8000718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071a:	f002 0210 	and.w	r2, r2, #16
 800071e:	9205      	str	r2, [sp, #20]
 8000720:	9a05      	ldr	r2, [sp, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000724:	f042 0220 	orr.w	r2, r2, #32
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
 800072a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800072c:	f002 0220 	and.w	r2, r2, #32
 8000730:	9206      	str	r2, [sp, #24]
 8000732:	9a06      	ldr	r2, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800073a:	631a      	str	r2, [r3, #48]	; 0x30
 800073c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800073e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000742:	9207      	str	r2, [sp, #28]
 8000744:	9a07      	ldr	r2, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800074c:	631a      	str	r2, [r3, #48]	; 0x30
 800074e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000750:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000754:	9208      	str	r2, [sp, #32]
 8000756:	9a08      	ldr	r2, [sp, #32]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800075a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
 8000760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000762:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000766:	9209      	str	r2, [sp, #36]	; 0x24
 8000768:	9a09      	ldr	r2, [sp, #36]	; 0x24
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800076a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800076c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
 8000772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000774:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000778:	920a      	str	r2, [sp, #40]	; 0x28
 800077a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800077c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800077e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
 8000784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000786:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800078a:	920b      	str	r2, [sp, #44]	; 0x2c
 800078c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000794:	645a      	str	r2, [r3, #68]	; 0x44
 8000796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000798:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800079c:	920c      	str	r2, [sp, #48]	; 0x30
 800079e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	__HAL_RCC_TIM1_CLK_ENABLE();
 80007a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	645a      	str	r2, [r3, #68]	; 0x44
 80007a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007aa:	f002 0201 	and.w	r2, r2, #1
 80007ae:	920d      	str	r2, [sp, #52]	; 0x34
 80007b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	__HAL_RCC_TIM2_CLK_ENABLE();
 80007b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b4:	f042 0201 	orr.w	r2, r2, #1
 80007b8:	641a      	str	r2, [r3, #64]	; 0x40
 80007ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007bc:	f002 0201 	and.w	r2, r2, #1
 80007c0:	920e      	str	r2, [sp, #56]	; 0x38
 80007c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	__HAL_RCC_TIM3_CLK_ENABLE();
 80007c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c6:	f042 0202 	orr.w	r2, r2, #2
 80007ca:	641a      	str	r2, [r3, #64]	; 0x40
 80007cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ce:	f002 0202 	and.w	r2, r2, #2
 80007d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80007d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	__HAL_RCC_TIM4_CLK_ENABLE();
 80007d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d8:	f042 0204 	orr.w	r2, r2, #4
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40
 80007de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e0:	f002 0204 	and.w	r2, r2, #4
 80007e4:	9210      	str	r2, [sp, #64]	; 0x40
 80007e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
	__HAL_RCC_TIM5_CLK_ENABLE();
 80007e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ea:	f042 0208 	orr.w	r2, r2, #8
 80007ee:	641a      	str	r2, [r3, #64]	; 0x40
 80007f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f2:	f002 0208 	and.w	r2, r2, #8
 80007f6:	9211      	str	r2, [sp, #68]	; 0x44
 80007f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
	__HAL_RCC_TIM6_CLK_ENABLE();
 80007fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007fc:	f042 0210 	orr.w	r2, r2, #16
 8000800:	641a      	str	r2, [r3, #64]	; 0x40
 8000802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000804:	f002 0210 	and.w	r2, r2, #16
 8000808:	9212      	str	r2, [sp, #72]	; 0x48
 800080a:	9a12      	ldr	r2, [sp, #72]	; 0x48
	__HAL_RCC_TIM7_CLK_ENABLE();
 800080c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080e:	f042 0220 	orr.w	r2, r2, #32
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
 8000814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000816:	f002 0220 	and.w	r2, r2, #32
 800081a:	9213      	str	r2, [sp, #76]	; 0x4c
 800081c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	__HAL_RCC_TIM8_CLK_ENABLE();
 800081e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000820:	f042 0202 	orr.w	r2, r2, #2
 8000824:	645a      	str	r2, [r3, #68]	; 0x44
 8000826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000828:	f002 0202 	and.w	r2, r2, #2
 800082c:	9214      	str	r2, [sp, #80]	; 0x50
 800082e:	9a14      	ldr	r2, [sp, #80]	; 0x50
	__HAL_RCC_TIM9_CLK_ENABLE();
 8000830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000832:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000836:	645a      	str	r2, [r3, #68]	; 0x44
 8000838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800083a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800083e:	9215      	str	r2, [sp, #84]	; 0x54
 8000840:	9a15      	ldr	r2, [sp, #84]	; 0x54
	__HAL_RCC_TIM10_CLK_ENABLE();
 8000842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000844:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000848:	645a      	str	r2, [r3, #68]	; 0x44
 800084a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800084c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000850:	9216      	str	r2, [sp, #88]	; 0x58
 8000852:	9a16      	ldr	r2, [sp, #88]	; 0x58
	__HAL_RCC_TIM11_CLK_ENABLE();
 8000854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000856:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800085a:	645a      	str	r2, [r3, #68]	; 0x44
 800085c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800085e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000862:	9217      	str	r2, [sp, #92]	; 0x5c
 8000864:	9a17      	ldr	r2, [sp, #92]	; 0x5c
	__HAL_RCC_TIM12_CLK_ENABLE();
 8000866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800086c:	641a      	str	r2, [r3, #64]	; 0x40
 800086e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000870:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000874:	9218      	str	r2, [sp, #96]	; 0x60
 8000876:	9a18      	ldr	r2, [sp, #96]	; 0x60
	__HAL_RCC_TIM13_CLK_ENABLE();
 8000878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800087e:	641a      	str	r2, [r3, #64]	; 0x40
 8000880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000882:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000886:	9219      	str	r2, [sp, #100]	; 0x64
 8000888:	9a19      	ldr	r2, [sp, #100]	; 0x64
	__HAL_RCC_TIM14_CLK_ENABLE();
 800088a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000890:	641a      	str	r2, [r3, #64]	; 0x40
 8000892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000894:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000898:	921a      	str	r2, [sp, #104]	; 0x68
 800089a:	9a1a      	ldr	r2, [sp, #104]	; 0x68

	// Enable SPI2 clock
	__HAL_RCC_SPI2_CLK_ENABLE();
 800089c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800089e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008a2:	641a      	str	r2, [r3, #64]	; 0x40
 80008a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80008ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c

	// ADC and DAC
	__HAL_RCC_DAC_CLK_ENABLE();
 80008ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40
 80008b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80008bc:	921c      	str	r2, [sp, #112]	; 0x70
 80008be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	__HAL_RCC_ADC1_CLK_ENABLE();
 80008c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008c6:	645a      	str	r2, [r3, #68]	; 0x44
 80008c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ca:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80008ce:	921d      	str	r2, [sp, #116]	; 0x74
 80008d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	__HAL_RCC_ADC2_CLK_ENABLE();
 80008d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008d8:	645a      	str	r2, [r3, #68]	; 0x44
 80008da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80008e0:	921e      	str	r2, [sp, #120]	; 0x78
 80008e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
	__HAL_RCC_ADC3_CLK_ENABLE();
 80008e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008ea:	645a      	str	r2, [r3, #68]	; 0x44
 80008ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ee:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80008f2:	921f      	str	r2, [sp, #124]	; 0x7c
 80008f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c

	// DMA Clocks
	__HAL_RCC_DMA1_CLK_ENABLE();
 80008f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
 80008fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000900:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000904:	9220      	str	r2, [sp, #128]	; 0x80
 8000906:	9a20      	ldr	r2, [sp, #128]	; 0x80
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800090a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800090e:	631a      	str	r2, [r3, #48]	; 0x30
 8000910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000912:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000916:	9221      	str	r2, [sp, #132]	; 0x84
 8000918:	9a21      	ldr	r2, [sp, #132]	; 0x84

	// JPEG Clock
	__HAL_RCC_JPEG_CLK_ENABLE();
 800091a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091c:	f042 0202 	orr.w	r2, r2, #2
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000924:	f002 0202 	and.w	r2, r2, #2
 8000928:	9222      	str	r2, [sp, #136]	; 0x88
 800092a:	9a22      	ldr	r2, [sp, #136]	; 0x88

	// DMA2D Clock
	__HAL_RCC_DMA2D_CLK_ENABLE();
 800092c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800093a:	9323      	str	r3, [sp, #140]	; 0x8c
 800093c:	9b23      	ldr	r3, [sp, #140]	; 0x8c

}
 800093e:	b024      	add	sp, #144	; 0x90
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <Sys_Init>:
void Sys_Init(void) {
 8000948:	b508      	push	{r3, lr}
	CPU_CACHE_Enable();		// Enable CPU Caching
 800094a:	f7ff fe7b 	bl	8000644 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 800094e:	f000 fa37 	bl	8000dc0 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 8000952:	f7ff fe43 	bl	80005dc <SystemClock_Config>
	Clock_Inits();
 8000956:	f7ff feb5 	bl	80006c4 <Clock_Inits>
	initUart(&USB_UART, 115200, USART1);
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <Sys_Init+0x2c>)
 800095c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <Sys_Init+0x30>)
 8000962:	f000 f9a7 	bl	8000cb4 <initUart>
	setbuf(stdout, NULL);
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <Sys_Init+0x34>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2100      	movs	r1, #0
 800096c:	6898      	ldr	r0, [r3, #8]
 800096e:	f002 f8b7 	bl	8002ae0 <setbuf>
}
 8000972:	bd08      	pop	{r3, pc}
 8000974:	40011000 	.word	0x40011000
 8000978:	20000138 	.word	0x20000138
 800097c:	20000064 	.word	0x20000064

08000980 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000980:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000982:	f000 fa33 	bl	8000dec <HAL_IncTick>
}
 8000986:	bd08      	pop	{r3, pc}

08000988 <init_i2c>:

MPU6050_t mpu6050;
I2C_HandleTypeDef hi2c1;


void init_i2c() {
 8000988:	b500      	push	{lr}
 800098a:	b087      	sub	sp, #28
	GPIO_InitTypeDef gpio_init;

	hi2c1.Instance = I2C1;
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <init_i2c+0x78>)
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <init_i2c+0x7c>)
 8000990:	6003      	str	r3, [r0, #0]
	hi2c1.Init.Timing = 0x00506682;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <init_i2c+0x80>)
 8000994:	6043      	str	r3, [r0, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	6083      	str	r3, [r0, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	2201      	movs	r2, #1
 800099c:	60c2      	str	r2, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099e:	6103      	str	r3, [r0, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80009a0:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a2:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a4:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a6:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a8:	f000 fd5a 	bl	8001460 <HAL_I2C_Init>
 80009ac:	b9e0      	cbnz	r0, 80009e8 <init_i2c+0x60>
	{
		printf("I2C init failed\n\r");
	}
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <init_i2c+0x78>)
 80009b2:	f001 f81f 	bl	80019f4 <HAL_I2CEx_ConfigAnalogFilter>
 80009b6:	b9d8      	cbnz	r0, 80009f0 <init_i2c+0x68>
		printf("I2C analog filter init failed\n\r");
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <init_i2c+0x78>)
 80009bc:	f001 f848 	bl	8001a50 <HAL_I2CEx_ConfigDigitalFilter>
 80009c0:	b9d0      	cbnz	r0, 80009f8 <init_i2c+0x70>
	{
		printf("I2C digital filter init failed\n\r");
	}

	gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80009c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c6:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	9304      	str	r3, [sp, #16]
	gpio_init.Alternate = GPIO_AF4_I2C1;
 80009d4:	2304      	movs	r3, #4
 80009d6:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &gpio_init);
 80009d8:	eb0d 0103 	add.w	r1, sp, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <init_i2c+0x84>)
 80009de:	f000 fa87 	bl	8000ef0 <HAL_GPIO_Init>
}
 80009e2:	b007      	add	sp, #28
 80009e4:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C init failed\n\r");
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <init_i2c+0x88>)
 80009ea:	f002 f867 	bl	8002abc <iprintf>
 80009ee:	e7de      	b.n	80009ae <init_i2c+0x26>
		printf("I2C analog filter init failed\n\r");
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <init_i2c+0x8c>)
 80009f2:	f002 f863 	bl	8002abc <iprintf>
 80009f6:	e7df      	b.n	80009b8 <init_i2c+0x30>
		printf("I2C digital filter init failed\n\r");
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <init_i2c+0x90>)
 80009fa:	f002 f85f 	bl	8002abc <iprintf>
 80009fe:	e7e0      	b.n	80009c2 <init_i2c+0x3a>
 8000a00:	20000088 	.word	0x20000088
 8000a04:	40005400 	.word	0x40005400
 8000a08:	00506682 	.word	0x00506682
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	08003964 	.word	0x08003964
 8000a14:	08003978 	.word	0x08003978
 8000a18:	08003998 	.word	0x08003998

08000a1c <main>:

int main(void){
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	b086      	sub	sp, #24
	Sys_Init();
 8000a20:	f7ff ff92 	bl	8000948 <Sys_Init>
	init_i2c();
 8000a24:	f7ff ffb0 	bl	8000988 <init_i2c>
	uint8_t init_status = MPU6050_Init(&hi2c1);
 8000a28:	4d1c      	ldr	r5, [pc, #112]	; (8000a9c <main+0x80>)
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	f000 f83e 	bl	8000aac <MPU6050_Init>
 8000a30:	4604      	mov	r4, r0
	uint8_t Rec_Data[6];
	HAL_I2C_Master_Transmit(&hi2c1,20,Rec_Data,1,1000); //Sending in Blocking mode
 8000a32:	ae04      	add	r6, sp, #16
 8000a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	4632      	mov	r2, r6
 8000a3e:	2114      	movs	r1, #20
 8000a40:	4628      	mov	r0, r5
 8000a42:	f000 fd6b 	bl	800151c <HAL_I2C_Master_Transmit>

    HAL_I2C_Mem_Read(&hi2c1, 0xAA, 1, 1, Rec_Data, 6, 10);
 8000a46:	230a      	movs	r3, #10
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	9600      	str	r6, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	461a      	mov	r2, r3
 8000a54:	21aa      	movs	r1, #170	; 0xaa
 8000a56:	4628      	mov	r0, r5
 8000a58:	f000 fef4 	bl	8001844 <HAL_I2C_Mem_Read>

	if(init_status != 0) {
 8000a5c:	b1cc      	cbz	r4, 8000a92 <main+0x76>
		printf("init failed\n\r");
 8000a5e:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <main+0x84>)
 8000a60:	f002 f82c 	bl	8002abc <iprintf>
	}else{
		printf("init success\n\r");
	}
	while(1) {
		MPU6050_Read_Gyro(&hi2c1, &mpu6050);
 8000a64:	4c0d      	ldr	r4, [pc, #52]	; (8000a9c <main+0x80>)
 8000a66:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f000 f870 	bl	8000b50 <MPU6050_Read_Gyro>
		HAL_Delay(100);
 8000a70:	2064      	movs	r0, #100	; 0x64
 8000a72:	f000 f9cd 	bl	8000e10 <HAL_Delay>
		printf("Gyro X is %d, Y is %d, Z is %d \n\r", mpu6050.Gx, mpu6050.Gy, mpu6050.Gz);
 8000a76:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
 8000a7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000a7e:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 8000a82:	e9cd 2300 	strd	r2, r3, [sp]
 8000a86:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <main+0x88>)
 8000a8c:	f002 f816 	bl	8002abc <iprintf>
	while(1) {
 8000a90:	e7e8      	b.n	8000a64 <main+0x48>
		printf("init success\n\r");
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <main+0x8c>)
 8000a94:	f002 f812 	bl	8002abc <iprintf>
 8000a98:	e7e4      	b.n	8000a64 <main+0x48>
 8000a9a:	bf00      	nop
 8000a9c:	20000088 	.word	0x20000088
 8000aa0:	08003968 	.word	0x08003968
 8000aa4:	080039cc 	.word	0x080039cc
 8000aa8:	080039bc 	.word	0x080039bc

08000aac <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	4605      	mov	r5, r0
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000ab4:	2364      	movs	r3, #100	; 0x64
 8000ab6:	9302      	str	r3, [sp, #8]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	f10d 0217 	add.w	r2, sp, #23
 8000ac0:	9200      	str	r2, [sp, #0]
 8000ac2:	2275      	movs	r2, #117	; 0x75
 8000ac4:	21d0      	movs	r1, #208	; 0xd0
 8000ac6:	f000 febd 	bl	8001844 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000aca:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000ace:	2b68      	cmp	r3, #104	; 0x68
 8000ad0:	d003      	beq.n	8000ada <MPU6050_Init+0x2e>
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        return 0;
    }
    return 1;
 8000ad2:	2001      	movs	r0, #1
}
 8000ad4:	b006      	add	sp, #24
 8000ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Data = 0;
 8000ada:	2400      	movs	r4, #0
 8000adc:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000ae0:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ae4:	f8cd 8008 	str.w	r8, [sp, #8]
 8000ae8:	2601      	movs	r6, #1
 8000aea:	9601      	str	r6, [sp, #4]
 8000aec:	f10d 0716 	add.w	r7, sp, #22
 8000af0:	9700      	str	r7, [sp, #0]
 8000af2:	4633      	mov	r3, r6
 8000af4:	226b      	movs	r2, #107	; 0x6b
 8000af6:	21d0      	movs	r1, #208	; 0xd0
 8000af8:	4628      	mov	r0, r5
 8000afa:	f000 fdcd 	bl	8001698 <HAL_I2C_Mem_Write>
        Data = 0x07;
 8000afe:	2307      	movs	r3, #7
 8000b00:	f88d 3016 	strb.w	r3, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000b04:	f8cd 8008 	str.w	r8, [sp, #8]
 8000b08:	9601      	str	r6, [sp, #4]
 8000b0a:	9700      	str	r7, [sp, #0]
 8000b0c:	4633      	mov	r3, r6
 8000b0e:	2219      	movs	r2, #25
 8000b10:	21d0      	movs	r1, #208	; 0xd0
 8000b12:	4628      	mov	r0, r5
 8000b14:	f000 fdc0 	bl	8001698 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8000b18:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000b1c:	f8cd 8008 	str.w	r8, [sp, #8]
 8000b20:	9601      	str	r6, [sp, #4]
 8000b22:	9700      	str	r7, [sp, #0]
 8000b24:	4633      	mov	r3, r6
 8000b26:	221c      	movs	r2, #28
 8000b28:	21d0      	movs	r1, #208	; 0xd0
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f000 fdb4 	bl	8001698 <HAL_I2C_Mem_Write>
        Data = 0x00;
 8000b30:	f88d 4016 	strb.w	r4, [sp, #22]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000b34:	f8cd 8008 	str.w	r8, [sp, #8]
 8000b38:	9601      	str	r6, [sp, #4]
 8000b3a:	9700      	str	r7, [sp, #0]
 8000b3c:	4633      	mov	r3, r6
 8000b3e:	221b      	movs	r2, #27
 8000b40:	21d0      	movs	r1, #208	; 0xd0
 8000b42:	4628      	mov	r0, r5
 8000b44:	f000 fda8 	bl	8001698 <HAL_I2C_Mem_Write>
        return 0;
 8000b48:	4620      	mov	r0, r4
 8000b4a:	e7c3      	b.n	8000ad4 <MPU6050_Init+0x28>
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000b50:	b510      	push	{r4, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	460c      	mov	r4, r1
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	9302      	str	r3, [sp, #8]
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	ab04      	add	r3, sp, #16
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	2301      	movs	r3, #1
 8000b64:	2243      	movs	r2, #67	; 0x43
 8000b66:	21d0      	movs	r1, #208	; 0xd0
 8000b68:	f000 fe6c 	bl	8001844 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000b6c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8000b70:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8000b74:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8000b78:	b209      	sxth	r1, r1
 8000b7a:	8421      	strh	r1, [r4, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000b7c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000b80:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8000b84:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8000b88:	b212      	sxth	r2, r2
 8000b8a:	8462      	strh	r2, [r4, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000b8c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8000b90:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000b94:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	84a3      	strh	r3, [r4, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8000b9c:	ee07 1a90 	vmov	s15, r1
 8000ba0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ba4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000bd8 <MPU6050_Read_Gyro+0x88>
 8000ba8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000bac:	ed84 5b0a 	vstr	d5, [r4, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8000bb0:	ee07 2a90 	vmov	s15, r2
 8000bb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bb8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000bbc:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bc8:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000bcc:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
}
 8000bd0:	b006      	add	sp, #24
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	f3af 8000 	nop.w
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40606000 	.word	0x40606000

08000be0 <HAL_UART_MspInit>:
UART_HandleTypeDef USB_UART;

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8000be0:	b530      	push	{r4, r5, lr}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000be4:	6803      	ldr	r3, [r0, #0]
 8000be6:	4a2e      	ldr	r2, [pc, #184]	; (8000ca0 <HAL_UART_MspInit+0xc0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d004      	beq.n	8000bf6 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000bec:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <HAL_UART_MspInit+0xc4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d02c      	beq.n	8000c4c <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 8000bf2:	b00b      	add	sp, #44	; 0x2c
 8000bf4:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000bf6:	4c2c      	ldr	r4, [pc, #176]	; (8000ca8 <HAL_UART_MspInit+0xc8>)
 8000bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8000c00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0e:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 8000c20:	4d22      	ldr	r5, [pc, #136]	; (8000cac <HAL_UART_MspInit+0xcc>)
 8000c22:	a905      	add	r1, sp, #20
 8000c24:	4628      	mov	r0, r5
 8000c26:	f000 f963 	bl	8000ef0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2e:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 8000c30:	a905      	add	r1, sp, #20
 8000c32:	4628      	mov	r0, r5
 8000c34:	f000 f95c 	bl	8000ef0 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 8000c38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6463      	str	r3, [r4, #68]	; 0x44
 8000c40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	9302      	str	r3, [sp, #8]
 8000c48:	9b02      	ldr	r3, [sp, #8]
 8000c4a:	e7d2      	b.n	8000bf2 <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 8000c4c:	4c16      	ldr	r4, [pc, #88]	; (8000ca8 <HAL_UART_MspInit+0xc8>)
 8000c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6323      	str	r3, [r4, #48]	; 0x30
 8000c56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	9303      	str	r3, [sp, #12]
 8000c5e:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c70:	2308      	movs	r3, #8
 8000c72:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 8000c74:	4d0e      	ldr	r5, [pc, #56]	; (8000cb0 <HAL_UART_MspInit+0xd0>)
 8000c76:	a905      	add	r1, sp, #20
 8000c78:	4628      	mov	r0, r5
 8000c7a:	f000 f939 	bl	8000ef0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 8000c82:	a905      	add	r1, sp, #20
 8000c84:	4628      	mov	r0, r5
 8000c86:	f000 f933 	bl	8000ef0 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000c8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c8c:	f043 0320 	orr.w	r3, r3, #32
 8000c90:	6463      	str	r3, [r4, #68]	; 0x44
 8000c92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c94:	f003 0320 	and.w	r3, r3, #32
 8000c98:	9304      	str	r3, [sp, #16]
 8000c9a:	9b04      	ldr	r3, [sp, #16]
}
 8000c9c:	e7a9      	b.n	8000bf2 <HAL_UART_MspInit+0x12>
 8000c9e:	bf00      	nop
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	40011400 	.word	0x40011400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000cb4:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000cb6:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000cb8:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	2200      	movs	r2, #0
 8000cbc:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000cbe:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000cc0:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000cc2:	210c      	movs	r1, #12
 8000cc4:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000cc6:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000cc8:	f001 fe04 	bl	80028d4 <HAL_UART_Init>
}
 8000ccc:	bd08      	pop	{r3, pc}
	...

08000cd0 <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd8:	b292      	uxth	r2, r2
 8000cda:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <_write+0x14>)
 8000cdc:	f001 fcdb 	bl	8002696 <HAL_UART_Transmit>
	return len;
}
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	bd10      	pop	{r4, pc}
 8000ce4:	20000138 	.word	0x20000138

08000ce8 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000ce8:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000cea:	2200      	movs	r2, #0
 8000cec:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <_read+0x18>)
 8000cf6:	f001 fd2c 	bl	8002752 <HAL_UART_Receive>
	return len;
}
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	bd08      	pop	{r3, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000138 	.word	0x20000138

08000d04 <_close>:
	}
  return i; // The way this is set up, it will always report the wrong size
}

// These functions need to be defined for compiler version gcc-arm version 11.3
__attribute__((weak)) void _close(void){}
 8000d04:	4770      	bx	lr

08000d06 <_lseek>:
__attribute__((weak)) void _lseek(void){}
 8000d06:	4770      	bx	lr

08000d08 <_fstat>:
__attribute__((weak)) void _fstat(void){}
 8000d08:	4770      	bx	lr

08000d0a <_isatty>:
__attribute__((weak)) void _getpid(void){}
__attribute__((weak)) void _ispid(void){}
__attribute__((weak)) void _kill(void){}
__attribute__((weak)) void _isatty(void){}
 8000d0a:	4770      	bx	lr

08000d0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490e      	ldr	r1, [pc, #56]	; (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0b      	ldr	r4, [pc, #44]	; (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d36:	f000 f813 	bl	8000d60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d3a:	f002 f819 	bl	8002d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff fe6d 	bl	8000a1c <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   r0, =_estack
 8000d44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d50:	08003a34 	.word	0x08003a34
  ldr r2, =_sbss
 8000d54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d58:	20000314 	.word	0x20000314

08000d5c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <SystemInit+0x10>)
 8000d62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000d66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <HAL_MspInit>:
 */
__weak void HAL_MspInit(void) {
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_MspInit could be implemented in the user file
	 */
}
 8000d74:	4770      	bx	lr
	...

08000d78 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	4604      	mov	r4, r0
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_InitTick+0x40>)
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_InitTick+0x44>)
 8000d8a:	6810      	ldr	r0, [r2, #0]
 8000d8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d90:	f000 f89a 	bl	8000ec8 <HAL_SYSTICK_Config>
 8000d94:	b968      	cbnz	r0, 8000db2 <HAL_InitTick+0x3a>
		return HAL_ERROR;
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000d96:	2c0f      	cmp	r4, #15
 8000d98:	d901      	bls.n	8000d9e <HAL_InitTick+0x26>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
		uwTickPrio = TickPriority;
	} else {
		return HAL_ERROR;
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	e00a      	b.n	8000db4 <HAL_InitTick+0x3c>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4621      	mov	r1, r4
 8000da2:	f04f 30ff 	mov.w	r0, #4294967295
 8000da6:	f000 f859 	bl	8000e5c <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000daa:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_InitTick+0x40>)
 8000dac:	605c      	str	r4, [r3, #4]
	}

	/* Return function status */
	return HAL_OK;
 8000dae:	2000      	movs	r0, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x3c>
		return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
}
 8000db4:	bd10      	pop	{r4, pc}
 8000db6:	bf00      	nop
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <HAL_Init>:
HAL_StatusTypeDef HAL_Init(void) {
 8000dc0:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_Init+0x28>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dca:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dd2:	601a      	str	r2, [r3, #0]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f82f 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>
	HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f7ff ffcc 	bl	8000d78 <HAL_InitTick>
	HAL_MspInit();
 8000de0:	f7ff ffc8 	bl	8000d74 <HAL_MspInit>
}
 8000de4:	2000      	movs	r0, #0
 8000de6:	bd08      	pop	{r3, pc}
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
	uwTick += uwTickFreq;
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_IncTick+0x10>)
 8000dee:	6811      	ldr	r1, [r2, #0]
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_IncTick+0x14>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	440b      	add	r3, r1
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200001c0 	.word	0x200001c0
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
	return uwTick;
 8000e04:	4b01      	ldr	r3, [pc, #4]	; (8000e0c <HAL_GetTick+0x8>)
 8000e06:	6818      	ldr	r0, [r3, #0]
}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200001c0 	.word	0x200001c0

08000e10 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	4604      	mov	r4, r0
	uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff fff6 	bl	8000e04 <HAL_GetTick>
 8000e18:	4605      	mov	r5, r0
	uint32_t wait = Delay;

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000e1a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e1e:	d002      	beq.n	8000e26 <HAL_Delay+0x16>
		wait += (uint32_t) (uwTickFreq);
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <HAL_Delay+0x24>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	441c      	add	r4, r3
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000e26:	f7ff ffed 	bl	8000e04 <HAL_GetTick>
 8000e2a:	1b40      	subs	r0, r0, r5
 8000e2c:	42a0      	cmp	r0, r4
 8000e2e:	d3fa      	bcc.n	8000e26 <HAL_Delay+0x16>
	}
}
 8000e30:	bd38      	pop	{r3, r4, r5, pc}
 8000e32:	bf00      	nop
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4906      	ldr	r1, [pc, #24]	; (8000e54 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000e3a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e40:	041b      	lsls	r3, r3, #16
 8000e42:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	0200      	lsls	r0, r0, #8
 8000e46:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e4c:	4a02      	ldr	r2, [pc, #8]	; (8000e58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e4e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000e50:	60ca      	str	r2, [r1, #12]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00
 8000e58:	05fa0000 	.word	0x05fa0000

08000e5c <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8000e5c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_NVIC_SetPriority+0x60>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e66:	f1c3 0c07 	rsb	ip, r3, #7
 8000e6a:	f1bc 0f04 	cmp.w	ip, #4
 8000e6e:	bf28      	it	cs
 8000e70:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e74:	f103 0e04 	add.w	lr, r3, #4
 8000e78:	f1be 0f06 	cmp.w	lr, #6
 8000e7c:	d914      	bls.n	8000ea8 <HAL_NVIC_SetPriority+0x4c>
 8000e7e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 3eff 	mov.w	lr, #4294967295
 8000e84:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000e88:	ea21 010c 	bic.w	r1, r1, ip
 8000e8c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e92:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e96:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	db07      	blt.n	8000eac <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <HAL_NVIC_SetPriority+0x64>)
 8000ea2:	541a      	strb	r2, [r3, r0]

	prioritygroup = NVIC_GetPriorityGrouping();

	NVIC_SetPriority(IRQn,
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ea4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e7e9      	b.n	8000e80 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	f000 000f 	and.w	r0, r0, #15
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_NVIC_SetPriority+0x68>)
 8000eb6:	541a      	strb	r2, [r3, r0]
 8000eb8:	e7f4      	b.n	8000ea4 <HAL_NVIC_SetPriority+0x48>
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	e000e400 	.word	0xe000e400
 8000ec4:	e000ed14 	.word	0xe000ed14

08000ec8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	3801      	subs	r0, #1
 8000eca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ece:	d20b      	bcs.n	8000ee8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ed4:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <HAL_SYSTICK_Config+0x24>)
 8000ed8:	21f0      	movs	r1, #240	; 0xf0
 8000eda:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ede:	2000      	movs	r0, #0
 8000ee0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ee8:	2001      	movs	r0, #1
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
	return SysTick_Config(TicksNumb);
}
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <HAL_GPIO_Init>:
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	f200 80f4 	bhi.w	80010e0 <HAL_GPIO_Init+0x1f0>
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	e066      	b.n	8000fcc <HAL_GPIO_Init+0xdc>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8000efe:	6885      	ldr	r5, [r0, #8]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f00:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000f04:	2403      	movs	r4, #3
 8000f06:	fa04 f40e 	lsl.w	r4, r4, lr
 8000f0a:	ea25 0504 	bic.w	r5, r5, r4
				temp |= (GPIO_Init->Speed << (position * 2));
 8000f0e:	68cc      	ldr	r4, [r1, #12]
 8000f10:	fa04 f40e 	lsl.w	r4, r4, lr
 8000f14:	432c      	orrs	r4, r5
				GPIOx->OSPEEDR = temp;
 8000f16:	6084      	str	r4, [r0, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8000f18:	6844      	ldr	r4, [r0, #4]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8000f1a:	ea24 0402 	bic.w	r4, r4, r2
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000f1e:	684a      	ldr	r2, [r1, #4]
 8000f20:	f3c2 1200 	ubfx	r2, r2, #4, #1
						<< position);
 8000f24:	409a      	lsls	r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000f26:	4322      	orrs	r2, r4
				GPIOx->OTYPER = temp;
 8000f28:	6042      	str	r2, [r0, #4]
 8000f2a:	e05d      	b.n	8000fe8 <HAL_GPIO_Init+0xf8>
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 8000f2c:	08dc      	lsrs	r4, r3, #3
 8000f2e:	3408      	adds	r4, #8
 8000f30:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 8000f34:	f003 0507 	and.w	r5, r3, #7
 8000f38:	00ad      	lsls	r5, r5, #2
 8000f3a:	f04f 0e0f 	mov.w	lr, #15
 8000f3e:	fa0e fe05 	lsl.w	lr, lr, r5
				temp &= ~((uint32_t) 0xF
 8000f42:	ea22 0e0e 	bic.w	lr, r2, lr
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8000f46:	690a      	ldr	r2, [r1, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 8000f48:	40aa      	lsls	r2, r5
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8000f4a:	ea42 020e 	orr.w	r2, r2, lr
				GPIOx->AFR[position >> 3] = temp;
 8000f4e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000f52:	e05d      	b.n	8001010 <HAL_GPIO_Init+0x120>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2];
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8000f54:	2209      	movs	r2, #9
 8000f56:	e000      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 8000f58:	2200      	movs	r2, #0
						<< (4 * (position & 0x03)));
 8000f5a:	fa02 f20e 	lsl.w	r2, r2, lr
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8000f5e:	432a      	orrs	r2, r5
				SYSCFG->EXTICR[position >> 2] = temp;
 8000f60:	3402      	adds	r4, #2
 8000f62:	4d60      	ldr	r5, [pc, #384]	; (80010e4 <HAL_GPIO_Init+0x1f4>)
 8000f64:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8000f68:	4a5f      	ldr	r2, [pc, #380]	; (80010e8 <HAL_GPIO_Init+0x1f8>)
 8000f6a:	6894      	ldr	r4, [r2, #8]
				temp &= ~((uint32_t) iocurrent);
 8000f6c:	ea6f 020c 	mvn.w	r2, ip
 8000f70:	ea24 050c 	bic.w	r5, r4, ip
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8000f74:	684e      	ldr	r6, [r1, #4]
 8000f76:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000f7a:	d001      	beq.n	8000f80 <HAL_GPIO_Init+0x90>
					temp |= iocurrent;
 8000f7c:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->RTSR = temp;
 8000f80:	4c59      	ldr	r4, [pc, #356]	; (80010e8 <HAL_GPIO_Init+0x1f8>)
 8000f82:	60a5      	str	r5, [r4, #8]

				temp = EXTI->FTSR;
 8000f84:	68e4      	ldr	r4, [r4, #12]
				temp &= ~((uint32_t) iocurrent);
 8000f86:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 8000f8a:	684e      	ldr	r6, [r1, #4]
 8000f8c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000f90:	d001      	beq.n	8000f96 <HAL_GPIO_Init+0xa6>
					temp |= iocurrent;
 8000f92:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->FTSR = temp;
 8000f96:	4c54      	ldr	r4, [pc, #336]	; (80010e8 <HAL_GPIO_Init+0x1f8>)
 8000f98:	60e5      	str	r5, [r4, #12]

				temp = EXTI->EMR;
 8000f9a:	6864      	ldr	r4, [r4, #4]
				temp &= ~((uint32_t) iocurrent);
 8000f9c:	ea02 0504 	and.w	r5, r2, r4
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 8000fa0:	684e      	ldr	r6, [r1, #4]
 8000fa2:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000fa6:	d001      	beq.n	8000fac <HAL_GPIO_Init+0xbc>
					temp |= iocurrent;
 8000fa8:	ea4c 0504 	orr.w	r5, ip, r4
				}
				EXTI->EMR = temp;
 8000fac:	4c4e      	ldr	r4, [pc, #312]	; (80010e8 <HAL_GPIO_Init+0x1f8>)
 8000fae:	6065      	str	r5, [r4, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8000fb0:	6824      	ldr	r4, [r4, #0]
				temp &= ~((uint32_t) iocurrent);
 8000fb2:	4022      	ands	r2, r4
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 8000fb4:	684d      	ldr	r5, [r1, #4]
 8000fb6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8000fba:	d001      	beq.n	8000fc0 <HAL_GPIO_Init+0xd0>
					temp |= iocurrent;
 8000fbc:	ea4c 0204 	orr.w	r2, ip, r4
				}
				EXTI->IMR = temp;
 8000fc0:	4c49      	ldr	r4, [pc, #292]	; (80010e8 <HAL_GPIO_Init+0x1f8>)
 8000fc2:	6022      	str	r2, [r4, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	f200 8088 	bhi.w	80010dc <HAL_GPIO_Init+0x1ec>
		ioposition = ((uint32_t) 0x01) << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	409a      	lsls	r2, r3
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8000fd0:	680c      	ldr	r4, [r1, #0]
 8000fd2:	ea04 0c02 	and.w	ip, r4, r2
		if (iocurrent == ioposition) {
 8000fd6:	ea32 0404 	bics.w	r4, r2, r4
 8000fda:	d1f3      	bne.n	8000fc4 <HAL_GPIO_Init+0xd4>
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8000fdc:	684c      	ldr	r4, [r1, #4]
 8000fde:	f004 0403 	and.w	r4, r4, #3
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 8000fe2:	3c01      	subs	r4, #1
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8000fe4:	2c01      	cmp	r4, #1
 8000fe6:	d98a      	bls.n	8000efe <HAL_GPIO_Init+0xe>
			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8000fe8:	684a      	ldr	r2, [r1, #4]
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	2a03      	cmp	r2, #3
 8000ff0:	d009      	beq.n	8001006 <HAL_GPIO_Init+0x116>
				temp = GPIOx->PUPDR;
 8000ff2:	68c4      	ldr	r4, [r0, #12]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ff4:	005d      	lsls	r5, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	40aa      	lsls	r2, r5
 8000ffa:	ea24 0402 	bic.w	r4, r4, r2
				temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ffe:	688a      	ldr	r2, [r1, #8]
 8001000:	40aa      	lsls	r2, r5
 8001002:	4322      	orrs	r2, r4
				GPIOx->PUPDR = temp;
 8001004:	60c2      	str	r2, [r0, #12]
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8001006:	684a      	ldr	r2, [r1, #4]
 8001008:	f002 0203 	and.w	r2, r2, #3
 800100c:	2a02      	cmp	r2, #2
 800100e:	d08d      	beq.n	8000f2c <HAL_GPIO_Init+0x3c>
			temp = GPIOx->MODER;
 8001010:	6804      	ldr	r4, [r0, #0]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001012:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f20e 	lsl.w	r2, r2, lr
 800101c:	ea24 0402 	bic.w	r4, r4, r2
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001020:	684a      	ldr	r2, [r1, #4]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	fa02 f20e 	lsl.w	r2, r2, lr
 800102a:	4322      	orrs	r2, r4
			GPIOx->MODER = temp;
 800102c:	6002      	str	r2, [r0, #0]
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 800102e:	684a      	ldr	r2, [r1, #4]
 8001030:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001034:	d0c6      	beq.n	8000fc4 <HAL_GPIO_Init+0xd4>
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4a2d      	ldr	r2, [pc, #180]	; (80010ec <HAL_GPIO_Init+0x1fc>)
 8001038:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800103a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800103e:	6454      	str	r4, [r2, #68]	; 0x44
 8001040:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001042:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9a01      	ldr	r2, [sp, #4]
				temp = SYSCFG->EXTICR[position >> 2];
 800104a:	089c      	lsrs	r4, r3, #2
 800104c:	1ca5      	adds	r5, r4, #2
 800104e:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <HAL_GPIO_Init+0x1f4>)
 8001050:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 8001054:	f003 0e03 	and.w	lr, r3, #3
 8001058:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001062:	ea25 0502 	bic.w	r5, r5, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <HAL_GPIO_Init+0x200>)
 8001068:	4290      	cmp	r0, r2
 800106a:	f43f af75 	beq.w	8000f58 <HAL_GPIO_Init+0x68>
 800106e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001072:	4290      	cmp	r0, r2
 8001074:	d022      	beq.n	80010bc <HAL_GPIO_Init+0x1cc>
 8001076:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800107a:	4290      	cmp	r0, r2
 800107c:	d020      	beq.n	80010c0 <HAL_GPIO_Init+0x1d0>
 800107e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001082:	4290      	cmp	r0, r2
 8001084:	d01e      	beq.n	80010c4 <HAL_GPIO_Init+0x1d4>
 8001086:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800108a:	4290      	cmp	r0, r2
 800108c:	d01c      	beq.n	80010c8 <HAL_GPIO_Init+0x1d8>
 800108e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001092:	4290      	cmp	r0, r2
 8001094:	d01a      	beq.n	80010cc <HAL_GPIO_Init+0x1dc>
 8001096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800109a:	4290      	cmp	r0, r2
 800109c:	d018      	beq.n	80010d0 <HAL_GPIO_Init+0x1e0>
 800109e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010a2:	4290      	cmp	r0, r2
 80010a4:	d016      	beq.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010aa:	4290      	cmp	r0, r2
 80010ac:	d014      	beq.n	80010d8 <HAL_GPIO_Init+0x1e8>
 80010ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80010b2:	4290      	cmp	r0, r2
 80010b4:	f43f af4e 	beq.w	8000f54 <HAL_GPIO_Init+0x64>
 80010b8:	220a      	movs	r2, #10
 80010ba:	e74e      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 80010bc:	2201      	movs	r2, #1
 80010be:	e74c      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 80010c0:	2202      	movs	r2, #2
 80010c2:	e74a      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 80010c4:	2203      	movs	r2, #3
 80010c6:	e748      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 80010c8:	2204      	movs	r2, #4
 80010ca:	e746      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 80010cc:	2205      	movs	r2, #5
 80010ce:	e744      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 80010d0:	2206      	movs	r2, #6
 80010d2:	e742      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 80010d4:	2207      	movs	r2, #7
 80010d6:	e740      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
 80010d8:	2208      	movs	r2, #8
 80010da:	e73e      	b.n	8000f5a <HAL_GPIO_Init+0x6a>
			}
		}
	}
}
 80010dc:	b002      	add	sp, #8
 80010de:	bd70      	pop	{r4, r5, r6, pc}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40013800 	.word	0x40013800
 80010e8:	40013c00 	.word	0x40013c00
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000

080010f4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80010f4:	6803      	ldr	r3, [r0, #0]
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	f012 0f02 	tst.w	r2, #2
 80010fc:	d001      	beq.n	8001102 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001102:	6803      	ldr	r3, [r0, #0]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	f012 0f01 	tst.w	r2, #1
 800110a:	d103      	bne.n	8001114 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800110c:	699a      	ldr	r2, [r3, #24]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	619a      	str	r2, [r3, #24]
  }
}
 8001114:	4770      	bx	lr

08001116 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001116:	b410      	push	{r4}
 8001118:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800111a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800111e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001122:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001124:	4321      	orrs	r1, r4
 8001126:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800112a:	6802      	ldr	r2, [r0, #0]
 800112c:	6853      	ldr	r3, [r2, #4]
 800112e:	0d64      	lsrs	r4, r4, #21
 8001130:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001134:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001138:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800113c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001140:	f044 0403 	orr.w	r4, r4, #3
 8001144:	ea23 0304 	bic.w	r3, r3, r4
 8001148:	430b      	orrs	r3, r1
 800114a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800114c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001150:	4770      	bx	lr

08001152 <I2C_IsErrorOccurred>:
{
 8001152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001156:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8001158:	6803      	ldr	r3, [r0, #0]
 800115a:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800115c:	f016 0610 	ands.w	r6, r6, #16
 8001160:	d07e      	beq.n	8001260 <I2C_IsErrorOccurred+0x10e>
 8001162:	460d      	mov	r5, r1
 8001164:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001166:	2210      	movs	r2, #16
 8001168:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800116a:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	6998      	ldr	r0, [r3, #24]
 8001172:	f010 0f20 	tst.w	r0, #32
 8001176:	d132      	bne.n	80011de <I2C_IsErrorOccurred+0x8c>
 8001178:	bb8f      	cbnz	r7, 80011de <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 800117a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800117e:	d0f6      	beq.n	800116e <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001180:	f7ff fe40 	bl	8000e04 <HAL_GetTick>
 8001184:	eba0 0008 	sub.w	r0, r0, r8
 8001188:	42a8      	cmp	r0, r5
 800118a:	d801      	bhi.n	8001190 <I2C_IsErrorOccurred+0x3e>
 800118c:	2d00      	cmp	r5, #0
 800118e:	d1ee      	bne.n	800116e <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001190:	6821      	ldr	r1, [r4, #0]
 8001192:	684a      	ldr	r2, [r1, #4]
 8001194:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8001198:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800119c:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800119e:	6988      	ldr	r0, [r1, #24]
 80011a0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80011a4:	d004      	beq.n	80011b0 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 80011a6:	3b20      	subs	r3, #32
 80011a8:	bf18      	it	ne
 80011aa:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 80011ac:	b902      	cbnz	r2, 80011b0 <I2C_IsErrorOccurred+0x5e>
 80011ae:	b973      	cbnz	r3, 80011ce <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f013 0f20 	tst.w	r3, #32
 80011b8:	d1d9      	bne.n	800116e <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80011ba:	f7ff fe23 	bl	8000e04 <HAL_GetTick>
 80011be:	eba0 0008 	sub.w	r0, r0, r8
 80011c2:	2819      	cmp	r0, #25
 80011c4:	d9f4      	bls.n	80011b0 <I2C_IsErrorOccurred+0x5e>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80011c6:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80011ca:	2701      	movs	r7, #1
              break;
 80011cc:	e7cf      	b.n	800116e <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80011ce:	684b      	ldr	r3, [r1, #4]
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80011d6:	f7ff fe15 	bl	8000e04 <HAL_GetTick>
 80011da:	4680      	mov	r8, r0
 80011dc:	e7e8      	b.n	80011b0 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 80011de:	b90f      	cbnz	r7, 80011e4 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e0:	2220      	movs	r2, #32
 80011e2:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80011e4:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80011e8:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80011ea:	6822      	ldr	r2, [r4, #0]
 80011ec:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80011ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011f2:	d005      	beq.n	8001200 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 80011f4:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80011fe:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001200:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001204:	d006      	beq.n	8001214 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 8001206:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800120a:	6822      	ldr	r2, [r4, #0]
 800120c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001210:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001212:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001214:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001218:	d024      	beq.n	8001264 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 800121a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8001226:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff ff63 	bl	80010f4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800122e:	6822      	ldr	r2, [r4, #0]
 8001230:	6853      	ldr	r3, [r2, #4]
 8001232:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001236:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800123a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001244:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001246:	4333      	orrs	r3, r6
 8001248:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800124a:	2320      	movs	r3, #32
 800124c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001256:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800125a:	4628      	mov	r0, r5
 800125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001260:	2500      	movs	r5, #0
 8001262:	e7c2      	b.n	80011ea <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 8001264:	2d00      	cmp	r5, #0
 8001266:	d0f8      	beq.n	800125a <I2C_IsErrorOccurred+0x108>
 8001268:	e7de      	b.n	8001228 <I2C_IsErrorOccurred+0xd6>

0800126a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800126a:	b570      	push	{r4, r5, r6, lr}
 800126c:	4604      	mov	r4, r0
 800126e:	460d      	mov	r5, r1
 8001270:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f013 0f02 	tst.w	r3, #2
 800127a:	d11d      	bne.n	80012b8 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800127c:	4632      	mov	r2, r6
 800127e:	4629      	mov	r1, r5
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff ff66 	bl	8001152 <I2C_IsErrorOccurred>
 8001286:	b9c8      	cbnz	r0, 80012bc <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001288:	f1b5 3fff 	cmp.w	r5, #4294967295
 800128c:	d0f1      	beq.n	8001272 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800128e:	f7ff fdb9 	bl	8000e04 <HAL_GetTick>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	42a8      	cmp	r0, r5
 8001296:	d801      	bhi.n	800129c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001298:	2d00      	cmp	r5, #0
 800129a:	d1ea      	bne.n	8001272 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800129c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800129e:	f043 0320 	orr.w	r3, r3, #32
 80012a2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012a4:	2320      	movs	r3, #32
 80012a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80012b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80012b4:	2001      	movs	r0, #1
 80012b6:	e000      	b.n	80012ba <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80012b8:	2000      	movs	r0, #0
}
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80012bc:	2001      	movs	r0, #1
 80012be:	e7fc      	b.n	80012ba <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080012c0 <I2C_WaitOnFlagUntilTimeout>:
{
 80012c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c4:	4606      	mov	r6, r0
 80012c6:	4688      	mov	r8, r1
 80012c8:	4617      	mov	r7, r2
 80012ca:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012cc:	6834      	ldr	r4, [r6, #0]
 80012ce:	69a4      	ldr	r4, [r4, #24]
 80012d0:	ea38 0404 	bics.w	r4, r8, r4
 80012d4:	bf0c      	ite	eq
 80012d6:	2401      	moveq	r4, #1
 80012d8:	2400      	movne	r4, #0
 80012da:	42bc      	cmp	r4, r7
 80012dc:	d118      	bne.n	8001310 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80012de:	f1b5 3fff 	cmp.w	r5, #4294967295
 80012e2:	d0f3      	beq.n	80012cc <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012e4:	f7ff fd8e 	bl	8000e04 <HAL_GetTick>
 80012e8:	9b06      	ldr	r3, [sp, #24]
 80012ea:	1ac0      	subs	r0, r0, r3
 80012ec:	42a8      	cmp	r0, r5
 80012ee:	d801      	bhi.n	80012f4 <I2C_WaitOnFlagUntilTimeout+0x34>
 80012f0:	2d00      	cmp	r5, #0
 80012f2:	d1eb      	bne.n	80012cc <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012f4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80012f6:	f043 0320 	orr.w	r3, r3, #32
 80012fa:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012fc:	2320      	movs	r3, #32
 80012fe:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001302:	2300      	movs	r3, #0
 8001304:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001308:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800130c:	2001      	movs	r0, #1
 800130e:	e000      	b.n	8001312 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8001310:	2000      	movs	r0, #0
}
 8001312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001318 <I2C_RequestMemoryWrite>:
{
 8001318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	4604      	mov	r4, r0
 8001320:	4690      	mov	r8, r2
 8001322:	461d      	mov	r5, r3
 8001324:	9e08      	ldr	r6, [sp, #32]
 8001326:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <I2C_RequestMemoryWrite+0x78>)
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001330:	b2ea      	uxtb	r2, r5
 8001332:	f7ff fef0 	bl	8001116 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001336:	463a      	mov	r2, r7
 8001338:	4631      	mov	r1, r6
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff ff95 	bl	800126a <I2C_WaitOnTXISFlagUntilTimeout>
 8001340:	b9f8      	cbnz	r0, 8001382 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001342:	2d01      	cmp	r5, #1
 8001344:	d10e      	bne.n	8001364 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	fa5f f288 	uxtb.w	r2, r8
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800134e:	9700      	str	r7, [sp, #0]
 8001350:	4633      	mov	r3, r6
 8001352:	2200      	movs	r2, #0
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff ffb2 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 800135c:	b9a8      	cbnz	r0, 800138a <I2C_RequestMemoryWrite+0x72>
}
 800135e:	b002      	add	sp, #8
 8001360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800136c:	463a      	mov	r2, r7
 800136e:	4631      	mov	r1, r6
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff ff7a 	bl	800126a <I2C_WaitOnTXISFlagUntilTimeout>
 8001376:	b930      	cbnz	r0, 8001386 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	fa5f f288 	uxtb.w	r2, r8
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
 8001380:	e7e5      	b.n	800134e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8001382:	2001      	movs	r0, #1
 8001384:	e7eb      	b.n	800135e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8001386:	2001      	movs	r0, #1
 8001388:	e7e9      	b.n	800135e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
 800138c:	e7e7      	b.n	800135e <I2C_RequestMemoryWrite+0x46>
 800138e:	bf00      	nop
 8001390:	80002000 	.word	0x80002000

08001394 <I2C_RequestMemoryRead>:
{
 8001394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	4604      	mov	r4, r0
 800139c:	4690      	mov	r8, r2
 800139e:	461d      	mov	r5, r3
 80013a0:	9e08      	ldr	r6, [sp, #32]
 80013a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <I2C_RequestMemoryRead+0x74>)
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	b2ea      	uxtb	r2, r5
 80013ac:	f7ff feb3 	bl	8001116 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b0:	463a      	mov	r2, r7
 80013b2:	4631      	mov	r1, r6
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff ff58 	bl	800126a <I2C_WaitOnTXISFlagUntilTimeout>
 80013ba:	b9f8      	cbnz	r0, 80013fc <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013bc:	2d01      	cmp	r5, #1
 80013be:	d10e      	bne.n	80013de <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	fa5f f288 	uxtb.w	r2, r8
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80013c8:	9700      	str	r7, [sp, #0]
 80013ca:	4633      	mov	r3, r6
 80013cc:	2200      	movs	r2, #0
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff ff75 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 80013d6:	b9a8      	cbnz	r0, 8001404 <I2C_RequestMemoryRead+0x70>
}
 80013d8:	b002      	add	sp, #8
 80013da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013e6:	463a      	mov	r2, r7
 80013e8:	4631      	mov	r1, r6
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff ff3d 	bl	800126a <I2C_WaitOnTXISFlagUntilTimeout>
 80013f0:	b930      	cbnz	r0, 8001400 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	fa5f f288 	uxtb.w	r2, r8
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
 80013fa:	e7e5      	b.n	80013c8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80013fc:	2001      	movs	r0, #1
 80013fe:	e7eb      	b.n	80013d8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001400:	2001      	movs	r0, #1
 8001402:	e7e9      	b.n	80013d8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001404:	2001      	movs	r0, #1
 8001406:	e7e7      	b.n	80013d8 <I2C_RequestMemoryRead+0x44>
 8001408:	80002000 	.word	0x80002000

0800140c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	4605      	mov	r5, r0
 8001410:	460c      	mov	r4, r1
 8001412:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f013 0f20 	tst.w	r3, #32
 800141c:	d11a      	bne.n	8001454 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800141e:	4632      	mov	r2, r6
 8001420:	4621      	mov	r1, r4
 8001422:	4628      	mov	r0, r5
 8001424:	f7ff fe95 	bl	8001152 <I2C_IsErrorOccurred>
 8001428:	b9b0      	cbnz	r0, 8001458 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142a:	f7ff fceb 	bl	8000e04 <HAL_GetTick>
 800142e:	1b80      	subs	r0, r0, r6
 8001430:	42a0      	cmp	r0, r4
 8001432:	d801      	bhi.n	8001438 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001434:	2c00      	cmp	r4, #0
 8001436:	d1ed      	bne.n	8001414 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001438:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800143a:	f043 0320 	orr.w	r3, r3, #32
 800143e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001440:	2320      	movs	r3, #32
 8001442:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001446:	2300      	movs	r3, #0
 8001448:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800144c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
}
 8001452:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001454:	2000      	movs	r0, #0
 8001456:	e7fc      	b.n	8001452 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001458:	2001      	movs	r0, #1
 800145a:	e7fa      	b.n	8001452 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800145c <HAL_I2C_MspInit>:
}
 800145c:	4770      	bx	lr
	...

08001460 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001460:	2800      	cmp	r0, #0
 8001462:	d057      	beq.n	8001514 <HAL_I2C_Init+0xb4>
{
 8001464:	b510      	push	{r4, lr}
 8001466:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001468:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800146c:	2b00      	cmp	r3, #0
 800146e:	d041      	beq.n	80014f4 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001470:	2324      	movs	r3, #36	; 0x24
 8001472:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001476:	6822      	ldr	r2, [r4, #0]
 8001478:	6813      	ldr	r3, [r2, #0]
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001480:	6863      	ldr	r3, [r4, #4]
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001488:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800148a:	6822      	ldr	r2, [r4, #0]
 800148c:	6893      	ldr	r3, [r2, #8]
 800148e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001492:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001494:	68e3      	ldr	r3, [r4, #12]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d031      	beq.n	80014fe <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800149a:	68a3      	ldr	r3, [r4, #8]
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80014a2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014a4:	68e3      	ldr	r3, [r4, #12]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d02f      	beq.n	800150a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014aa:	6822      	ldr	r2, [r4, #0]
 80014ac:	6851      	ldr	r1, [r2, #4]
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_I2C_Init+0xb8>)
 80014b0:	430b      	orrs	r3, r1
 80014b2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014b4:	6822      	ldr	r2, [r4, #0]
 80014b6:	68d3      	ldr	r3, [r2, #12]
 80014b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014bc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014be:	6923      	ldr	r3, [r4, #16]
 80014c0:	6962      	ldr	r2, [r4, #20]
 80014c2:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014c4:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80014cc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ce:	69e3      	ldr	r3, [r4, #28]
 80014d0:	6a21      	ldr	r1, [r4, #32]
 80014d2:	6822      	ldr	r2, [r4, #0]
 80014d4:	430b      	orrs	r3, r1
 80014d6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80014d8:	6822      	ldr	r2, [r4, #0]
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e2:	2000      	movs	r0, #0
 80014e4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	2320      	movs	r3, #32
 80014e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ec:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ee:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80014f2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80014f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80014f8:	f7ff ffb0 	bl	800145c <HAL_I2C_MspInit>
 80014fc:	e7b8      	b.n	8001470 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014fe:	68a3      	ldr	r3, [r4, #8]
 8001500:	6822      	ldr	r2, [r4, #0]
 8001502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001506:	6093      	str	r3, [r2, #8]
 8001508:	e7cc      	b.n	80014a4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	e7ca      	b.n	80014aa <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001514:	2001      	movs	r0, #1
}
 8001516:	4770      	bx	lr
 8001518:	02008000 	.word	0x02008000

0800151c <HAL_I2C_Master_Transmit>:
{
 800151c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	460f      	mov	r7, r1
 8001524:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001526:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800152a:	b2c9      	uxtb	r1, r1
 800152c:	2920      	cmp	r1, #32
 800152e:	f040 80a3 	bne.w	8001678 <HAL_I2C_Master_Transmit+0x15c>
 8001532:	4604      	mov	r4, r0
 8001534:	4690      	mov	r8, r2
 8001536:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8001538:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800153c:	2b01      	cmp	r3, #1
 800153e:	f000 809f 	beq.w	8001680 <HAL_I2C_Master_Transmit+0x164>
 8001542:	f04f 0a01 	mov.w	sl, #1
 8001546:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800154a:	f7ff fc5b 	bl	8000e04 <HAL_GetTick>
 800154e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001550:	9000      	str	r0, [sp, #0]
 8001552:	2319      	movs	r3, #25
 8001554:	4652      	mov	r2, sl
 8001556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff feb0 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 8001560:	2800      	cmp	r0, #0
 8001562:	f040 808f 	bne.w	8001684 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001566:	2321      	movs	r3, #33	; 0x21
 8001568:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800156c:	2310      	movs	r3, #16
 800156e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001572:	2300      	movs	r3, #0
 8001574:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001576:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800157a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800157e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001580:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001582:	b29b      	uxth	r3, r3
 8001584:	2bff      	cmp	r3, #255	; 0xff
 8001586:	d90a      	bls.n	800159e <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001588:	22ff      	movs	r2, #255	; 0xff
 800158a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_I2C_Master_Transmit+0x178>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001594:	4639      	mov	r1, r7
 8001596:	4620      	mov	r0, r4
 8001598:	f7ff fdbd 	bl	8001116 <I2C_TransferConfig>
 800159c:	e018      	b.n	80015d0 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800159e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015a0:	b292      	uxth	r2, r2
 80015a2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015a4:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_I2C_Master_Transmit+0x178>)
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	4639      	mov	r1, r7
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff fdb0 	bl	8001116 <I2C_TransferConfig>
 80015b6:	e00b      	b.n	80015d0 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 80015b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80015ba:	b292      	uxth	r2, r2
 80015bc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	4639      	mov	r1, r7
 80015ca:	4620      	mov	r0, r4
 80015cc:	f7ff fda3 	bl	8001116 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d033      	beq.n	8001640 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d8:	462a      	mov	r2, r5
 80015da:	4631      	mov	r1, r6
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff fe44 	bl	800126a <I2C_WaitOnTXISFlagUntilTimeout>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d150      	bne.n	8001688 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80015ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f0:	3301      	adds	r3, #1
 80015f2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80015f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80015fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001600:	3b01      	subs	r3, #1
 8001602:	b29b      	uxth	r3, r3
 8001604:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001606:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001608:	b292      	uxth	r2, r2
 800160a:	2a00      	cmp	r2, #0
 800160c:	d0e0      	beq.n	80015d0 <HAL_I2C_Master_Transmit+0xb4>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1de      	bne.n	80015d0 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001612:	9500      	str	r5, [sp, #0]
 8001614:	4633      	mov	r3, r6
 8001616:	2200      	movs	r2, #0
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff fe50 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 8001620:	bba0      	cbnz	r0, 800168c <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d9c6      	bls.n	80015b8 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800162e:	2300      	movs	r3, #0
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001636:	4639      	mov	r1, r7
 8001638:	4620      	mov	r0, r4
 800163a:	f7ff fd6c 	bl	8001116 <I2C_TransferConfig>
 800163e:	e7c7      	b.n	80015d0 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001640:	462a      	mov	r2, r5
 8001642:	4631      	mov	r1, r6
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fee1 	bl	800140c <I2C_WaitOnSTOPFlagUntilTimeout>
 800164a:	bb08      	cbnz	r0, 8001690 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	2220      	movs	r2, #32
 8001650:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001652:	6821      	ldr	r1, [r4, #0]
 8001654:	684b      	ldr	r3, [r1, #4]
 8001656:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800165a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800165e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001668:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001672:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001676:	e000      	b.n	800167a <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8001678:	2002      	movs	r0, #2
}
 800167a:	b002      	add	sp, #8
 800167c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8001680:	2002      	movs	r0, #2
 8001682:	e7fa      	b.n	800167a <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8001684:	2001      	movs	r0, #1
 8001686:	e7f8      	b.n	800167a <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8001688:	2001      	movs	r0, #1
 800168a:	e7f6      	b.n	800167a <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 800168c:	2001      	movs	r0, #1
 800168e:	e7f4      	b.n	800167a <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8001690:	2001      	movs	r0, #1
 8001692:	e7f2      	b.n	800167a <HAL_I2C_Master_Transmit+0x15e>
 8001694:	80002000 	.word	0x80002000

08001698 <HAL_I2C_Mem_Write>:
{
 8001698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169c:	b083      	sub	sp, #12
 800169e:	460d      	mov	r5, r1
 80016a0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80016a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80016aa:	b2c9      	uxtb	r1, r1
 80016ac:	2920      	cmp	r1, #32
 80016ae:	f040 80bc 	bne.w	800182a <HAL_I2C_Mem_Write+0x192>
 80016b2:	4604      	mov	r4, r0
 80016b4:	4690      	mov	r8, r2
 80016b6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80016b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80016ba:	f1ba 0f00 	cmp.w	sl, #0
 80016be:	bf18      	it	ne
 80016c0:	2b00      	cmpne	r3, #0
 80016c2:	d016      	beq.n	80016f2 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 80016c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f000 80b2 	beq.w	8001832 <HAL_I2C_Mem_Write+0x19a>
 80016ce:	f04f 0b01 	mov.w	fp, #1
 80016d2:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80016d6:	f7ff fb95 	bl	8000e04 <HAL_GetTick>
 80016da:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016dc:	9000      	str	r0, [sp, #0]
 80016de:	2319      	movs	r3, #25
 80016e0:	465a      	mov	r2, fp
 80016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff fdea 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 80016ec:	b130      	cbz	r0, 80016fc <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 80016ee:	2001      	movs	r0, #1
 80016f0:	e09c      	b.n	800182c <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	e097      	b.n	800182c <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016fc:	2321      	movs	r3, #33	; 0x21
 80016fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001702:	2340      	movs	r3, #64	; 0x40
 8001704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800170c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800170e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001710:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001714:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001716:	9601      	str	r6, [sp, #4]
 8001718:	9700      	str	r7, [sp, #0]
 800171a:	464b      	mov	r3, r9
 800171c:	4642      	mov	r2, r8
 800171e:	4629      	mov	r1, r5
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff fdf9 	bl	8001318 <I2C_RequestMemoryWrite>
 8001726:	b970      	cbnz	r0, 8001746 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001728:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	2bff      	cmp	r3, #255	; 0xff
 800172e:	d90f      	bls.n	8001750 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001730:	22ff      	movs	r2, #255	; 0xff
 8001732:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001734:	2300      	movs	r3, #0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800173c:	4629      	mov	r1, r5
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff fce9 	bl	8001116 <I2C_TransferConfig>
 8001744:	e021      	b.n	800178a <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8001746:	2300      	movs	r3, #0
 8001748:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800174c:	4658      	mov	r0, fp
 800174e:	e06d      	b.n	800182c <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8001750:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001752:	b292      	uxth	r2, r2
 8001754:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	4629      	mov	r1, r5
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff fcd7 	bl	8001116 <I2C_TransferConfig>
 8001768:	e00f      	b.n	800178a <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800176a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800176c:	b292      	uxth	r2, r2
 800176e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001770:	2300      	movs	r3, #0
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	4629      	mov	r1, r5
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff fcca 	bl	8001116 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001782:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d033      	beq.n	80017f2 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800178a:	4632      	mov	r2, r6
 800178c:	4639      	mov	r1, r7
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff fd6b 	bl	800126a <I2C_WaitOnTXISFlagUntilTimeout>
 8001794:	2800      	cmp	r0, #0
 8001796:	d14e      	bne.n	8001836 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001798:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80017a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017a2:	3301      	adds	r3, #1
 80017a4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80017a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80017b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80017ba:	b292      	uxth	r2, r2
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d0e0      	beq.n	8001782 <HAL_I2C_Mem_Write+0xea>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1de      	bne.n	8001782 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017c4:	9600      	str	r6, [sp, #0]
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff fd77 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 80017d2:	bb90      	cbnz	r0, 800183a <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2bff      	cmp	r3, #255	; 0xff
 80017da:	d9c6      	bls.n	800176a <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017dc:	22ff      	movs	r2, #255	; 0xff
 80017de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017e0:	2300      	movs	r3, #0
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e8:	4629      	mov	r1, r5
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff fc93 	bl	8001116 <I2C_TransferConfig>
 80017f0:	e7c7      	b.n	8001782 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f2:	4632      	mov	r2, r6
 80017f4:	4639      	mov	r1, r7
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff fe08 	bl	800140c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017fc:	b9f8      	cbnz	r0, 800183e <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001804:	6821      	ldr	r1, [r4, #0]
 8001806:	684b      	ldr	r3, [r1, #4]
 8001808:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800180c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001810:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800181a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800181e:	2300      	movs	r3, #0
 8001820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001824:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001828:	e000      	b.n	800182c <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800182a:	2002      	movs	r0, #2
}
 800182c:	b003      	add	sp, #12
 800182e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001832:	2002      	movs	r0, #2
 8001834:	e7fa      	b.n	800182c <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8001836:	2001      	movs	r0, #1
 8001838:	e7f8      	b.n	800182c <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800183a:	2001      	movs	r0, #1
 800183c:	e7f6      	b.n	800182c <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
 8001840:	e7f4      	b.n	800182c <HAL_I2C_Mem_Write+0x194>
	...

08001844 <HAL_I2C_Mem_Read>:
{
 8001844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001848:	b083      	sub	sp, #12
 800184a:	460d      	mov	r5, r1
 800184c:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001850:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001852:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001856:	b2c9      	uxtb	r1, r1
 8001858:	2920      	cmp	r1, #32
 800185a:	f040 80bd 	bne.w	80019d8 <HAL_I2C_Mem_Read+0x194>
 800185e:	4604      	mov	r4, r0
 8001860:	4690      	mov	r8, r2
 8001862:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001866:	f1ba 0f00 	cmp.w	sl, #0
 800186a:	bf18      	it	ne
 800186c:	2b00      	cmpne	r3, #0
 800186e:	d016      	beq.n	800189e <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8001870:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001874:	2b01      	cmp	r3, #1
 8001876:	f000 80b3 	beq.w	80019e0 <HAL_I2C_Mem_Read+0x19c>
 800187a:	f04f 0b01 	mov.w	fp, #1
 800187e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001882:	f7ff fabf 	bl	8000e04 <HAL_GetTick>
 8001886:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001888:	9000      	str	r0, [sp, #0]
 800188a:	2319      	movs	r3, #25
 800188c:	465a      	mov	r2, fp
 800188e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001892:	4620      	mov	r0, r4
 8001894:	f7ff fd14 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 8001898:	b130      	cbz	r0, 80018a8 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
 800189c:	e09d      	b.n	80019da <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800189e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a2:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 80018a4:	2001      	movs	r0, #1
 80018a6:	e098      	b.n	80019da <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018a8:	2322      	movs	r3, #34	; 0x22
 80018aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ae:	2340      	movs	r3, #64	; 0x40
 80018b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80018b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018ba:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80018bc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018c0:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018c2:	9601      	str	r6, [sp, #4]
 80018c4:	9700      	str	r7, [sp, #0]
 80018c6:	464b      	mov	r3, r9
 80018c8:	4642      	mov	r2, r8
 80018ca:	4629      	mov	r1, r5
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff fd61 	bl	8001394 <I2C_RequestMemoryRead>
 80018d2:	b970      	cbnz	r0, 80018f2 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d90f      	bls.n	80018fc <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018dc:	22ff      	movs	r2, #255	; 0xff
 80018de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <HAL_I2C_Mem_Read+0x1ac>)
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e8:	4629      	mov	r1, r5
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff fc13 	bl	8001116 <I2C_TransferConfig>
 80018f0:	e021      	b.n	8001936 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80018f8:	4658      	mov	r0, fp
 80018fa:	e06e      	b.n	80019da <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 80018fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80018fe:	b292      	uxth	r2, r2
 8001900:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <HAL_I2C_Mem_Read+0x1ac>)
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	4629      	mov	r1, r5
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff fc01 	bl	8001116 <I2C_TransferConfig>
 8001914:	e00f      	b.n	8001936 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8001916:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001918:	b292      	uxth	r2, r2
 800191a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	4629      	mov	r1, r5
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff fbf4 	bl	8001116 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800192e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d034      	beq.n	80019a0 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001936:	9600      	str	r6, [sp, #0]
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	2104      	movs	r1, #4
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff fcbe 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 8001944:	2800      	cmp	r0, #0
 8001946:	d14d      	bne.n	80019e4 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800194e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001952:	3301      	adds	r3, #1
 8001954:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001956:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001958:	3a01      	subs	r2, #1
 800195a:	b292      	uxth	r2, r2
 800195c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800195e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001960:	b29b      	uxth	r3, r3
 8001962:	3b01      	subs	r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001968:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0de      	beq.n	800192e <HAL_I2C_Mem_Read+0xea>
 8001970:	2a00      	cmp	r2, #0
 8001972:	d1dc      	bne.n	800192e <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001974:	9600      	str	r6, [sp, #0]
 8001976:	463b      	mov	r3, r7
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff fca0 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 8001980:	bb90      	cbnz	r0, 80019e8 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001982:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001984:	b29b      	uxth	r3, r3
 8001986:	2bff      	cmp	r3, #255	; 0xff
 8001988:	d9c5      	bls.n	8001916 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800198a:	22ff      	movs	r2, #255	; 0xff
 800198c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800198e:	2300      	movs	r3, #0
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001996:	4629      	mov	r1, r5
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff fbbc 	bl	8001116 <I2C_TransferConfig>
 800199e:	e7c6      	b.n	800192e <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a0:	4632      	mov	r2, r6
 80019a2:	4639      	mov	r1, r7
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff fd31 	bl	800140c <I2C_WaitOnSTOPFlagUntilTimeout>
 80019aa:	b9f8      	cbnz	r0, 80019ec <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	2220      	movs	r2, #32
 80019b0:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80019b2:	6821      	ldr	r1, [r4, #0]
 80019b4:	684b      	ldr	r3, [r1, #4]
 80019b6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80019ba:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80019be:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80019c8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80019d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 80019d6:	e000      	b.n	80019da <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 80019d8:	2002      	movs	r0, #2
}
 80019da:	b003      	add	sp, #12
 80019dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80019e0:	2002      	movs	r0, #2
 80019e2:	e7fa      	b.n	80019da <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
 80019e6:	e7f8      	b.n	80019da <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
 80019ea:	e7f6      	b.n	80019da <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	e7f4      	b.n	80019da <HAL_I2C_Mem_Read+0x196>
 80019f0:	80002400 	.word	0x80002400

080019f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019f4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	2a20      	cmp	r2, #32
 80019fe:	d123      	bne.n	8001a48 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a00:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001a04:	2a01      	cmp	r2, #1
 8001a06:	d021      	beq.n	8001a4c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0e:	2224      	movs	r2, #36	; 0x24
 8001a10:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a14:	6800      	ldr	r0, [r0, #0]
 8001a16:	6802      	ldr	r2, [r0, #0]
 8001a18:	f022 0201 	bic.w	r2, r2, #1
 8001a1c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	6802      	ldr	r2, [r0, #0]
 8001a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a26:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	6802      	ldr	r2, [r0, #0]
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	680a      	ldr	r2, [r1, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8001a46:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001a48:	2002      	movs	r0, #2
 8001a4a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001a4c:	2002      	movs	r0, #2
  }
}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a50:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a52:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	2a20      	cmp	r2, #32
 8001a5a:	d121      	bne.n	8001aa0 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001a60:	2a01      	cmp	r2, #1
 8001a62:	d01f      	beq.n	8001aa4 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001a64:	2201      	movs	r2, #1
 8001a66:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6a:	2224      	movs	r2, #36	; 0x24
 8001a6c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a70:	6800      	ldr	r0, [r0, #0]
 8001a72:	6802      	ldr	r2, [r0, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a7e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a86:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	680a      	ldr	r2, [r1, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8001a9e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001aa4:	2002      	movs	r0, #2
  }
}
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_PWREx_EnableOverDrive>:
 *         critical tasks and when the system clock source is either HSI or HSE. 
 *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
 *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void) {
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	b082      	sub	sp, #8
	uint32_t tickstart = 0;

	__HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_PWREx_EnableOverDrive+0x74>)
 8001aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	9b01      	ldr	r3, [sp, #4]

	/* Enable the Over-drive to extend the clock frequency to 216 MHz */
	__HAL_PWR_OVERDRIVE_ENABLE();
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_PWREx_EnableOverDrive+0x78>)
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]

	/* Get tick */
	tickstart = HAL_GetTick();
 8001aca:	f7ff f99b 	bl	8000e04 <HAL_GetTick>
 8001ace:	4604      	mov	r4, r0

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY)) {
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_PWREx_EnableOverDrive+0x78>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ad8:	d108      	bne.n	8001aec <HAL_PWREx_EnableOverDrive+0x44>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8001ada:	f7ff f993 	bl	8000e04 <HAL_GetTick>
 8001ade:	1b00      	subs	r0, r0, r4
 8001ae0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ae4:	d9f4      	bls.n	8001ad0 <HAL_PWREx_EnableOverDrive+0x28>
			return HAL_TIMEOUT;
 8001ae6:	2003      	movs	r0, #3
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
			return HAL_TIMEOUT;
		}
	}
	return HAL_OK;
}
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd10      	pop	{r4, pc}
	__HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <HAL_PWREx_EnableOverDrive+0x78>)
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	6013      	str	r3, [r2, #0]
	tickstart = HAL_GetTick();
 8001af6:	f7ff f985 	bl	8000e04 <HAL_GetTick>
 8001afa:	4604      	mov	r4, r0
	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY)) {
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_PWREx_EnableOverDrive+0x78>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b04:	d107      	bne.n	8001b16 <HAL_PWREx_EnableOverDrive+0x6e>
		if ((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE) {
 8001b06:	f7ff f97d 	bl	8000e04 <HAL_GetTick>
 8001b0a:	1b00      	subs	r0, r0, r4
 8001b0c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b10:	d9f4      	bls.n	8001afc <HAL_PWREx_EnableOverDrive+0x54>
			return HAL_TIMEOUT;
 8001b12:	2003      	movs	r0, #3
 8001b14:	e7e8      	b.n	8001ae8 <HAL_PWREx_EnableOverDrive+0x40>
	return HAL_OK;
 8001b16:	2000      	movs	r0, #0
 8001b18:	e7e6      	b.n	8001ae8 <HAL_PWREx_EnableOverDrive+0x40>
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40007000 	.word	0x40007000

08001b24 <HAL_RCC_OscConfig>:
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8001b24:	2800      	cmp	r0, #0
 8001b26:	f000 8206 	beq.w	8001f36 <HAL_RCC_OscConfig+0x412>
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001b2a:	b570      	push	{r4, r5, r6, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	4604      	mov	r4, r0

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001b30:	6803      	ldr	r3, [r0, #0]
 8001b32:	f013 0f01 	tst.w	r3, #1
 8001b36:	d029      	beq.n	8001b8c <HAL_RCC_OscConfig+0x68>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b38:	4b95      	ldr	r3, [pc, #596]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d01a      	beq.n	8001b7a <HAL_RCC_OscConfig+0x56>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b44:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d00f      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
				return HAL_ERROR;
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	6863      	ldr	r3, [r4, #4]
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b56:	d040      	beq.n	8001bda <HAL_RCC_OscConfig+0xb6>
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d154      	bne.n	8001c06 <HAL_RCC_OscConfig+0xe2>
 8001b5c:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e039      	b.n	8001be4 <HAL_RCC_OscConfig+0xc0>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001b70:	4b87      	ldr	r3, [pc, #540]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b78:	d0ea      	beq.n	8001b50 <HAL_RCC_OscConfig+0x2c>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b85      	ldr	r3, [pc, #532]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b82:	d003      	beq.n	8001b8c <HAL_RCC_OscConfig+0x68>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8001b84:	6863      	ldr	r3, [r4, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 81d7 	beq.w	8001f3a <HAL_RCC_OscConfig+0x416>
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	f013 0f02 	tst.w	r3, #2
 8001b92:	d074      	beq.n	8001c7e <HAL_RCC_OscConfig+0x15a>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b94:	4b7e      	ldr	r3, [pc, #504]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f013 0f0c 	tst.w	r3, #12
 8001b9c:	d05e      	beq.n	8001c5c <HAL_RCC_OscConfig+0x138>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b9e:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d053      	beq.n	8001c52 <HAL_RCC_OscConfig+0x12e>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8001baa:	68e3      	ldr	r3, [r4, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8089 	beq.w	8001cc4 <HAL_RCC_OscConfig+0x1a0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8001bb2:	4a77      	ldr	r2, [pc, #476]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001bbc:	f7ff f922 	bl	8000e04 <HAL_GetTick>
 8001bc0:	4605      	mov	r5, r0

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001bc2:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f013 0f02 	tst.w	r3, #2
 8001bca:	d172      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x18e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001bcc:	f7ff f91a 	bl	8000e04 <HAL_GetTick>
 8001bd0:	1b40      	subs	r0, r0, r5
 8001bd2:	2802      	cmp	r0, #2
 8001bd4:	d9f5      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x9e>
						return HAL_TIMEOUT;
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	e1b4      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	4a6d      	ldr	r2, [pc, #436]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	6813      	ldr	r3, [r2, #0]
 8001bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8001be4:	6863      	ldr	r3, [r4, #4]
 8001be6:	b32b      	cbz	r3, 8001c34 <HAL_RCC_OscConfig+0x110>
				tickstart = HAL_GetTick();
 8001be8:	f7ff f90c 	bl	8000e04 <HAL_GetTick>
 8001bec:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001bee:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bf6:	d1c9      	bne.n	8001b8c <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001bf8:	f7ff f904 	bl	8000e04 <HAL_GetTick>
 8001bfc:	1b40      	subs	r0, r0, r5
 8001bfe:	2864      	cmp	r0, #100	; 0x64
 8001c00:	d9f5      	bls.n	8001bee <HAL_RCC_OscConfig+0xca>
						return HAL_TIMEOUT;
 8001c02:	2003      	movs	r0, #3
 8001c04:	e19e      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCC_OscConfig+0xfc>
 8001c0c:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e7e1      	b.n	8001be4 <HAL_RCC_OscConfig+0xc0>
 8001c20:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e7d7      	b.n	8001be4 <HAL_RCC_OscConfig+0xc0>
				tickstart = HAL_GetTick();
 8001c34:	f7ff f8e6 	bl	8000e04 <HAL_GetTick>
 8001c38:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001c3a:	4b55      	ldr	r3, [pc, #340]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c42:	d0a3      	beq.n	8001b8c <HAL_RCC_OscConfig+0x68>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001c44:	f7ff f8de 	bl	8000e04 <HAL_GetTick>
 8001c48:	1b40      	subs	r0, r0, r5
 8001c4a:	2864      	cmp	r0, #100	; 0x64
 8001c4c:	d9f5      	bls.n	8001c3a <HAL_RCC_OscConfig+0x116>
						return HAL_TIMEOUT;
 8001c4e:	2003      	movs	r0, #3
 8001c50:	e178      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001c52:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c5a:	d1a6      	bne.n	8001baa <HAL_RCC_OscConfig+0x86>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f013 0f02 	tst.w	r3, #2
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_OscConfig+0x14a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8001c66:	68e3      	ldr	r3, [r4, #12]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	f040 8168 	bne.w	8001f3e <HAL_RCC_OscConfig+0x41a>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001c6e:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c76:	6921      	ldr	r1, [r4, #16]
 8001c78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c7c:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	f013 0f08 	tst.w	r3, #8
 8001c84:	d046      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1f0>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8001c86:	6963      	ldr	r3, [r4, #20]
 8001c88:	b383      	cbz	r3, 8001cec <HAL_RCC_OscConfig+0x1c8>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8001c8a:	4a41      	ldr	r2, [pc, #260]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001c94:	f7ff f8b6 	bl	8000e04 <HAL_GetTick>
 8001c98:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9e:	f013 0f02 	tst.w	r3, #2
 8001ca2:	d137      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001ca4:	f7ff f8ae 	bl	8000e04 <HAL_GetTick>
 8001ca8:	1b40      	subs	r0, r0, r5
 8001caa:	2802      	cmp	r0, #2
 8001cac:	d9f5      	bls.n	8001c9a <HAL_RCC_OscConfig+0x176>
					return HAL_TIMEOUT;
 8001cae:	2003      	movs	r0, #3
 8001cb0:	e148      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001cb2:	4a37      	ldr	r2, [pc, #220]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	6813      	ldr	r3, [r2, #0]
 8001cb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cba:	6921      	ldr	r1, [r4, #16]
 8001cbc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e7dc      	b.n	8001c7e <HAL_RCC_OscConfig+0x15a>
				__HAL_RCC_HSI_DISABLE();
 8001cc4:	4a32      	ldr	r2, [pc, #200]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8001cce:	f7ff f899 	bl	8000e04 <HAL_GetTick>
 8001cd2:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f013 0f02 	tst.w	r3, #2
 8001cdc:	d0cf      	beq.n	8001c7e <HAL_RCC_OscConfig+0x15a>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001cde:	f7ff f891 	bl	8000e04 <HAL_GetTick>
 8001ce2:	1b40      	subs	r0, r0, r5
 8001ce4:	2802      	cmp	r0, #2
 8001ce6:	d9f5      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x1b0>
						return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	e12b      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8001cec:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001cf6:	f7ff f885 	bl	8000e04 <HAL_GetTick>
 8001cfa:	4605      	mov	r5, r0

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d00:	f013 0f02 	tst.w	r3, #2
 8001d04:	d006      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1f0>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001d06:	f7ff f87d 	bl	8000e04 <HAL_GetTick>
 8001d0a:	1b40      	subs	r0, r0, r5
 8001d0c:	2802      	cmp	r0, #2
 8001d0e:	d9f5      	bls.n	8001cfc <HAL_RCC_OscConfig+0x1d8>
					return HAL_TIMEOUT;
 8001d10:	2003      	movs	r0, #3
 8001d12:	e117      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	f013 0f04 	tst.w	r3, #4
 8001d1a:	d07d      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2f4>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d24:	d11e      	bne.n	8001d64 <HAL_RCC_OscConfig+0x240>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	9b01      	ldr	r3, [sp, #4]
			pwrclkchanged = SET;
 8001d3a:	2501      	movs	r5, #1
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d44:	d010      	beq.n	8001d68 <HAL_RCC_OscConfig+0x244>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d46:	68a3      	ldr	r3, [r4, #8]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d025      	beq.n	8001d98 <HAL_RCC_OscConfig+0x274>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13b      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2a4>
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	671a      	str	r2, [r3, #112]	; 0x70
 8001d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d5c:	f022 0204 	bic.w	r2, r2, #4
 8001d60:	671a      	str	r2, [r3, #112]	; 0x70
 8001d62:	e01e      	b.n	8001da2 <HAL_RCC_OscConfig+0x27e>
	FlagStatus pwrclkchanged = RESET;
 8001d64:	2500      	movs	r5, #0
 8001d66:	e7e9      	b.n	8001d3c <HAL_RCC_OscConfig+0x218>
			PWR->CR1 |= PWR_CR1_DBP;
 8001d68:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]
			tickstart = HAL_GetTick();
 8001d72:	f7ff f847 	bl	8000e04 <HAL_GetTick>
 8001d76:	4606      	mov	r6, r0
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d80:	d1e1      	bne.n	8001d46 <HAL_RCC_OscConfig+0x222>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8001d82:	f7ff f83f 	bl	8000e04 <HAL_GetTick>
 8001d86:	1b80      	subs	r0, r0, r6
 8001d88:	2864      	cmp	r0, #100	; 0x64
 8001d8a:	d9f5      	bls.n	8001d78 <HAL_RCC_OscConfig+0x254>
					return HAL_TIMEOUT;
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	e0d9      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	4a72      	ldr	r2, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001d9a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8001da2:	68a3      	ldr	r3, [r4, #8]
 8001da4:	b333      	cbz	r3, 8001df4 <HAL_RCC_OscConfig+0x2d0>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001da6:	f7ff f82d 	bl	8000e04 <HAL_GetTick>
 8001daa:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8001dac:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	f013 0f02 	tst.w	r3, #2
 8001db4:	d12f      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001db6:	f7ff f825 	bl	8000e04 <HAL_GetTick>
 8001dba:	1b80      	subs	r0, r0, r6
 8001dbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dc0:	4298      	cmp	r0, r3
 8001dc2:	d9f3      	bls.n	8001dac <HAL_RCC_OscConfig+0x288>
					return HAL_TIMEOUT;
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	e0bd      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d009      	beq.n	8001de0 <HAL_RCC_OscConfig+0x2bc>
 8001dcc:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	671a      	str	r2, [r3, #112]	; 0x70
 8001dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dd8:	f022 0204 	bic.w	r2, r2, #4
 8001ddc:	671a      	str	r2, [r3, #112]	; 0x70
 8001dde:	e7e0      	b.n	8001da2 <HAL_RCC_OscConfig+0x27e>
 8001de0:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001de4:	f042 0204 	orr.w	r2, r2, #4
 8001de8:	671a      	str	r2, [r3, #112]	; 0x70
 8001dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	671a      	str	r2, [r3, #112]	; 0x70
 8001df2:	e7d6      	b.n	8001da2 <HAL_RCC_OscConfig+0x27e>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001df4:	f7ff f806 	bl	8000e04 <HAL_GetTick>
 8001df8:	4606      	mov	r6, r0

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	f013 0f02 	tst.w	r3, #2
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2f2>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001e04:	f7fe fffe 	bl	8000e04 <HAL_GetTick>
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	d9f3      	bls.n	8001dfa <HAL_RCC_OscConfig+0x2d6>
					return HAL_TIMEOUT;
 8001e12:	2003      	movs	r0, #3
 8001e14:	e096      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8001e16:	b9fd      	cbnz	r5, 8001e58 <HAL_RCC_OscConfig+0x334>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8001e18:	69a3      	ldr	r3, [r4, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8091 	beq.w	8001f42 <HAL_RCC_OscConfig+0x41e>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8001e20:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001e22:	6892      	ldr	r2, [r2, #8]
 8001e24:	f002 020c 	and.w	r2, r2, #12
 8001e28:	2a08      	cmp	r2, #8
 8001e2a:	d059      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x3bc>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d019      	beq.n	8001e64 <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001e32:	6813      	ldr	r3, [r2, #0]
 8001e34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e38:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001e3a:	f7fe ffe3 	bl	8000e04 <HAL_GetTick>
 8001e3e:	4604      	mov	r4, r0

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001e40:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e48:	d048      	beq.n	8001edc <HAL_RCC_OscConfig+0x3b8>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001e4a:	f7fe ffdb 	bl	8000e04 <HAL_GetTick>
 8001e4e:	1b00      	subs	r0, r0, r4
 8001e50:	2802      	cmp	r0, #2
 8001e52:	d9f5      	bls.n	8001e40 <HAL_RCC_OscConfig+0x31c>
						return HAL_TIMEOUT;
 8001e54:	2003      	movs	r0, #3
 8001e56:	e075      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
			__HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001e5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	e7d9      	b.n	8001e18 <HAL_RCC_OscConfig+0x2f4>
				__HAL_RCC_PLL_DISABLE();
 8001e64:	4a3f      	ldr	r2, [pc, #252]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8001e6e:	f7fe ffc9 	bl	8000e04 <HAL_GetTick>
 8001e72:	4605      	mov	r5, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e7c:	d006      	beq.n	8001e8c <HAL_RCC_OscConfig+0x368>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001e7e:	f7fe ffc1 	bl	8000e04 <HAL_GetTick>
 8001e82:	1b40      	subs	r0, r0, r5
 8001e84:	2802      	cmp	r0, #2
 8001e86:	d9f5      	bls.n	8001e74 <HAL_RCC_OscConfig+0x350>
						return HAL_TIMEOUT;
 8001e88:	2003      	movs	r0, #3
 8001e8a:	e05b      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8c:	69e3      	ldr	r3, [r4, #28]
 8001e8e:	6a22      	ldr	r2, [r4, #32]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e94:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e9a:	0852      	lsrs	r2, r2, #1
 8001e9c:	3a01      	subs	r2, #1
 8001e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ea2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ea4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ea8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001eaa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001eae:	4a2d      	ldr	r2, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001eb0:	6053      	str	r3, [r2, #4]
				__HAL_RCC_PLL_ENABLE();
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	6013      	str	r3, [r2, #0]
				tickstart = HAL_GetTick();
 8001eba:	f7fe ffa3 	bl	8000e04 <HAL_GetTick>
 8001ebe:	4604      	mov	r4, r0
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x3b4>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001eca:	f7fe ff9b 	bl	8000e04 <HAL_GetTick>
 8001ece:	1b00      	subs	r0, r0, r4
 8001ed0:	2802      	cmp	r0, #2
 8001ed2:	d9f5      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x39c>
						return HAL_TIMEOUT;
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	e035      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
					{
				return HAL_ERROR;
			}
		}
	}
	return HAL_OK;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e033      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001edc:	2000      	movs	r0, #0
 8001ede:	e031      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
			pll_config = RCC->PLLCFGR;
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <HAL_RCC_OscConfig+0x440>)
 8001ee2:	6852      	ldr	r2, [r2, #4]
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d02f      	beq.n	8001f48 <HAL_RCC_OscConfig+0x424>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8001ee8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 8001eec:	69e1      	ldr	r1, [r4, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8001eee:	428b      	cmp	r3, r1
 8001ef0:	d12c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x428>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8001ef2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 8001ef6:	6a21      	ldr	r1, [r4, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8001ef8:	428b      	cmp	r3, r1
 8001efa:	d129      	bne.n	8001f50 <HAL_RCC_OscConfig+0x42c>
							!= (RCC_OscInitStruct->PLL.PLLN
 8001efc:	6a61      	ldr	r1, [r4, #36]	; 0x24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8001efe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f02:	4013      	ands	r3, r2
 8001f04:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8001f08:	d124      	bne.n	8001f54 <HAL_RCC_OscConfig+0x430>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8001f0a:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 8001f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8001f14:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8001f18:	d11e      	bne.n	8001f58 <HAL_RCC_OscConfig+0x434>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8001f1a:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 8001f1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8001f20:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8001f24:	d11a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x438>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8001f26:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 8001f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 8001f2c:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x43c>
	return HAL_OK;
 8001f32:	2000      	movs	r0, #0
 8001f34:	e006      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
		return HAL_ERROR;
 8001f36:	2001      	movs	r0, #1
}
 8001f38:	4770      	bx	lr
				return HAL_ERROR;
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	e002      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
				return HAL_ERROR;
 8001f3e:	2001      	movs	r0, #1
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
	return HAL_OK;
 8001f42:	2000      	movs	r0, #0
}
 8001f44:	b002      	add	sp, #8
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
				return HAL_ERROR;
 8001f48:	2001      	movs	r0, #1
 8001f4a:	e7fb      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	e7f9      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001f50:	2001      	movs	r0, #1
 8001f52:	e7f7      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001f54:	2001      	movs	r0, #1
 8001f56:	e7f5      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001f58:	2001      	movs	r0, #1
 8001f5a:	e7f3      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	e7f1      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001f60:	2001      	movs	r0, #1
 8001f62:	e7ef      	b.n	8001f44 <HAL_RCC_OscConfig+0x420>
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8001f68:	b508      	push	{r3, lr}
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
	uint32_t sysclockfreq = 0;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d041      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x92>
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d141      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0x96>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f88:	d012      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x48>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f92:	481d      	ldr	r0, [pc, #116]	; (8002008 <HAL_RCC_GetSysClockFreq+0xa0>)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001f94:	2300      	movs	r3, #0
 8001f96:	fba1 0100 	umull	r0, r1, r1, r0
 8001f9a:	f7fe f9a1 	bl	80002e0 <__aeabi_uldivmod>
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f3c3 4301 	ubfx	r3, r3, #16, #2
						+ 1) * 2);
 8001fa6:	3301      	adds	r3, #1
		pllp =
 8001fa8:	005b      	lsls	r3, r3, #1

		sysclockfreq = pllvco / pllp;
 8001faa:	fbb0 f0f3 	udiv	r0, r0, r3
		break;
 8001fae:	e027      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x98>
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fb2:	6858      	ldr	r0, [r3, #4]
 8001fb4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001fb8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001fbc:	ebbc 0c00 	subs.w	ip, ip, r0
 8001fc0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001fc4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001fc8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001fcc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001fd0:	ebb1 010c 	subs.w	r1, r1, ip
 8001fd4:	eb63 030e 	sbc.w	r3, r3, lr
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fde:	00c9      	lsls	r1, r1, #3
 8001fe0:	eb11 0c00 	adds.w	ip, r1, r0
 8001fe4:	f143 0300 	adc.w	r3, r3, #0
 8001fe8:	0299      	lsls	r1, r3, #10
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001fea:	2300      	movs	r3, #0
 8001fec:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001ff0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001ff4:	f7fe f974 	bl	80002e0 <__aeabi_uldivmod>
 8001ff8:	e7d1      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x36>
		sysclockfreq = HSE_VALUE;
 8001ffa:	4803      	ldr	r0, [pc, #12]	; (8002008 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x98>
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001ffe:	4803      	ldr	r0, [pc, #12]	; (800200c <HAL_RCC_GetSysClockFreq+0xa4>)
		sysclockfreq = HSI_VALUE;
		break;
	}
	}
	return sysclockfreq;
}
 8002000:	bd08      	pop	{r3, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	017d7840 	.word	0x017d7840
 800200c:	00f42400 	.word	0x00f42400

08002010 <HAL_RCC_ClockConfig>:
	if (RCC_ClkInitStruct == NULL) {
 8002010:	2800      	cmp	r0, #0
 8002012:	f000 80a0 	beq.w	8002156 <HAL_RCC_ClockConfig+0x146>
		uint32_t FLatency) {
 8002016:	b570      	push	{r4, r5, r6, lr}
 8002018:	460d      	mov	r5, r1
 800201a:	4604      	mov	r4, r0
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 800201c:	4b52      	ldr	r3, [pc, #328]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	428b      	cmp	r3, r1
 8002026:	d20b      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x30>
		__HAL_FLASH_SET_LATENCY(FLatency);
 8002028:	4a4f      	ldr	r2, [pc, #316]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	f023 030f 	bic.w	r3, r3, #15
 8002030:	430b      	orrs	r3, r1
 8002032:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8002034:	6813      	ldr	r3, [r2, #0]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	428b      	cmp	r3, r1
 800203c:	f040 808d 	bne.w	800215a <HAL_RCC_ClockConfig+0x14a>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	f013 0f02 	tst.w	r3, #2
 8002046:	d017      	beq.n	8002078 <HAL_RCC_ClockConfig+0x68>
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8002048:	f013 0f04 	tst.w	r3, #4
 800204c:	d004      	beq.n	8002058 <HAL_RCC_ClockConfig+0x48>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800204e:	4a47      	ldr	r2, [pc, #284]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 8002050:	6893      	ldr	r3, [r2, #8]
 8002052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002056:	6093      	str	r3, [r2, #8]
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	f013 0f08 	tst.w	r3, #8
 800205e:	d004      	beq.n	800206a <HAL_RCC_ClockConfig+0x5a>
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4a42      	ldr	r2, [pc, #264]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 8002062:	6893      	ldr	r3, [r2, #8]
 8002064:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002068:	6093      	str	r3, [r2, #8]
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206a:	4a40      	ldr	r2, [pc, #256]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 800206c:	6893      	ldr	r3, [r2, #8]
 800206e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002072:	68a1      	ldr	r1, [r4, #8]
 8002074:	430b      	orrs	r3, r1
 8002076:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	f013 0f01 	tst.w	r3, #1
 800207e:	d031      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xd4>
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d020      	beq.n	80020c8 <HAL_RCC_ClockConfig+0xb8>
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8002086:	2b02      	cmp	r3, #2
 8002088:	d025      	beq.n	80020d6 <HAL_RCC_ClockConfig+0xc6>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800208a:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f012 0f02 	tst.w	r2, #2
 8002092:	d064      	beq.n	800215e <HAL_RCC_ClockConfig+0x14e>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002094:	4935      	ldr	r1, [pc, #212]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 8002096:	688a      	ldr	r2, [r1, #8]
 8002098:	f022 0203 	bic.w	r2, r2, #3
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
		tickstart = HAL_GetTick();
 80020a0:	f7fe feb0 	bl	8000e04 <HAL_GetTick>
 80020a4:	4606      	mov	r6, r0
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80020ae:	6862      	ldr	r2, [r4, #4]
 80020b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020b4:	d016      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xd4>
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80020b6:	f7fe fea5 	bl	8000e04 <HAL_GetTick>
 80020ba:	1b80      	subs	r0, r0, r6
 80020bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c0:	4298      	cmp	r0, r3
 80020c2:	d9f0      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x96>
				return HAL_TIMEOUT;
 80020c4:	2003      	movs	r0, #3
 80020c6:	e045      	b.n	8002154 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80020d0:	d1e0      	bne.n	8002094 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 80020d2:	2001      	movs	r0, #1
 80020d4:	e03e      	b.n	8002154 <HAL_RCC_ClockConfig+0x144>
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80020d6:	4a25      	ldr	r2, [pc, #148]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80020de:	d1d9      	bne.n	8002094 <HAL_RCC_ClockConfig+0x84>
				return HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e037      	b.n	8002154 <HAL_RCC_ClockConfig+0x144>
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	42ab      	cmp	r3, r5
 80020ee:	d90a      	bls.n	8002106 <HAL_RCC_ClockConfig+0xf6>
		__HAL_FLASH_SET_LATENCY(FLatency);
 80020f0:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_RCC_ClockConfig+0x158>)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	f023 030f 	bic.w	r3, r3, #15
 80020f8:	432b      	orrs	r3, r5
 80020fa:	6013      	str	r3, [r2, #0]
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80020fc:	6813      	ldr	r3, [r2, #0]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	42ab      	cmp	r3, r5
 8002104:	d12d      	bne.n	8002162 <HAL_RCC_ClockConfig+0x152>
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f013 0f04 	tst.w	r3, #4
 800210c:	d006      	beq.n	800211c <HAL_RCC_ClockConfig+0x10c>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 800210e:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 8002110:	6893      	ldr	r3, [r2, #8]
 8002112:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002116:	68e1      	ldr	r1, [r4, #12]
 8002118:	430b      	orrs	r3, r1
 800211a:	6093      	str	r3, [r2, #8]
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	f013 0f08 	tst.w	r3, #8
 8002122:	d007      	beq.n	8002134 <HAL_RCC_ClockConfig+0x124>
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 8002126:	6893      	ldr	r3, [r2, #8]
 8002128:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800212c:	6921      	ldr	r1, [r4, #16]
 800212e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002132:	6093      	str	r3, [r2, #8]
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8002134:	f7ff ff18 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCC_ClockConfig+0x15c>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002140:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_RCC_ClockConfig+0x160>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	40d8      	lsrs	r0, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_ClockConfig+0x164>)
 8002148:	6018      	str	r0, [r3, #0]
	HAL_InitTick(uwTickPrio);
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x168>)
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	f7fe fe13 	bl	8000d78 <HAL_InitTick>
	return HAL_OK;
 8002152:	2000      	movs	r0, #0
}
 8002154:	bd70      	pop	{r4, r5, r6, pc}
		return HAL_ERROR;
 8002156:	2001      	movs	r0, #1
}
 8002158:	4770      	bx	lr
			return HAL_ERROR;
 800215a:	2001      	movs	r0, #1
 800215c:	e7fa      	b.n	8002154 <HAL_RCC_ClockConfig+0x144>
				return HAL_ERROR;
 800215e:	2001      	movs	r0, #1
 8002160:	e7f8      	b.n	8002154 <HAL_RCC_ClockConfig+0x144>
			return HAL_ERROR;
 8002162:	2001      	movs	r0, #1
 8002164:	e7f6      	b.n	8002154 <HAL_RCC_ClockConfig+0x144>
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	0800394c 	.word	0x0800394c
 8002174:	20000000 	.word	0x20000000
 8002178:	20000008 	.word	0x20000008

0800217c <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
	return SystemCoreClock;
}
 800217c:	4b01      	ldr	r3, [pc, #4]	; (8002184 <HAL_RCC_GetHCLKFreq+0x8>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000000 	.word	0x20000000

08002188 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8002188:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 800218a:	f7ff fff7 	bl	800217c <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002196:	4a03      	ldr	r2, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
}
 800219a:	40d8      	lsrs	r0, r3
 800219c:	bd08      	pop	{r3, pc}
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	0800395c 	.word	0x0800395c

080021a8 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 80021a8:	b508      	push	{r3, lr}
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 80021aa:	f7ff ffe7 	bl	800217c <HAL_RCC_GetHCLKFreq>
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80021b6:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80021b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80021ba:	40d8      	lsrs	r0, r3
 80021bc:	bd08      	pop	{r3, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	0800395c 	.word	0x0800395c

080021c8 <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 80021c8:	b510      	push	{r4, lr}
 80021ca:	4604      	mov	r4, r0
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80021cc:	6883      	ldr	r3, [r0, #8]
 80021ce:	6902      	ldr	r2, [r0, #16]
 80021d0:	4313      	orrs	r3, r2
			| huart->Init.Mode | huart->Init.OverSampling;
 80021d2:	6942      	ldr	r2, [r0, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	69c2      	ldr	r2, [r0, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 80021d8:	4313      	orrs	r3, r2
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021da:	6801      	ldr	r1, [r0, #0]
 80021dc:	6808      	ldr	r0, [r1, #0]
 80021de:	4a93      	ldr	r2, [pc, #588]	; (800242c <UART_SetConfig+0x264>)
 80021e0:	4002      	ands	r2, r0
 80021e2:	431a      	orrs	r2, r3
 80021e4:	600a      	str	r2, [r1, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	6853      	ldr	r3, [r2, #4]
 80021ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021ee:	68e1      	ldr	r1, [r4, #12]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6053      	str	r3, [r2, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 80021f4:	69a2      	ldr	r2, [r4, #24]

	tmpreg |= huart->Init.OneBitSampling;
 80021f6:	6a23      	ldr	r3, [r4, #32]
 80021f8:	431a      	orrs	r2, r3
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021fa:	6821      	ldr	r1, [r4, #0]
 80021fc:	688b      	ldr	r3, [r1, #8]
 80021fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	4a89      	ldr	r2, [pc, #548]	; (8002430 <UART_SetConfig+0x268>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <UART_SetConfig+0x7a>
 800220e:	4a89      	ldr	r2, [pc, #548]	; (8002434 <UART_SetConfig+0x26c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d029      	beq.n	8002268 <UART_SetConfig+0xa0>
 8002214:	4a88      	ldr	r2, [pc, #544]	; (8002438 <UART_SetConfig+0x270>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d03e      	beq.n	8002298 <UART_SetConfig+0xd0>
 800221a:	4a88      	ldr	r2, [pc, #544]	; (800243c <UART_SetConfig+0x274>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d062      	beq.n	80022e6 <UART_SetConfig+0x11e>
 8002220:	4a87      	ldr	r2, [pc, #540]	; (8002440 <UART_SetConfig+0x278>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d071      	beq.n	800230a <UART_SetConfig+0x142>
 8002226:	4a87      	ldr	r2, [pc, #540]	; (8002444 <UART_SetConfig+0x27c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	f000 8083 	beq.w	8002334 <UART_SetConfig+0x16c>
 800222e:	4a86      	ldr	r2, [pc, #536]	; (8002448 <UART_SetConfig+0x280>)
 8002230:	4293      	cmp	r3, r2
 8002232:	f000 8094 	beq.w	800235e <UART_SetConfig+0x196>
 8002236:	4a85      	ldr	r2, [pc, #532]	; (800244c <UART_SetConfig+0x284>)
 8002238:	4293      	cmp	r3, r2
 800223a:	f000 80a5 	beq.w	8002388 <UART_SetConfig+0x1c0>
 800223e:	2310      	movs	r3, #16
 8002240:	e03a      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002242:	4b83      	ldr	r3, [pc, #524]	; (8002450 <UART_SetConfig+0x288>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d809      	bhi.n	8002264 <UART_SetConfig+0x9c>
 8002250:	e8df f003 	tbb	[pc, r3]
 8002254:	06ae0402 	.word	0x06ae0402
 8002258:	2301      	movs	r3, #1
 800225a:	e02d      	b.n	80022b8 <UART_SetConfig+0xf0>
 800225c:	2304      	movs	r3, #4
 800225e:	e02b      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002260:	2308      	movs	r3, #8
 8002262:	e029      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002264:	2310      	movs	r3, #16
 8002266:	e027      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002268:	4b79      	ldr	r3, [pc, #484]	; (8002450 <UART_SetConfig+0x288>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d80e      	bhi.n	8002294 <UART_SetConfig+0xcc>
 8002276:	e8df f003 	tbb	[pc, r3]
 800227a:	0d07      	.short	0x0d07
 800227c:	0d090d0d 	.word	0x0d090d0d
 8002280:	0d9d0d0d 	.word	0x0d9d0d0d
 8002284:	0d0d      	.short	0x0d0d
 8002286:	0b          	.byte	0x0b
 8002287:	00          	.byte	0x00
 8002288:	2300      	movs	r3, #0
 800228a:	e015      	b.n	80022b8 <UART_SetConfig+0xf0>
 800228c:	2304      	movs	r3, #4
 800228e:	e013      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002290:	2308      	movs	r3, #8
 8002292:	e011      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002294:	2310      	movs	r3, #16
 8002296:	e00f      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002298:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <UART_SetConfig+0x288>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	f000 8088 	beq.w	80023b8 <UART_SetConfig+0x1f0>
 80022a8:	d819      	bhi.n	80022de <UART_SetConfig+0x116>
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8086 	beq.w	80023bc <UART_SetConfig+0x1f4>
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	f040 8085 	bne.w	80023c0 <UART_SetConfig+0x1f8>
 80022b6:	2304      	movs	r3, #4

	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 80022b8:	69e0      	ldr	r0, [r4, #28]
 80022ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80022be:	f000 80ab 	beq.w	8002418 <UART_SetConfig+0x250>
			} else {
				ret = HAL_ERROR;
			}
		}
	} else {
		switch (clocksource) {
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	f200 810c 	bhi.w	80024e0 <UART_SetConfig+0x318>
 80022c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022cc:	00fb00e8 	.word	0x00fb00e8
 80022d0:	010a00e6 	.word	0x010a00e6
 80022d4:	010a00fe 	.word	0x010a00fe
 80022d8:	010a010a 	.word	0x010a010a
 80022dc:	0101      	.short	0x0101
	UART_GETCLOCKSOURCE(huart, clocksource);
 80022de:	2b30      	cmp	r3, #48	; 0x30
 80022e0:	d170      	bne.n	80023c4 <UART_SetConfig+0x1fc>
 80022e2:	2308      	movs	r3, #8
 80022e4:	e7e8      	b.n	80022b8 <UART_SetConfig+0xf0>
 80022e6:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <UART_SetConfig+0x288>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022f0:	2b80      	cmp	r3, #128	; 0x80
 80022f2:	d069      	beq.n	80023c8 <UART_SetConfig+0x200>
 80022f4:	d805      	bhi.n	8002302 <UART_SetConfig+0x13a>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d068      	beq.n	80023cc <UART_SetConfig+0x204>
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d168      	bne.n	80023d0 <UART_SetConfig+0x208>
 80022fe:	2304      	movs	r3, #4
 8002300:	e7da      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002302:	2bc0      	cmp	r3, #192	; 0xc0
 8002304:	d166      	bne.n	80023d4 <UART_SetConfig+0x20c>
 8002306:	2308      	movs	r3, #8
 8002308:	e7d6      	b.n	80022b8 <UART_SetConfig+0xf0>
 800230a:	4b51      	ldr	r3, [pc, #324]	; (8002450 <UART_SetConfig+0x288>)
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002318:	d05e      	beq.n	80023d8 <UART_SetConfig+0x210>
 800231a:	d806      	bhi.n	800232a <UART_SetConfig+0x162>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d05d      	beq.n	80023dc <UART_SetConfig+0x214>
 8002320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002324:	d15c      	bne.n	80023e0 <UART_SetConfig+0x218>
 8002326:	2304      	movs	r3, #4
 8002328:	e7c6      	b.n	80022b8 <UART_SetConfig+0xf0>
 800232a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800232e:	d159      	bne.n	80023e4 <UART_SetConfig+0x21c>
 8002330:	2308      	movs	r3, #8
 8002332:	e7c1      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002334:	4b46      	ldr	r3, [pc, #280]	; (8002450 <UART_SetConfig+0x288>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800233e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002342:	d051      	beq.n	80023e8 <UART_SetConfig+0x220>
 8002344:	d806      	bhi.n	8002354 <UART_SetConfig+0x18c>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d050      	beq.n	80023ec <UART_SetConfig+0x224>
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234e:	d14f      	bne.n	80023f0 <UART_SetConfig+0x228>
 8002350:	2304      	movs	r3, #4
 8002352:	e7b1      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002358:	d14c      	bne.n	80023f4 <UART_SetConfig+0x22c>
 800235a:	2308      	movs	r3, #8
 800235c:	e7ac      	b.n	80022b8 <UART_SetConfig+0xf0>
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <UART_SetConfig+0x288>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236c:	d044      	beq.n	80023f8 <UART_SetConfig+0x230>
 800236e:	d806      	bhi.n	800237e <UART_SetConfig+0x1b6>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d043      	beq.n	80023fc <UART_SetConfig+0x234>
 8002374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002378:	d142      	bne.n	8002400 <UART_SetConfig+0x238>
 800237a:	2304      	movs	r3, #4
 800237c:	e79c      	b.n	80022b8 <UART_SetConfig+0xf0>
 800237e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002382:	d13f      	bne.n	8002404 <UART_SetConfig+0x23c>
 8002384:	2308      	movs	r3, #8
 8002386:	e797      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <UART_SetConfig+0x288>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002396:	d037      	beq.n	8002408 <UART_SetConfig+0x240>
 8002398:	d805      	bhi.n	80023a6 <UART_SetConfig+0x1de>
 800239a:	b3bb      	cbz	r3, 800240c <UART_SetConfig+0x244>
 800239c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a0:	d136      	bne.n	8002410 <UART_SetConfig+0x248>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e788      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80023aa:	d133      	bne.n	8002414 <UART_SetConfig+0x24c>
 80023ac:	2308      	movs	r3, #8
 80023ae:	e783      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e781      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e77f      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e77d      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023bc:	2300      	movs	r3, #0
 80023be:	e77b      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023c0:	2310      	movs	r3, #16
 80023c2:	e779      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023c4:	2310      	movs	r3, #16
 80023c6:	e777      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e775      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023cc:	2300      	movs	r3, #0
 80023ce:	e773      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023d0:	2310      	movs	r3, #16
 80023d2:	e771      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023d4:	2310      	movs	r3, #16
 80023d6:	e76f      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023d8:	2302      	movs	r3, #2
 80023da:	e76d      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023dc:	2300      	movs	r3, #0
 80023de:	e76b      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023e0:	2310      	movs	r3, #16
 80023e2:	e769      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023e4:	2310      	movs	r3, #16
 80023e6:	e767      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e765      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e763      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023f0:	2310      	movs	r3, #16
 80023f2:	e761      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023f4:	2310      	movs	r3, #16
 80023f6:	e75f      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e75d      	b.n	80022b8 <UART_SetConfig+0xf0>
 80023fc:	2300      	movs	r3, #0
 80023fe:	e75b      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002400:	2310      	movs	r3, #16
 8002402:	e759      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002404:	2310      	movs	r3, #16
 8002406:	e757      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002408:	2302      	movs	r3, #2
 800240a:	e755      	b.n	80022b8 <UART_SetConfig+0xf0>
 800240c:	2300      	movs	r3, #0
 800240e:	e753      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002410:	2310      	movs	r3, #16
 8002412:	e751      	b.n	80022b8 <UART_SetConfig+0xf0>
 8002414:	2310      	movs	r3, #16
 8002416:	e74f      	b.n	80022b8 <UART_SetConfig+0xf0>
		switch (clocksource) {
 8002418:	2b08      	cmp	r3, #8
 800241a:	d85b      	bhi.n	80024d4 <UART_SetConfig+0x30c>
 800241c:	e8df f003 	tbb	[pc, r3]
 8002420:	5a3a341a 	.word	0x5a3a341a
 8002424:	5a5a5a37 	.word	0x5a5a5a37
 8002428:	1e          	.byte	0x1e
 8002429:	00          	.byte	0x00
 800242a:	bf00      	nop
 800242c:	efff69f3 	.word	0xefff69f3
 8002430:	40011000 	.word	0x40011000
 8002434:	40004400 	.word	0x40004400
 8002438:	40004800 	.word	0x40004800
 800243c:	40004c00 	.word	0x40004c00
 8002440:	40005000 	.word	0x40005000
 8002444:	40011400 	.word	0x40011400
 8002448:	40007800 	.word	0x40007800
 800244c:	40007c00 	.word	0x40007c00
 8002450:	40023800 	.word	0x40023800
			pclk = HAL_RCC_GetPCLK1Freq();
 8002454:	f7ff fe98 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
		if (pclk != 0U) {
 8002458:	2800      	cmp	r0, #0
 800245a:	d03d      	beq.n	80024d8 <UART_SetConfig+0x310>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 800245c:	6862      	ldr	r2, [r4, #4]
 800245e:	0853      	lsrs	r3, r2, #1
 8002460:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002464:	fbb3 f3f2 	udiv	r3, r3, r2
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8002468:	f1a3 0110 	sub.w	r1, r3, #16
 800246c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002470:	4291      	cmp	r1, r2
 8002472:	d833      	bhi.n	80024dc <UART_SetConfig+0x314>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8002474:	b29a      	uxth	r2, r3
 8002476:	f022 020f 	bic.w	r2, r2, #15
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 800247a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800247e:	4313      	orrs	r3, r2
				huart->Instance->BRR = brrtemp;
 8002480:	6822      	ldr	r2, [r4, #0]
 8002482:	60d3      	str	r3, [r2, #12]
 8002484:	2000      	movs	r0, #0
 8002486:	e030      	b.n	80024ea <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 8002488:	f7ff fe8e 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
			break;
 800248c:	e7e4      	b.n	8002458 <UART_SetConfig+0x290>
			pclk = HAL_RCC_GetSysClockFreq();
 800248e:	f7ff fd6b 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
			break;
 8002492:	e7e1      	b.n	8002458 <UART_SetConfig+0x290>
			pclk = (uint32_t) HSI_VALUE;
 8002494:	4817      	ldr	r0, [pc, #92]	; (80024f4 <UART_SetConfig+0x32c>)
 8002496:	e7e1      	b.n	800245c <UART_SetConfig+0x294>
		switch (clocksource) {
 8002498:	4816      	ldr	r0, [pc, #88]	; (80024f4 <UART_SetConfig+0x32c>)
 800249a:	e002      	b.n	80024a2 <UART_SetConfig+0x2da>
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 800249c:	f7ff fe74 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
			pclk = 0U;
			ret = HAL_ERROR;
			break;
		}

		if (pclk != 0U) {
 80024a0:	b300      	cbz	r0, 80024e4 <UART_SetConfig+0x31c>
			/* USARTDIV must be greater than or equal to 0d16 */
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80024a8:	fbb0 f0f3 	udiv	r0, r0, r3
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 80024ac:	f1a0 0210 	sub.w	r2, r0, #16
 80024b0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d817      	bhi.n	80024e8 <UART_SetConfig+0x320>
				huart->Instance->BRR = (uint16_t) usartdiv;
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	b280      	uxth	r0, r0
 80024bc:	60d8      	str	r0, [r3, #12]
 80024be:	2000      	movs	r0, #0
 80024c0:	e013      	b.n	80024ea <UART_SetConfig+0x322>
			pclk = HAL_RCC_GetPCLK2Freq();
 80024c2:	f7ff fe71 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
			break;
 80024c6:	e7eb      	b.n	80024a0 <UART_SetConfig+0x2d8>
			pclk = HAL_RCC_GetSysClockFreq();
 80024c8:	f7ff fd4e 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
			break;
 80024cc:	e7e8      	b.n	80024a0 <UART_SetConfig+0x2d8>
			pclk = (uint32_t) LSE_VALUE;
 80024ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024d2:	e7e6      	b.n	80024a2 <UART_SetConfig+0x2da>
		switch (clocksource) {
 80024d4:	2001      	movs	r0, #1
 80024d6:	e008      	b.n	80024ea <UART_SetConfig+0x322>
 80024d8:	2000      	movs	r0, #0
 80024da:	e006      	b.n	80024ea <UART_SetConfig+0x322>
				ret = HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
 80024de:	e004      	b.n	80024ea <UART_SetConfig+0x322>
		switch (clocksource) {
 80024e0:	2001      	movs	r0, #1
 80024e2:	e002      	b.n	80024ea <UART_SetConfig+0x322>
 80024e4:	2000      	movs	r0, #0
 80024e6:	e000      	b.n	80024ea <UART_SetConfig+0x322>
			} else {
				ret = HAL_ERROR;
 80024e8:	2001      	movs	r0, #1
			}
		}
	}

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	66a3      	str	r3, [r4, #104]	; 0x68
	huart->TxISR = NULL;
 80024ee:	66e3      	str	r3, [r4, #108]	; 0x6c

	return ret;
}
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	bf00      	nop
 80024f4:	00f42400 	.word	0x00f42400

080024f8 <UART_AdvFeatureConfig>:
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 80024f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024fa:	f013 0f01 	tst.w	r3, #1
 80024fe:	d006      	beq.n	800250e <UART_AdvFeatureConfig+0x16>
			UART_ADVFEATURE_TXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8002500:	6802      	ldr	r2, [r0, #0]
 8002502:	6853      	ldr	r3, [r2, #4]
 8002504:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002508:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800250a:	430b      	orrs	r3, r1
 800250c:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.TxPinLevelInvert);
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800250e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002510:	f013 0f02 	tst.w	r3, #2
 8002514:	d006      	beq.n	8002524 <UART_AdvFeatureConfig+0x2c>
			UART_ADVFEATURE_RXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8002516:	6802      	ldr	r2, [r0, #0]
 8002518:	6853      	ldr	r3, [r2, #4]
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002520:	430b      	orrs	r3, r1
 8002522:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.RxPinLevelInvert);
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002524:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002526:	f013 0f04 	tst.w	r3, #4
 800252a:	d006      	beq.n	800253a <UART_AdvFeatureConfig+0x42>
			UART_ADVFEATURE_DATAINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 800252c:	6802      	ldr	r2, [r0, #0]
 800252e:	6853      	ldr	r3, [r2, #4]
 8002530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002534:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002536:	430b      	orrs	r3, r1
 8002538:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.DataInvert);
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800253a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800253c:	f013 0f08 	tst.w	r3, #8
 8002540:	d006      	beq.n	8002550 <UART_AdvFeatureConfig+0x58>
			UART_ADVFEATURE_SWAP_INIT)) {
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8002542:	6802      	ldr	r2, [r0, #0]
 8002544:	6853      	ldr	r3, [r2, #4]
 8002546:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800254a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800254c:	430b      	orrs	r3, r1
 800254e:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.Swap);
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002550:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002552:	f013 0f10 	tst.w	r3, #16
 8002556:	d006      	beq.n	8002566 <UART_AdvFeatureConfig+0x6e>
			UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8002558:	6802      	ldr	r2, [r0, #0]
 800255a:	6893      	ldr	r3, [r2, #8]
 800255c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002560:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002562:	430b      	orrs	r3, r1
 8002564:	6093      	str	r3, [r2, #8]
				huart->AdvancedInit.OverrunDisable);
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002566:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002568:	f013 0f20 	tst.w	r3, #32
 800256c:	d006      	beq.n	800257c <UART_AdvFeatureConfig+0x84>
			UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 800256e:	6802      	ldr	r2, [r0, #0]
 8002570:	6893      	ldr	r3, [r2, #8]
 8002572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002576:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002578:	430b      	orrs	r3, r1
 800257a:	6093      	str	r3, [r2, #8]
				huart->AdvancedInit.DMADisableonRxError);
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800257c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800257e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002582:	d00a      	beq.n	800259a <UART_AdvFeatureConfig+0xa2>
			UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(
				IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8002584:	6802      	ldr	r2, [r0, #0]
 8002586:	6853      	ldr	r3, [r2, #4]
 8002588:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800258c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800258e:	430b      	orrs	r3, r1
 8002590:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.AutoBaudRateEnable);
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable
 8002592:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002598:	d00b      	beq.n	80025b2 <UART_AdvFeatureConfig+0xba>
					huart->AdvancedInit.AutoBaudRateMode);
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 800259a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800259c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025a0:	d006      	beq.n	80025b0 <UART_AdvFeatureConfig+0xb8>
			UART_ADVFEATURE_MSBFIRST_INIT)) {
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 80025a2:	6802      	ldr	r2, [r0, #0]
 80025a4:	6853      	ldr	r3, [r2, #4]
 80025a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80025aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80025ac:	430b      	orrs	r3, r1
 80025ae:	6053      	str	r3, [r2, #4]
				huart->AdvancedInit.MSBFirst);
	}
}
 80025b0:	4770      	bx	lr
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 80025b2:	6802      	ldr	r2, [r0, #0]
 80025b4:	6853      	ldr	r3, [r2, #4]
 80025b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025ba:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80025bc:	430b      	orrs	r3, r1
 80025be:	6053      	str	r3, [r2, #4]
 80025c0:	e7eb      	b.n	800259a <UART_AdvFeatureConfig+0xa2>

080025c2 <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 80025c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025c6:	4605      	mov	r5, r0
 80025c8:	460f      	mov	r7, r1
 80025ca:	4616      	mov	r6, r2
 80025cc:	4699      	mov	r9, r3
 80025ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 80025d2:	682b      	ldr	r3, [r5, #0]
 80025d4:	69dc      	ldr	r4, [r3, #28]
 80025d6:	ea37 0404 	bics.w	r4, r7, r4
 80025da:	bf0c      	ite	eq
 80025dc:	2401      	moveq	r4, #1
 80025de:	2400      	movne	r4, #0
 80025e0:	42b4      	cmp	r4, r6
 80025e2:	d155      	bne.n	8002690 <UART_WaitOnFlagUntilTimeout+0xce>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 80025e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80025e8:	d0f3      	beq.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x10>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 80025ea:	f7fe fc0b 	bl	8000e04 <HAL_GetTick>
 80025ee:	eba0 0009 	sub.w	r0, r0, r9
 80025f2:	4540      	cmp	r0, r8
 80025f4:	d82e      	bhi.n	8002654 <UART_WaitOnFlagUntilTimeout+0x92>
 80025f6:	f1b8 0f00 	cmp.w	r8, #0
 80025fa:	d02b      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0x92>
				__HAL_UNLOCK(huart);

				return HAL_TIMEOUT;
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	f012 0f04 	tst.w	r2, #4
 8002604:	d0e5      	beq.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x10>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800260c:	d0e1      	beq.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x10>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800260e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002612:	621a      	str	r2, [r3, #32]

					/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
					 interrupts for the interrupt process */
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8002614:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002616:	e852 3f00 	ldrex	r3, [r2]
 800261a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261e:	e842 3100 	strex	r1, r3, [r2]
 8002622:	2900      	cmp	r1, #0
 8002624:	d1f6      	bne.n	8002614 <UART_WaitOnFlagUntilTimeout+0x52>
							(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002626:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	f102 0308 	add.w	r3, r2, #8
 800262c:	e853 3f00 	ldrex	r3, [r3]
 8002630:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002634:	3208      	adds	r2, #8
 8002636:	e842 3100 	strex	r1, r3, [r2]
 800263a:	2900      	cmp	r1, #0
 800263c:	d1f3      	bne.n	8002626 <UART_WaitOnFlagUntilTimeout+0x64>

					huart->gState = HAL_UART_STATE_READY;
 800263e:	2320      	movs	r3, #32
 8002640:	67eb      	str	r3, [r5, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 8002642:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002646:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 800264a:	2300      	movs	r3, #0
 800264c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78

					return HAL_TIMEOUT;
 8002650:	2003      	movs	r0, #3
 8002652:	e01e      	b.n	8002692 <UART_WaitOnFlagUntilTimeout+0xd0>
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8002654:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002656:	e852 3f00 	ldrex	r3, [r2]
 800265a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	e842 3100 	strex	r1, r3, [r2]
 8002662:	2900      	cmp	r1, #0
 8002664:	d1f6      	bne.n	8002654 <UART_WaitOnFlagUntilTimeout+0x92>
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002666:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002668:	f102 0308 	add.w	r3, r2, #8
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002674:	3208      	adds	r2, #8
 8002676:	e842 3100 	strex	r1, r3, [r2]
 800267a:	2900      	cmp	r1, #0
 800267c:	d1f3      	bne.n	8002666 <UART_WaitOnFlagUntilTimeout+0xa4>
				huart->gState = HAL_UART_STATE_READY;
 800267e:	2320      	movs	r3, #32
 8002680:	67eb      	str	r3, [r5, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 8002682:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
				__HAL_UNLOCK(huart);
 8002686:	2300      	movs	r3, #0
 8002688:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
				return HAL_TIMEOUT;
 800268c:	2003      	movs	r0, #3
 800268e:	e000      	b.n	8002692 <UART_WaitOnFlagUntilTimeout+0xd0>
				}
			}
		}
	}
	return HAL_OK;
 8002690:	2000      	movs	r0, #0
}
 8002692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002696 <HAL_UART_Transmit>:
		const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8002696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	461e      	mov	r6, r3
	if (huart->gState == HAL_UART_STATE_READY) {
 800269e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d14e      	bne.n	8002742 <HAL_UART_Transmit+0xac>
 80026a4:	4604      	mov	r4, r0
 80026a6:	460d      	mov	r5, r1
 80026a8:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	bf18      	it	ne
 80026ae:	2900      	cmpne	r1, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_Transmit+0x20>
			return HAL_ERROR;
 80026b2:	2001      	movs	r0, #1
 80026b4:	e046      	b.n	8002744 <HAL_UART_Transmit+0xae>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80026bc:	2321      	movs	r3, #33	; 0x21
 80026be:	67c3      	str	r3, [r0, #124]	; 0x7c
		tickstart = HAL_GetTick();
 80026c0:	f7fe fba0 	bl	8000e04 <HAL_GetTick>
 80026c4:	4607      	mov	r7, r0
		huart->TxXferSize = Size;
 80026c6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
		huart->TxXferCount = Size;
 80026ca:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026ce:	68a3      	ldr	r3, [r4, #8]
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d4:	d002      	beq.n	80026dc <HAL_UART_Transmit+0x46>
			pdata16bits = NULL;
 80026d6:	f04f 0800 	mov.w	r8, #0
 80026da:	e011      	b.n	8002700 <HAL_UART_Transmit+0x6a>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80026dc:	6923      	ldr	r3, [r4, #16]
 80026de:	b313      	cbz	r3, 8002726 <HAL_UART_Transmit+0x90>
			pdata16bits = NULL;
 80026e0:	f04f 0800 	mov.w	r8, #0
 80026e4:	e00c      	b.n	8002700 <HAL_UART_Transmit+0x6a>
				huart->Instance->TDR = (uint16_t) (*pdata16bits & 0x01FFU);
 80026e6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80026ea:	6822      	ldr	r2, [r4, #0]
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	6293      	str	r3, [r2, #40]	; 0x28
			huart->TxXferCount--;
 80026f2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80026f6:	b292      	uxth	r2, r2
 80026f8:	3a01      	subs	r2, #1
 80026fa:	b292      	uxth	r2, r2
 80026fc:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
		while (huart->TxXferCount > 0U) {
 8002700:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002704:	b29b      	uxth	r3, r3
 8002706:	b18b      	cbz	r3, 800272c <HAL_UART_Transmit+0x96>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8002708:	9600      	str	r6, [sp, #0]
 800270a:	463b      	mov	r3, r7
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff ff56 	bl	80025c2 <UART_WaitOnFlagUntilTimeout>
 8002716:	b9c0      	cbnz	r0, 800274a <HAL_UART_Transmit+0xb4>
			if (pdata8bits == NULL) {
 8002718:	2d00      	cmp	r5, #0
 800271a:	d0e4      	beq.n	80026e6 <HAL_UART_Transmit+0x50>
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 800271c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
				pdata8bits++;
 8002724:	e7e5      	b.n	80026f2 <HAL_UART_Transmit+0x5c>
			pdata16bits = (const uint16_t*) pData;
 8002726:	46a8      	mov	r8, r5
			pdata8bits = NULL;
 8002728:	2500      	movs	r5, #0
 800272a:	e7e9      	b.n	8002700 <HAL_UART_Transmit+0x6a>
		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 800272c:	9600      	str	r6, [sp, #0]
 800272e:	463b      	mov	r3, r7
 8002730:	2200      	movs	r2, #0
 8002732:	2140      	movs	r1, #64	; 0x40
 8002734:	4620      	mov	r0, r4
 8002736:	f7ff ff44 	bl	80025c2 <UART_WaitOnFlagUntilTimeout>
 800273a:	b940      	cbnz	r0, 800274e <HAL_UART_Transmit+0xb8>
		huart->gState = HAL_UART_STATE_READY;
 800273c:	2320      	movs	r3, #32
 800273e:	67e3      	str	r3, [r4, #124]	; 0x7c
		return HAL_OK;
 8002740:	e000      	b.n	8002744 <HAL_UART_Transmit+0xae>
		return HAL_BUSY;
 8002742:	2002      	movs	r0, #2
}
 8002744:	b002      	add	sp, #8
 8002746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return HAL_TIMEOUT;
 800274a:	2003      	movs	r0, #3
 800274c:	e7fa      	b.n	8002744 <HAL_UART_Transmit+0xae>
			return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
 8002750:	e7f8      	b.n	8002744 <HAL_UART_Transmit+0xae>

08002752 <HAL_UART_Receive>:
		uint16_t Size, uint32_t Timeout) {
 8002752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002756:	b083      	sub	sp, #12
 8002758:	461e      	mov	r6, r3
	if (huart->RxState == HAL_UART_STATE_READY) {
 800275a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800275e:	2b20      	cmp	r3, #32
 8002760:	d178      	bne.n	8002854 <HAL_UART_Receive+0x102>
 8002762:	4604      	mov	r4, r0
 8002764:	460d      	mov	r5, r1
 8002766:	4690      	mov	r8, r2
		if ((pData == NULL) || (Size == 0U)) {
 8002768:	2a00      	cmp	r2, #0
 800276a:	bf18      	it	ne
 800276c:	2900      	cmpne	r1, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Receive+0x22>
			return HAL_ERROR;
 8002770:	2001      	movs	r0, #1
 8002772:	e070      	b.n	8002856 <HAL_UART_Receive+0x104>
		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 800277a:	2222      	movs	r2, #34	; 0x22
 800277c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002780:	6603      	str	r3, [r0, #96]	; 0x60
		tickstart = HAL_GetTick();
 8002782:	f7fe fb3f 	bl	8000e04 <HAL_GetTick>
 8002786:	4607      	mov	r7, r0
		huart->RxXferSize = Size;
 8002788:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
		huart->RxXferCount = Size;
 800278c:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
		UART_MASK_COMPUTATION(huart);
 8002790:	68a3      	ldr	r3, [r4, #8]
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002796:	d006      	beq.n	80027a6 <HAL_UART_Receive+0x54>
 8002798:	b9a3      	cbnz	r3, 80027c4 <HAL_UART_Receive+0x72>
 800279a:	6922      	ldr	r2, [r4, #16]
 800279c:	b972      	cbnz	r2, 80027bc <HAL_UART_Receive+0x6a>
 800279e:	22ff      	movs	r2, #255	; 0xff
 80027a0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80027a4:	e014      	b.n	80027d0 <HAL_UART_Receive+0x7e>
 80027a6:	6922      	ldr	r2, [r4, #16]
 80027a8:	b922      	cbnz	r2, 80027b4 <HAL_UART_Receive+0x62>
 80027aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80027ae:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80027b2:	e00d      	b.n	80027d0 <HAL_UART_Receive+0x7e>
 80027b4:	22ff      	movs	r2, #255	; 0xff
 80027b6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80027ba:	e009      	b.n	80027d0 <HAL_UART_Receive+0x7e>
 80027bc:	227f      	movs	r2, #127	; 0x7f
 80027be:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80027c2:	e005      	b.n	80027d0 <HAL_UART_Receive+0x7e>
 80027c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c8:	d00a      	beq.n	80027e0 <HAL_UART_Receive+0x8e>
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
		uhMask = huart->Mask;
 80027d0:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d8:	d00c      	beq.n	80027f4 <HAL_UART_Receive+0xa2>
			pdata16bits = NULL;
 80027da:	f04f 0900 	mov.w	r9, #0
 80027de:	e01f      	b.n	8002820 <HAL_UART_Receive+0xce>
		UART_MASK_COMPUTATION(huart);
 80027e0:	6922      	ldr	r2, [r4, #16]
 80027e2:	b91a      	cbnz	r2, 80027ec <HAL_UART_Receive+0x9a>
 80027e4:	227f      	movs	r2, #127	; 0x7f
 80027e6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80027ea:	e7f1      	b.n	80027d0 <HAL_UART_Receive+0x7e>
 80027ec:	223f      	movs	r2, #63	; 0x3f
 80027ee:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80027f2:	e7ed      	b.n	80027d0 <HAL_UART_Receive+0x7e>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80027f4:	6923      	ldr	r3, [r4, #16]
 80027f6:	b113      	cbz	r3, 80027fe <HAL_UART_Receive+0xac>
			pdata16bits = NULL;
 80027f8:	f04f 0900 	mov.w	r9, #0
 80027fc:	e010      	b.n	8002820 <HAL_UART_Receive+0xce>
			pdata16bits = (uint16_t*) pData;
 80027fe:	46a9      	mov	r9, r5
			pdata8bits = NULL;
 8002800:	2500      	movs	r5, #0
 8002802:	e00d      	b.n	8002820 <HAL_UART_Receive+0xce>
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002808:	fa5f f388 	uxtb.w	r3, r8
 800280c:	4013      	ands	r3, r2
				*pdata8bits =
 800280e:	f805 3b01 	strb.w	r3, [r5], #1
			huart->RxXferCount--;
 8002812:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002816:	b292      	uxth	r2, r2
 8002818:	3a01      	subs	r2, #1
 800281a:	b292      	uxth	r2, r2
 800281c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 8002820:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002824:	b29b      	uxth	r3, r3
 8002826:	b183      	cbz	r3, 800284a <HAL_UART_Receive+0xf8>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 8002828:	9600      	str	r6, [sp, #0]
 800282a:	463b      	mov	r3, r7
 800282c:	2200      	movs	r2, #0
 800282e:	2120      	movs	r1, #32
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff fec6 	bl	80025c2 <UART_WaitOnFlagUntilTimeout>
 8002836:	b988      	cbnz	r0, 800285c <HAL_UART_Receive+0x10a>
			if (pdata8bits == NULL) {
 8002838:	2d00      	cmp	r5, #0
 800283a:	d1e3      	bne.n	8002804 <HAL_UART_Receive+0xb2>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	ea08 0303 	and.w	r3, r8, r3
 8002844:	f829 3b02 	strh.w	r3, [r9], #2
				pdata16bits++;
 8002848:	e7e3      	b.n	8002812 <HAL_UART_Receive+0xc0>
		huart->RxState = HAL_UART_STATE_READY;
 800284a:	2320      	movs	r3, #32
 800284c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		return HAL_OK;
 8002850:	2000      	movs	r0, #0
 8002852:	e000      	b.n	8002856 <HAL_UART_Receive+0x104>
		return HAL_BUSY;
 8002854:	2002      	movs	r0, #2
}
 8002856:	b003      	add	sp, #12
 8002858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return HAL_TIMEOUT;
 800285c:	2003      	movs	r0, #3
 800285e:	e7fa      	b.n	8002856 <HAL_UART_Receive+0x104>

08002860 <UART_CheckIdleState>:
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8002860:	b530      	push	{r4, r5, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	4604      	mov	r4, r0
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	tickstart = HAL_GetTick();
 800286c:	f7fe faca 	bl	8000e04 <HAL_GetTick>
 8002870:	4605      	mov	r5, r0
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8002872:	6822      	ldr	r2, [r4, #0]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	f012 0f08 	tst.w	r2, #8
 800287a:	d10f      	bne.n	800289c <UART_CheckIdleState+0x3c>
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f013 0f04 	tst.w	r3, #4
 8002884:	d118      	bne.n	80028b8 <UART_CheckIdleState+0x58>
	huart->gState = HAL_UART_STATE_READY;
 8002886:	2320      	movs	r3, #32
 8002888:	67e3      	str	r3, [r4, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 800288a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288e:	2000      	movs	r0, #0
 8002890:	6620      	str	r0, [r4, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002892:	6660      	str	r0, [r4, #100]	; 0x64
	__HAL_UNLOCK(huart);
 8002894:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8002898:	b003      	add	sp, #12
 800289a:	bd30      	pop	{r4, r5, pc}
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 800289c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4603      	mov	r3, r0
 80028a4:	2200      	movs	r2, #0
 80028a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7ff fe89 	bl	80025c2 <UART_WaitOnFlagUntilTimeout>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d0e3      	beq.n	800287c <UART_CheckIdleState+0x1c>
			return HAL_TIMEOUT;
 80028b4:	2003      	movs	r0, #3
 80028b6:	e7ef      	b.n	8002898 <UART_CheckIdleState+0x38>
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 80028b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	462b      	mov	r3, r5
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff fe7b 	bl	80025c2 <UART_WaitOnFlagUntilTimeout>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d0da      	beq.n	8002886 <UART_CheckIdleState+0x26>
			return HAL_TIMEOUT;
 80028d0:	2003      	movs	r0, #3
 80028d2:	e7e1      	b.n	8002898 <UART_CheckIdleState+0x38>

080028d4 <HAL_UART_Init>:
	if (huart == NULL) {
 80028d4:	b368      	cbz	r0, 8002932 <HAL_UART_Init+0x5e>
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80028d6:	b510      	push	{r4, lr}
 80028d8:	4604      	mov	r4, r0
	if (huart->gState == HAL_UART_STATE_RESET) {
 80028da:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80028dc:	b303      	cbz	r3, 8002920 <HAL_UART_Init+0x4c>
	huart->gState = HAL_UART_STATE_BUSY;
 80028de:	2324      	movs	r3, #36	; 0x24
 80028e0:	67e3      	str	r3, [r4, #124]	; 0x7c
	__HAL_UART_DISABLE(huart);
 80028e2:	6822      	ldr	r2, [r4, #0]
 80028e4:	6813      	ldr	r3, [r2, #0]
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	6013      	str	r3, [r2, #0]
	if (UART_SetConfig(huart) == HAL_ERROR) {
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7ff fc6b 	bl	80021c8 <UART_SetConfig>
 80028f2:	2801      	cmp	r0, #1
 80028f4:	d013      	beq.n	800291e <HAL_UART_Init+0x4a>
	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 80028f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028f8:	b9bb      	cbnz	r3, 800292a <HAL_UART_Init+0x56>
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fa:	6822      	ldr	r2, [r4, #0]
 80028fc:	6853      	ldr	r3, [r2, #4]
 80028fe:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002902:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8002904:	6822      	ldr	r2, [r4, #0]
 8002906:	6893      	ldr	r3, [r2, #8]
 8002908:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800290c:	6093      	str	r3, [r2, #8]
	__HAL_UART_ENABLE(huart);
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]
	return (UART_CheckIdleState(huart));
 8002918:	4620      	mov	r0, r4
 800291a:	f7ff ffa1 	bl	8002860 <UART_CheckIdleState>
}
 800291e:	bd10      	pop	{r4, pc}
		huart->Lock = HAL_UNLOCKED;
 8002920:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		HAL_UART_MspInit(huart);
 8002924:	f7fe f95c 	bl	8000be0 <HAL_UART_MspInit>
 8002928:	e7d9      	b.n	80028de <HAL_UART_Init+0xa>
		UART_AdvFeatureConfig(huart);
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff fde4 	bl	80024f8 <UART_AdvFeatureConfig>
 8002930:	e7e3      	b.n	80028fa <HAL_UART_Init+0x26>
		return HAL_ERROR;
 8002932:	2001      	movs	r0, #1
}
 8002934:	4770      	bx	lr
	...

08002938 <std>:
 8002938:	2300      	movs	r3, #0
 800293a:	b510      	push	{r4, lr}
 800293c:	4604      	mov	r4, r0
 800293e:	e9c0 3300 	strd	r3, r3, [r0]
 8002942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002946:	6083      	str	r3, [r0, #8]
 8002948:	8181      	strh	r1, [r0, #12]
 800294a:	6643      	str	r3, [r0, #100]	; 0x64
 800294c:	81c2      	strh	r2, [r0, #14]
 800294e:	6183      	str	r3, [r0, #24]
 8002950:	4619      	mov	r1, r3
 8002952:	2208      	movs	r2, #8
 8002954:	305c      	adds	r0, #92	; 0x5c
 8002956:	f000 f9bc 	bl	8002cd2 <memset>
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <std+0x58>)
 800295c:	6263      	str	r3, [r4, #36]	; 0x24
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <std+0x5c>)
 8002960:	62a3      	str	r3, [r4, #40]	; 0x28
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <std+0x60>)
 8002964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <std+0x64>)
 8002968:	6323      	str	r3, [r4, #48]	; 0x30
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <std+0x68>)
 800296c:	6224      	str	r4, [r4, #32]
 800296e:	429c      	cmp	r4, r3
 8002970:	d006      	beq.n	8002980 <std+0x48>
 8002972:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002976:	4294      	cmp	r4, r2
 8002978:	d002      	beq.n	8002980 <std+0x48>
 800297a:	33d0      	adds	r3, #208	; 0xd0
 800297c:	429c      	cmp	r4, r3
 800297e:	d105      	bne.n	800298c <std+0x54>
 8002980:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002988:	f000 ba16 	b.w	8002db8 <__retarget_lock_init_recursive>
 800298c:	bd10      	pop	{r4, pc}
 800298e:	bf00      	nop
 8002990:	08002c4d 	.word	0x08002c4d
 8002994:	08002c6f 	.word	0x08002c6f
 8002998:	08002ca7 	.word	0x08002ca7
 800299c:	08002ccb 	.word	0x08002ccb
 80029a0:	200001c4 	.word	0x200001c4

080029a4 <stdio_exit_handler>:
 80029a4:	4a02      	ldr	r2, [pc, #8]	; (80029b0 <stdio_exit_handler+0xc>)
 80029a6:	4903      	ldr	r1, [pc, #12]	; (80029b4 <stdio_exit_handler+0x10>)
 80029a8:	4803      	ldr	r0, [pc, #12]	; (80029b8 <stdio_exit_handler+0x14>)
 80029aa:	f000 b869 	b.w	8002a80 <_fwalk_sglue>
 80029ae:	bf00      	nop
 80029b0:	2000000c 	.word	0x2000000c
 80029b4:	08003675 	.word	0x08003675
 80029b8:	20000018 	.word	0x20000018

080029bc <cleanup_stdio>:
 80029bc:	6841      	ldr	r1, [r0, #4]
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <cleanup_stdio+0x34>)
 80029c0:	4299      	cmp	r1, r3
 80029c2:	b510      	push	{r4, lr}
 80029c4:	4604      	mov	r4, r0
 80029c6:	d001      	beq.n	80029cc <cleanup_stdio+0x10>
 80029c8:	f000 fe54 	bl	8003674 <_fflush_r>
 80029cc:	68a1      	ldr	r1, [r4, #8]
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <cleanup_stdio+0x38>)
 80029d0:	4299      	cmp	r1, r3
 80029d2:	d002      	beq.n	80029da <cleanup_stdio+0x1e>
 80029d4:	4620      	mov	r0, r4
 80029d6:	f000 fe4d 	bl	8003674 <_fflush_r>
 80029da:	68e1      	ldr	r1, [r4, #12]
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <cleanup_stdio+0x3c>)
 80029de:	4299      	cmp	r1, r3
 80029e0:	d004      	beq.n	80029ec <cleanup_stdio+0x30>
 80029e2:	4620      	mov	r0, r4
 80029e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e8:	f000 be44 	b.w	8003674 <_fflush_r>
 80029ec:	bd10      	pop	{r4, pc}
 80029ee:	bf00      	nop
 80029f0:	200001c4 	.word	0x200001c4
 80029f4:	2000022c 	.word	0x2000022c
 80029f8:	20000294 	.word	0x20000294

080029fc <global_stdio_init.part.0>:
 80029fc:	b510      	push	{r4, lr}
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <global_stdio_init.part.0+0x30>)
 8002a00:	4c0b      	ldr	r4, [pc, #44]	; (8002a30 <global_stdio_init.part.0+0x34>)
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <global_stdio_init.part.0+0x38>)
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	4620      	mov	r0, r4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	f7ff ff94 	bl	8002938 <std>
 8002a10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002a14:	2201      	movs	r2, #1
 8002a16:	2109      	movs	r1, #9
 8002a18:	f7ff ff8e 	bl	8002938 <std>
 8002a1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002a20:	2202      	movs	r2, #2
 8002a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a26:	2112      	movs	r1, #18
 8002a28:	f7ff bf86 	b.w	8002938 <std>
 8002a2c:	200002fc 	.word	0x200002fc
 8002a30:	200001c4 	.word	0x200001c4
 8002a34:	080029a5 	.word	0x080029a5

08002a38 <__sfp_lock_acquire>:
 8002a38:	4801      	ldr	r0, [pc, #4]	; (8002a40 <__sfp_lock_acquire+0x8>)
 8002a3a:	f000 b9be 	b.w	8002dba <__retarget_lock_acquire_recursive>
 8002a3e:	bf00      	nop
 8002a40:	20000305 	.word	0x20000305

08002a44 <__sfp_lock_release>:
 8002a44:	4801      	ldr	r0, [pc, #4]	; (8002a4c <__sfp_lock_release+0x8>)
 8002a46:	f000 b9b9 	b.w	8002dbc <__retarget_lock_release_recursive>
 8002a4a:	bf00      	nop
 8002a4c:	20000305 	.word	0x20000305

08002a50 <__sinit>:
 8002a50:	b510      	push	{r4, lr}
 8002a52:	4604      	mov	r4, r0
 8002a54:	f7ff fff0 	bl	8002a38 <__sfp_lock_acquire>
 8002a58:	6a23      	ldr	r3, [r4, #32]
 8002a5a:	b11b      	cbz	r3, 8002a64 <__sinit+0x14>
 8002a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a60:	f7ff bff0 	b.w	8002a44 <__sfp_lock_release>
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <__sinit+0x28>)
 8002a66:	6223      	str	r3, [r4, #32]
 8002a68:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <__sinit+0x2c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f5      	bne.n	8002a5c <__sinit+0xc>
 8002a70:	f7ff ffc4 	bl	80029fc <global_stdio_init.part.0>
 8002a74:	e7f2      	b.n	8002a5c <__sinit+0xc>
 8002a76:	bf00      	nop
 8002a78:	080029bd 	.word	0x080029bd
 8002a7c:	200002fc 	.word	0x200002fc

08002a80 <_fwalk_sglue>:
 8002a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a84:	4607      	mov	r7, r0
 8002a86:	4688      	mov	r8, r1
 8002a88:	4614      	mov	r4, r2
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a90:	f1b9 0901 	subs.w	r9, r9, #1
 8002a94:	d505      	bpl.n	8002aa2 <_fwalk_sglue+0x22>
 8002a96:	6824      	ldr	r4, [r4, #0]
 8002a98:	2c00      	cmp	r4, #0
 8002a9a:	d1f7      	bne.n	8002a8c <_fwalk_sglue+0xc>
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aa2:	89ab      	ldrh	r3, [r5, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d907      	bls.n	8002ab8 <_fwalk_sglue+0x38>
 8002aa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002aac:	3301      	adds	r3, #1
 8002aae:	d003      	beq.n	8002ab8 <_fwalk_sglue+0x38>
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	47c0      	blx	r8
 8002ab6:	4306      	orrs	r6, r0
 8002ab8:	3568      	adds	r5, #104	; 0x68
 8002aba:	e7e9      	b.n	8002a90 <_fwalk_sglue+0x10>

08002abc <iprintf>:
 8002abc:	b40f      	push	{r0, r1, r2, r3}
 8002abe:	b507      	push	{r0, r1, r2, lr}
 8002ac0:	4906      	ldr	r1, [pc, #24]	; (8002adc <iprintf+0x20>)
 8002ac2:	ab04      	add	r3, sp, #16
 8002ac4:	6808      	ldr	r0, [r1, #0]
 8002ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002aca:	6881      	ldr	r1, [r0, #8]
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	f000 faa1 	bl	8003014 <_vfiprintf_r>
 8002ad2:	b003      	add	sp, #12
 8002ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad8:	b004      	add	sp, #16
 8002ada:	4770      	bx	lr
 8002adc:	20000064 	.word	0x20000064

08002ae0 <setbuf>:
 8002ae0:	fab1 f281 	clz	r2, r1
 8002ae4:	0952      	lsrs	r2, r2, #5
 8002ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aea:	0052      	lsls	r2, r2, #1
 8002aec:	f000 b800 	b.w	8002af0 <setvbuf>

08002af0 <setvbuf>:
 8002af0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002af4:	461d      	mov	r5, r3
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <setvbuf+0x158>)
 8002af8:	681f      	ldr	r7, [r3, #0]
 8002afa:	4604      	mov	r4, r0
 8002afc:	460e      	mov	r6, r1
 8002afe:	4690      	mov	r8, r2
 8002b00:	b127      	cbz	r7, 8002b0c <setvbuf+0x1c>
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	b913      	cbnz	r3, 8002b0c <setvbuf+0x1c>
 8002b06:	4638      	mov	r0, r7
 8002b08:	f7ff ffa2 	bl	8002a50 <__sinit>
 8002b0c:	f1b8 0f02 	cmp.w	r8, #2
 8002b10:	d006      	beq.n	8002b20 <setvbuf+0x30>
 8002b12:	f1b8 0f01 	cmp.w	r8, #1
 8002b16:	f200 8094 	bhi.w	8002c42 <setvbuf+0x152>
 8002b1a:	2d00      	cmp	r5, #0
 8002b1c:	f2c0 8091 	blt.w	8002c42 <setvbuf+0x152>
 8002b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b22:	07da      	lsls	r2, r3, #31
 8002b24:	d405      	bmi.n	8002b32 <setvbuf+0x42>
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	059b      	lsls	r3, r3, #22
 8002b2a:	d402      	bmi.n	8002b32 <setvbuf+0x42>
 8002b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b2e:	f000 f944 	bl	8002dba <__retarget_lock_acquire_recursive>
 8002b32:	4621      	mov	r1, r4
 8002b34:	4638      	mov	r0, r7
 8002b36:	f000 fd9d 	bl	8003674 <_fflush_r>
 8002b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b3c:	b141      	cbz	r1, 8002b50 <setvbuf+0x60>
 8002b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b42:	4299      	cmp	r1, r3
 8002b44:	d002      	beq.n	8002b4c <setvbuf+0x5c>
 8002b46:	4638      	mov	r0, r7
 8002b48:	f000 f93a 	bl	8002dc0 <_free_r>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8002b50:	2300      	movs	r3, #0
 8002b52:	61a3      	str	r3, [r4, #24]
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	89a3      	ldrh	r3, [r4, #12]
 8002b58:	0618      	lsls	r0, r3, #24
 8002b5a:	d503      	bpl.n	8002b64 <setvbuf+0x74>
 8002b5c:	6921      	ldr	r1, [r4, #16]
 8002b5e:	4638      	mov	r0, r7
 8002b60:	f000 f92e 	bl	8002dc0 <_free_r>
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	f1b8 0f02 	cmp.w	r8, #2
 8002b72:	81a3      	strh	r3, [r4, #12]
 8002b74:	d05f      	beq.n	8002c36 <setvbuf+0x146>
 8002b76:	ab01      	add	r3, sp, #4
 8002b78:	466a      	mov	r2, sp
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	4638      	mov	r0, r7
 8002b7e:	f000 fda1 	bl	80036c4 <__swhatbuf_r>
 8002b82:	89a3      	ldrh	r3, [r4, #12]
 8002b84:	4318      	orrs	r0, r3
 8002b86:	81a0      	strh	r0, [r4, #12]
 8002b88:	bb2d      	cbnz	r5, 8002bd6 <setvbuf+0xe6>
 8002b8a:	9d00      	ldr	r5, [sp, #0]
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f000 f963 	bl	8002e58 <malloc>
 8002b92:	4606      	mov	r6, r0
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d150      	bne.n	8002c3a <setvbuf+0x14a>
 8002b98:	f8dd 9000 	ldr.w	r9, [sp]
 8002b9c:	45a9      	cmp	r9, r5
 8002b9e:	d13e      	bne.n	8002c1e <setvbuf+0x12e>
 8002ba0:	f04f 35ff 	mov.w	r5, #4294967295
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	60a2      	str	r2, [r4, #8]
 8002ba8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002bac:	6022      	str	r2, [r4, #0]
 8002bae:	6122      	str	r2, [r4, #16]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bb6:	6162      	str	r2, [r4, #20]
 8002bb8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002bba:	f043 0302 	orr.w	r3, r3, #2
 8002bbe:	07d1      	lsls	r1, r2, #31
 8002bc0:	81a3      	strh	r3, [r4, #12]
 8002bc2:	d404      	bmi.n	8002bce <setvbuf+0xde>
 8002bc4:	059b      	lsls	r3, r3, #22
 8002bc6:	d402      	bmi.n	8002bce <setvbuf+0xde>
 8002bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bca:	f000 f8f7 	bl	8002dbc <__retarget_lock_release_recursive>
 8002bce:	4628      	mov	r0, r5
 8002bd0:	b003      	add	sp, #12
 8002bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bd6:	2e00      	cmp	r6, #0
 8002bd8:	d0d8      	beq.n	8002b8c <setvbuf+0x9c>
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	b913      	cbnz	r3, 8002be4 <setvbuf+0xf4>
 8002bde:	4638      	mov	r0, r7
 8002be0:	f7ff ff36 	bl	8002a50 <__sinit>
 8002be4:	f1b8 0f01 	cmp.w	r8, #1
 8002be8:	bf08      	it	eq
 8002bea:	89a3      	ldrheq	r3, [r4, #12]
 8002bec:	6026      	str	r6, [r4, #0]
 8002bee:	bf04      	itt	eq
 8002bf0:	f043 0301 	orreq.w	r3, r3, #1
 8002bf4:	81a3      	strheq	r3, [r4, #12]
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	f013 0208 	ands.w	r2, r3, #8
 8002bfc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002c00:	d01d      	beq.n	8002c3e <setvbuf+0x14e>
 8002c02:	07da      	lsls	r2, r3, #31
 8002c04:	bf41      	itttt	mi
 8002c06:	2200      	movmi	r2, #0
 8002c08:	426d      	negmi	r5, r5
 8002c0a:	60a2      	strmi	r2, [r4, #8]
 8002c0c:	61a5      	strmi	r5, [r4, #24]
 8002c0e:	bf58      	it	pl
 8002c10:	60a5      	strpl	r5, [r4, #8]
 8002c12:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002c14:	f015 0501 	ands.w	r5, r5, #1
 8002c18:	d0d4      	beq.n	8002bc4 <setvbuf+0xd4>
 8002c1a:	2500      	movs	r5, #0
 8002c1c:	e7d7      	b.n	8002bce <setvbuf+0xde>
 8002c1e:	4648      	mov	r0, r9
 8002c20:	f000 f91a 	bl	8002e58 <malloc>
 8002c24:	4606      	mov	r6, r0
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d0ba      	beq.n	8002ba0 <setvbuf+0xb0>
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c30:	81a3      	strh	r3, [r4, #12]
 8002c32:	464d      	mov	r5, r9
 8002c34:	e7d1      	b.n	8002bda <setvbuf+0xea>
 8002c36:	2500      	movs	r5, #0
 8002c38:	e7b4      	b.n	8002ba4 <setvbuf+0xb4>
 8002c3a:	46a9      	mov	r9, r5
 8002c3c:	e7f5      	b.n	8002c2a <setvbuf+0x13a>
 8002c3e:	60a2      	str	r2, [r4, #8]
 8002c40:	e7e7      	b.n	8002c12 <setvbuf+0x122>
 8002c42:	f04f 35ff 	mov.w	r5, #4294967295
 8002c46:	e7c2      	b.n	8002bce <setvbuf+0xde>
 8002c48:	20000064 	.word	0x20000064

08002c4c <__sread>:
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	460c      	mov	r4, r1
 8002c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c54:	f000 f868 	bl	8002d28 <_read_r>
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	bfab      	itete	ge
 8002c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8002c60:	181b      	addge	r3, r3, r0
 8002c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c66:	bfac      	ite	ge
 8002c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c6a:	81a3      	strhlt	r3, [r4, #12]
 8002c6c:	bd10      	pop	{r4, pc}

08002c6e <__swrite>:
 8002c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c72:	461f      	mov	r7, r3
 8002c74:	898b      	ldrh	r3, [r1, #12]
 8002c76:	05db      	lsls	r3, r3, #23
 8002c78:	4605      	mov	r5, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	4616      	mov	r6, r2
 8002c7e:	d505      	bpl.n	8002c8c <__swrite+0x1e>
 8002c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c84:	2302      	movs	r3, #2
 8002c86:	2200      	movs	r2, #0
 8002c88:	f000 f83c 	bl	8002d04 <_lseek_r>
 8002c8c:	89a3      	ldrh	r3, [r4, #12]
 8002c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c96:	81a3      	strh	r3, [r4, #12]
 8002c98:	4632      	mov	r2, r6
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca2:	f000 b853 	b.w	8002d4c <_write_r>

08002ca6 <__sseek>:
 8002ca6:	b510      	push	{r4, lr}
 8002ca8:	460c      	mov	r4, r1
 8002caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cae:	f000 f829 	bl	8002d04 <_lseek_r>
 8002cb2:	1c43      	adds	r3, r0, #1
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	bf15      	itete	ne
 8002cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002cc2:	81a3      	strheq	r3, [r4, #12]
 8002cc4:	bf18      	it	ne
 8002cc6:	81a3      	strhne	r3, [r4, #12]
 8002cc8:	bd10      	pop	{r4, pc}

08002cca <__sclose>:
 8002cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cce:	f000 b809 	b.w	8002ce4 <_close_r>

08002cd2 <memset>:
 8002cd2:	4402      	add	r2, r0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d100      	bne.n	8002cdc <memset+0xa>
 8002cda:	4770      	bx	lr
 8002cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce0:	e7f9      	b.n	8002cd6 <memset+0x4>
	...

08002ce4 <_close_r>:
 8002ce4:	b538      	push	{r3, r4, r5, lr}
 8002ce6:	4d06      	ldr	r5, [pc, #24]	; (8002d00 <_close_r+0x1c>)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4604      	mov	r4, r0
 8002cec:	4608      	mov	r0, r1
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	f7fe f808 	bl	8000d04 <_close>
 8002cf4:	1c43      	adds	r3, r0, #1
 8002cf6:	d102      	bne.n	8002cfe <_close_r+0x1a>
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	b103      	cbz	r3, 8002cfe <_close_r+0x1a>
 8002cfc:	6023      	str	r3, [r4, #0]
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
 8002d00:	20000300 	.word	0x20000300

08002d04 <_lseek_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4d07      	ldr	r5, [pc, #28]	; (8002d24 <_lseek_r+0x20>)
 8002d08:	4604      	mov	r4, r0
 8002d0a:	4608      	mov	r0, r1
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	2200      	movs	r2, #0
 8002d10:	602a      	str	r2, [r5, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f7fd fff7 	bl	8000d06 <_lseek>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d102      	bne.n	8002d22 <_lseek_r+0x1e>
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	b103      	cbz	r3, 8002d22 <_lseek_r+0x1e>
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
 8002d24:	20000300 	.word	0x20000300

08002d28 <_read_r>:
 8002d28:	b538      	push	{r3, r4, r5, lr}
 8002d2a:	4d07      	ldr	r5, [pc, #28]	; (8002d48 <_read_r+0x20>)
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	4608      	mov	r0, r1
 8002d30:	4611      	mov	r1, r2
 8002d32:	2200      	movs	r2, #0
 8002d34:	602a      	str	r2, [r5, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f7fd ffd6 	bl	8000ce8 <_read>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d102      	bne.n	8002d46 <_read_r+0x1e>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b103      	cbz	r3, 8002d46 <_read_r+0x1e>
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	20000300 	.word	0x20000300

08002d4c <_write_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4d07      	ldr	r5, [pc, #28]	; (8002d6c <_write_r+0x20>)
 8002d50:	4604      	mov	r4, r0
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	602a      	str	r2, [r5, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7fd ffb8 	bl	8000cd0 <_write>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_write_r+0x1e>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_write_r+0x1e>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	20000300 	.word	0x20000300

08002d70 <__libc_init_array>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	4d0d      	ldr	r5, [pc, #52]	; (8002da8 <__libc_init_array+0x38>)
 8002d74:	4c0d      	ldr	r4, [pc, #52]	; (8002dac <__libc_init_array+0x3c>)
 8002d76:	1b64      	subs	r4, r4, r5
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	42a6      	cmp	r6, r4
 8002d7e:	d109      	bne.n	8002d94 <__libc_init_array+0x24>
 8002d80:	4d0b      	ldr	r5, [pc, #44]	; (8002db0 <__libc_init_array+0x40>)
 8002d82:	4c0c      	ldr	r4, [pc, #48]	; (8002db4 <__libc_init_array+0x44>)
 8002d84:	f000 fdd6 	bl	8003934 <_init>
 8002d88:	1b64      	subs	r4, r4, r5
 8002d8a:	10a4      	asrs	r4, r4, #2
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	42a6      	cmp	r6, r4
 8002d90:	d105      	bne.n	8002d9e <__libc_init_array+0x2e>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d98:	4798      	blx	r3
 8002d9a:	3601      	adds	r6, #1
 8002d9c:	e7ee      	b.n	8002d7c <__libc_init_array+0xc>
 8002d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da2:	4798      	blx	r3
 8002da4:	3601      	adds	r6, #1
 8002da6:	e7f2      	b.n	8002d8e <__libc_init_array+0x1e>
 8002da8:	08003a2c 	.word	0x08003a2c
 8002dac:	08003a2c 	.word	0x08003a2c
 8002db0:	08003a2c 	.word	0x08003a2c
 8002db4:	08003a30 	.word	0x08003a30

08002db8 <__retarget_lock_init_recursive>:
 8002db8:	4770      	bx	lr

08002dba <__retarget_lock_acquire_recursive>:
 8002dba:	4770      	bx	lr

08002dbc <__retarget_lock_release_recursive>:
 8002dbc:	4770      	bx	lr
	...

08002dc0 <_free_r>:
 8002dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dc2:	2900      	cmp	r1, #0
 8002dc4:	d044      	beq.n	8002e50 <_free_r+0x90>
 8002dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dca:	9001      	str	r0, [sp, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f1a1 0404 	sub.w	r4, r1, #4
 8002dd2:	bfb8      	it	lt
 8002dd4:	18e4      	addlt	r4, r4, r3
 8002dd6:	f000 f8e7 	bl	8002fa8 <__malloc_lock>
 8002dda:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <_free_r+0x94>)
 8002ddc:	9801      	ldr	r0, [sp, #4]
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	b933      	cbnz	r3, 8002df0 <_free_r+0x30>
 8002de2:	6063      	str	r3, [r4, #4]
 8002de4:	6014      	str	r4, [r2, #0]
 8002de6:	b003      	add	sp, #12
 8002de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dec:	f000 b8e2 	b.w	8002fb4 <__malloc_unlock>
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	d908      	bls.n	8002e06 <_free_r+0x46>
 8002df4:	6825      	ldr	r5, [r4, #0]
 8002df6:	1961      	adds	r1, r4, r5
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	bf01      	itttt	eq
 8002dfc:	6819      	ldreq	r1, [r3, #0]
 8002dfe:	685b      	ldreq	r3, [r3, #4]
 8002e00:	1949      	addeq	r1, r1, r5
 8002e02:	6021      	streq	r1, [r4, #0]
 8002e04:	e7ed      	b.n	8002de2 <_free_r+0x22>
 8002e06:	461a      	mov	r2, r3
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b10b      	cbz	r3, 8002e10 <_free_r+0x50>
 8002e0c:	42a3      	cmp	r3, r4
 8002e0e:	d9fa      	bls.n	8002e06 <_free_r+0x46>
 8002e10:	6811      	ldr	r1, [r2, #0]
 8002e12:	1855      	adds	r5, r2, r1
 8002e14:	42a5      	cmp	r5, r4
 8002e16:	d10b      	bne.n	8002e30 <_free_r+0x70>
 8002e18:	6824      	ldr	r4, [r4, #0]
 8002e1a:	4421      	add	r1, r4
 8002e1c:	1854      	adds	r4, r2, r1
 8002e1e:	42a3      	cmp	r3, r4
 8002e20:	6011      	str	r1, [r2, #0]
 8002e22:	d1e0      	bne.n	8002de6 <_free_r+0x26>
 8002e24:	681c      	ldr	r4, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	6053      	str	r3, [r2, #4]
 8002e2a:	440c      	add	r4, r1
 8002e2c:	6014      	str	r4, [r2, #0]
 8002e2e:	e7da      	b.n	8002de6 <_free_r+0x26>
 8002e30:	d902      	bls.n	8002e38 <_free_r+0x78>
 8002e32:	230c      	movs	r3, #12
 8002e34:	6003      	str	r3, [r0, #0]
 8002e36:	e7d6      	b.n	8002de6 <_free_r+0x26>
 8002e38:	6825      	ldr	r5, [r4, #0]
 8002e3a:	1961      	adds	r1, r4, r5
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	bf04      	itt	eq
 8002e40:	6819      	ldreq	r1, [r3, #0]
 8002e42:	685b      	ldreq	r3, [r3, #4]
 8002e44:	6063      	str	r3, [r4, #4]
 8002e46:	bf04      	itt	eq
 8002e48:	1949      	addeq	r1, r1, r5
 8002e4a:	6021      	streq	r1, [r4, #0]
 8002e4c:	6054      	str	r4, [r2, #4]
 8002e4e:	e7ca      	b.n	8002de6 <_free_r+0x26>
 8002e50:	b003      	add	sp, #12
 8002e52:	bd30      	pop	{r4, r5, pc}
 8002e54:	20000308 	.word	0x20000308

08002e58 <malloc>:
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <malloc+0xc>)
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	f000 b823 	b.w	8002ea8 <_malloc_r>
 8002e62:	bf00      	nop
 8002e64:	20000064 	.word	0x20000064

08002e68 <sbrk_aligned>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	4e0e      	ldr	r6, [pc, #56]	; (8002ea4 <sbrk_aligned+0x3c>)
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	6831      	ldr	r1, [r6, #0]
 8002e70:	4605      	mov	r5, r0
 8002e72:	b911      	cbnz	r1, 8002e7a <sbrk_aligned+0x12>
 8002e74:	f000 fd40 	bl	80038f8 <_sbrk_r>
 8002e78:	6030      	str	r0, [r6, #0]
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f000 fd3b 	bl	80038f8 <_sbrk_r>
 8002e82:	1c43      	adds	r3, r0, #1
 8002e84:	d00a      	beq.n	8002e9c <sbrk_aligned+0x34>
 8002e86:	1cc4      	adds	r4, r0, #3
 8002e88:	f024 0403 	bic.w	r4, r4, #3
 8002e8c:	42a0      	cmp	r0, r4
 8002e8e:	d007      	beq.n	8002ea0 <sbrk_aligned+0x38>
 8002e90:	1a21      	subs	r1, r4, r0
 8002e92:	4628      	mov	r0, r5
 8002e94:	f000 fd30 	bl	80038f8 <_sbrk_r>
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d101      	bne.n	8002ea0 <sbrk_aligned+0x38>
 8002e9c:	f04f 34ff 	mov.w	r4, #4294967295
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	2000030c 	.word	0x2000030c

08002ea8 <_malloc_r>:
 8002ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eac:	1ccd      	adds	r5, r1, #3
 8002eae:	f025 0503 	bic.w	r5, r5, #3
 8002eb2:	3508      	adds	r5, #8
 8002eb4:	2d0c      	cmp	r5, #12
 8002eb6:	bf38      	it	cc
 8002eb8:	250c      	movcc	r5, #12
 8002eba:	2d00      	cmp	r5, #0
 8002ebc:	4607      	mov	r7, r0
 8002ebe:	db01      	blt.n	8002ec4 <_malloc_r+0x1c>
 8002ec0:	42a9      	cmp	r1, r5
 8002ec2:	d905      	bls.n	8002ed0 <_malloc_r+0x28>
 8002ec4:	230c      	movs	r3, #12
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	2600      	movs	r6, #0
 8002eca:	4630      	mov	r0, r6
 8002ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ed0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002fa4 <_malloc_r+0xfc>
 8002ed4:	f000 f868 	bl	8002fa8 <__malloc_lock>
 8002ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8002edc:	461c      	mov	r4, r3
 8002ede:	bb5c      	cbnz	r4, 8002f38 <_malloc_r+0x90>
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	f7ff ffc0 	bl	8002e68 <sbrk_aligned>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	4604      	mov	r4, r0
 8002eec:	d155      	bne.n	8002f9a <_malloc_r+0xf2>
 8002eee:	f8d8 4000 	ldr.w	r4, [r8]
 8002ef2:	4626      	mov	r6, r4
 8002ef4:	2e00      	cmp	r6, #0
 8002ef6:	d145      	bne.n	8002f84 <_malloc_r+0xdc>
 8002ef8:	2c00      	cmp	r4, #0
 8002efa:	d048      	beq.n	8002f8e <_malloc_r+0xe6>
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	4631      	mov	r1, r6
 8002f00:	4638      	mov	r0, r7
 8002f02:	eb04 0903 	add.w	r9, r4, r3
 8002f06:	f000 fcf7 	bl	80038f8 <_sbrk_r>
 8002f0a:	4581      	cmp	r9, r0
 8002f0c:	d13f      	bne.n	8002f8e <_malloc_r+0xe6>
 8002f0e:	6821      	ldr	r1, [r4, #0]
 8002f10:	1a6d      	subs	r5, r5, r1
 8002f12:	4629      	mov	r1, r5
 8002f14:	4638      	mov	r0, r7
 8002f16:	f7ff ffa7 	bl	8002e68 <sbrk_aligned>
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d037      	beq.n	8002f8e <_malloc_r+0xe6>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	442b      	add	r3, r5
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	f8d8 3000 	ldr.w	r3, [r8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d038      	beq.n	8002f9e <_malloc_r+0xf6>
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	42a2      	cmp	r2, r4
 8002f30:	d12b      	bne.n	8002f8a <_malloc_r+0xe2>
 8002f32:	2200      	movs	r2, #0
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e00f      	b.n	8002f58 <_malloc_r+0xb0>
 8002f38:	6822      	ldr	r2, [r4, #0]
 8002f3a:	1b52      	subs	r2, r2, r5
 8002f3c:	d41f      	bmi.n	8002f7e <_malloc_r+0xd6>
 8002f3e:	2a0b      	cmp	r2, #11
 8002f40:	d917      	bls.n	8002f72 <_malloc_r+0xca>
 8002f42:	1961      	adds	r1, r4, r5
 8002f44:	42a3      	cmp	r3, r4
 8002f46:	6025      	str	r5, [r4, #0]
 8002f48:	bf18      	it	ne
 8002f4a:	6059      	strne	r1, [r3, #4]
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	bf08      	it	eq
 8002f50:	f8c8 1000 	streq.w	r1, [r8]
 8002f54:	5162      	str	r2, [r4, r5]
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	4638      	mov	r0, r7
 8002f5a:	f104 060b 	add.w	r6, r4, #11
 8002f5e:	f000 f829 	bl	8002fb4 <__malloc_unlock>
 8002f62:	f026 0607 	bic.w	r6, r6, #7
 8002f66:	1d23      	adds	r3, r4, #4
 8002f68:	1af2      	subs	r2, r6, r3
 8002f6a:	d0ae      	beq.n	8002eca <_malloc_r+0x22>
 8002f6c:	1b9b      	subs	r3, r3, r6
 8002f6e:	50a3      	str	r3, [r4, r2]
 8002f70:	e7ab      	b.n	8002eca <_malloc_r+0x22>
 8002f72:	42a3      	cmp	r3, r4
 8002f74:	6862      	ldr	r2, [r4, #4]
 8002f76:	d1dd      	bne.n	8002f34 <_malloc_r+0x8c>
 8002f78:	f8c8 2000 	str.w	r2, [r8]
 8002f7c:	e7ec      	b.n	8002f58 <_malloc_r+0xb0>
 8002f7e:	4623      	mov	r3, r4
 8002f80:	6864      	ldr	r4, [r4, #4]
 8002f82:	e7ac      	b.n	8002ede <_malloc_r+0x36>
 8002f84:	4634      	mov	r4, r6
 8002f86:	6876      	ldr	r6, [r6, #4]
 8002f88:	e7b4      	b.n	8002ef4 <_malloc_r+0x4c>
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	e7cc      	b.n	8002f28 <_malloc_r+0x80>
 8002f8e:	230c      	movs	r3, #12
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	4638      	mov	r0, r7
 8002f94:	f000 f80e 	bl	8002fb4 <__malloc_unlock>
 8002f98:	e797      	b.n	8002eca <_malloc_r+0x22>
 8002f9a:	6025      	str	r5, [r4, #0]
 8002f9c:	e7dc      	b.n	8002f58 <_malloc_r+0xb0>
 8002f9e:	605b      	str	r3, [r3, #4]
 8002fa0:	deff      	udf	#255	; 0xff
 8002fa2:	bf00      	nop
 8002fa4:	20000308 	.word	0x20000308

08002fa8 <__malloc_lock>:
 8002fa8:	4801      	ldr	r0, [pc, #4]	; (8002fb0 <__malloc_lock+0x8>)
 8002faa:	f7ff bf06 	b.w	8002dba <__retarget_lock_acquire_recursive>
 8002fae:	bf00      	nop
 8002fb0:	20000304 	.word	0x20000304

08002fb4 <__malloc_unlock>:
 8002fb4:	4801      	ldr	r0, [pc, #4]	; (8002fbc <__malloc_unlock+0x8>)
 8002fb6:	f7ff bf01 	b.w	8002dbc <__retarget_lock_release_recursive>
 8002fba:	bf00      	nop
 8002fbc:	20000304 	.word	0x20000304

08002fc0 <__sfputc_r>:
 8002fc0:	6893      	ldr	r3, [r2, #8]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	b410      	push	{r4}
 8002fc8:	6093      	str	r3, [r2, #8]
 8002fca:	da08      	bge.n	8002fde <__sfputc_r+0x1e>
 8002fcc:	6994      	ldr	r4, [r2, #24]
 8002fce:	42a3      	cmp	r3, r4
 8002fd0:	db01      	blt.n	8002fd6 <__sfputc_r+0x16>
 8002fd2:	290a      	cmp	r1, #10
 8002fd4:	d103      	bne.n	8002fde <__sfputc_r+0x1e>
 8002fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fda:	f000 bbd5 	b.w	8003788 <__swbuf_r>
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	1c58      	adds	r0, r3, #1
 8002fe2:	6010      	str	r0, [r2, #0]
 8002fe4:	7019      	strb	r1, [r3, #0]
 8002fe6:	4608      	mov	r0, r1
 8002fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <__sfputs_r>:
 8002fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff0:	4606      	mov	r6, r0
 8002ff2:	460f      	mov	r7, r1
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	18d5      	adds	r5, r2, r3
 8002ff8:	42ac      	cmp	r4, r5
 8002ffa:	d101      	bne.n	8003000 <__sfputs_r+0x12>
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	e007      	b.n	8003010 <__sfputs_r+0x22>
 8003000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003004:	463a      	mov	r2, r7
 8003006:	4630      	mov	r0, r6
 8003008:	f7ff ffda 	bl	8002fc0 <__sfputc_r>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	d1f3      	bne.n	8002ff8 <__sfputs_r+0xa>
 8003010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003014 <_vfiprintf_r>:
 8003014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003018:	460d      	mov	r5, r1
 800301a:	b09d      	sub	sp, #116	; 0x74
 800301c:	4614      	mov	r4, r2
 800301e:	4698      	mov	r8, r3
 8003020:	4606      	mov	r6, r0
 8003022:	b118      	cbz	r0, 800302c <_vfiprintf_r+0x18>
 8003024:	6a03      	ldr	r3, [r0, #32]
 8003026:	b90b      	cbnz	r3, 800302c <_vfiprintf_r+0x18>
 8003028:	f7ff fd12 	bl	8002a50 <__sinit>
 800302c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800302e:	07d9      	lsls	r1, r3, #31
 8003030:	d405      	bmi.n	800303e <_vfiprintf_r+0x2a>
 8003032:	89ab      	ldrh	r3, [r5, #12]
 8003034:	059a      	lsls	r2, r3, #22
 8003036:	d402      	bmi.n	800303e <_vfiprintf_r+0x2a>
 8003038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800303a:	f7ff febe 	bl	8002dba <__retarget_lock_acquire_recursive>
 800303e:	89ab      	ldrh	r3, [r5, #12]
 8003040:	071b      	lsls	r3, r3, #28
 8003042:	d501      	bpl.n	8003048 <_vfiprintf_r+0x34>
 8003044:	692b      	ldr	r3, [r5, #16]
 8003046:	b99b      	cbnz	r3, 8003070 <_vfiprintf_r+0x5c>
 8003048:	4629      	mov	r1, r5
 800304a:	4630      	mov	r0, r6
 800304c:	f000 fbda 	bl	8003804 <__swsetup_r>
 8003050:	b170      	cbz	r0, 8003070 <_vfiprintf_r+0x5c>
 8003052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003054:	07dc      	lsls	r4, r3, #31
 8003056:	d504      	bpl.n	8003062 <_vfiprintf_r+0x4e>
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	b01d      	add	sp, #116	; 0x74
 800305e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003062:	89ab      	ldrh	r3, [r5, #12]
 8003064:	0598      	lsls	r0, r3, #22
 8003066:	d4f7      	bmi.n	8003058 <_vfiprintf_r+0x44>
 8003068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800306a:	f7ff fea7 	bl	8002dbc <__retarget_lock_release_recursive>
 800306e:	e7f3      	b.n	8003058 <_vfiprintf_r+0x44>
 8003070:	2300      	movs	r3, #0
 8003072:	9309      	str	r3, [sp, #36]	; 0x24
 8003074:	2320      	movs	r3, #32
 8003076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800307a:	f8cd 800c 	str.w	r8, [sp, #12]
 800307e:	2330      	movs	r3, #48	; 0x30
 8003080:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003234 <_vfiprintf_r+0x220>
 8003084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003088:	f04f 0901 	mov.w	r9, #1
 800308c:	4623      	mov	r3, r4
 800308e:	469a      	mov	sl, r3
 8003090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003094:	b10a      	cbz	r2, 800309a <_vfiprintf_r+0x86>
 8003096:	2a25      	cmp	r2, #37	; 0x25
 8003098:	d1f9      	bne.n	800308e <_vfiprintf_r+0x7a>
 800309a:	ebba 0b04 	subs.w	fp, sl, r4
 800309e:	d00b      	beq.n	80030b8 <_vfiprintf_r+0xa4>
 80030a0:	465b      	mov	r3, fp
 80030a2:	4622      	mov	r2, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	4630      	mov	r0, r6
 80030a8:	f7ff ffa1 	bl	8002fee <__sfputs_r>
 80030ac:	3001      	adds	r0, #1
 80030ae:	f000 80a9 	beq.w	8003204 <_vfiprintf_r+0x1f0>
 80030b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030b4:	445a      	add	r2, fp
 80030b6:	9209      	str	r2, [sp, #36]	; 0x24
 80030b8:	f89a 3000 	ldrb.w	r3, [sl]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80a1 	beq.w	8003204 <_vfiprintf_r+0x1f0>
 80030c2:	2300      	movs	r3, #0
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030cc:	f10a 0a01 	add.w	sl, sl, #1
 80030d0:	9304      	str	r3, [sp, #16]
 80030d2:	9307      	str	r3, [sp, #28]
 80030d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030d8:	931a      	str	r3, [sp, #104]	; 0x68
 80030da:	4654      	mov	r4, sl
 80030dc:	2205      	movs	r2, #5
 80030de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030e2:	4854      	ldr	r0, [pc, #336]	; (8003234 <_vfiprintf_r+0x220>)
 80030e4:	f7fd f8ac 	bl	8000240 <memchr>
 80030e8:	9a04      	ldr	r2, [sp, #16]
 80030ea:	b9d8      	cbnz	r0, 8003124 <_vfiprintf_r+0x110>
 80030ec:	06d1      	lsls	r1, r2, #27
 80030ee:	bf44      	itt	mi
 80030f0:	2320      	movmi	r3, #32
 80030f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030f6:	0713      	lsls	r3, r2, #28
 80030f8:	bf44      	itt	mi
 80030fa:	232b      	movmi	r3, #43	; 0x2b
 80030fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003100:	f89a 3000 	ldrb.w	r3, [sl]
 8003104:	2b2a      	cmp	r3, #42	; 0x2a
 8003106:	d015      	beq.n	8003134 <_vfiprintf_r+0x120>
 8003108:	9a07      	ldr	r2, [sp, #28]
 800310a:	4654      	mov	r4, sl
 800310c:	2000      	movs	r0, #0
 800310e:	f04f 0c0a 	mov.w	ip, #10
 8003112:	4621      	mov	r1, r4
 8003114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003118:	3b30      	subs	r3, #48	; 0x30
 800311a:	2b09      	cmp	r3, #9
 800311c:	d94d      	bls.n	80031ba <_vfiprintf_r+0x1a6>
 800311e:	b1b0      	cbz	r0, 800314e <_vfiprintf_r+0x13a>
 8003120:	9207      	str	r2, [sp, #28]
 8003122:	e014      	b.n	800314e <_vfiprintf_r+0x13a>
 8003124:	eba0 0308 	sub.w	r3, r0, r8
 8003128:	fa09 f303 	lsl.w	r3, r9, r3
 800312c:	4313      	orrs	r3, r2
 800312e:	9304      	str	r3, [sp, #16]
 8003130:	46a2      	mov	sl, r4
 8003132:	e7d2      	b.n	80030da <_vfiprintf_r+0xc6>
 8003134:	9b03      	ldr	r3, [sp, #12]
 8003136:	1d19      	adds	r1, r3, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	9103      	str	r1, [sp, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	bfbb      	ittet	lt
 8003140:	425b      	neglt	r3, r3
 8003142:	f042 0202 	orrlt.w	r2, r2, #2
 8003146:	9307      	strge	r3, [sp, #28]
 8003148:	9307      	strlt	r3, [sp, #28]
 800314a:	bfb8      	it	lt
 800314c:	9204      	strlt	r2, [sp, #16]
 800314e:	7823      	ldrb	r3, [r4, #0]
 8003150:	2b2e      	cmp	r3, #46	; 0x2e
 8003152:	d10c      	bne.n	800316e <_vfiprintf_r+0x15a>
 8003154:	7863      	ldrb	r3, [r4, #1]
 8003156:	2b2a      	cmp	r3, #42	; 0x2a
 8003158:	d134      	bne.n	80031c4 <_vfiprintf_r+0x1b0>
 800315a:	9b03      	ldr	r3, [sp, #12]
 800315c:	1d1a      	adds	r2, r3, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	9203      	str	r2, [sp, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	bfb8      	it	lt
 8003166:	f04f 33ff 	movlt.w	r3, #4294967295
 800316a:	3402      	adds	r4, #2
 800316c:	9305      	str	r3, [sp, #20]
 800316e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003244 <_vfiprintf_r+0x230>
 8003172:	7821      	ldrb	r1, [r4, #0]
 8003174:	2203      	movs	r2, #3
 8003176:	4650      	mov	r0, sl
 8003178:	f7fd f862 	bl	8000240 <memchr>
 800317c:	b138      	cbz	r0, 800318e <_vfiprintf_r+0x17a>
 800317e:	9b04      	ldr	r3, [sp, #16]
 8003180:	eba0 000a 	sub.w	r0, r0, sl
 8003184:	2240      	movs	r2, #64	; 0x40
 8003186:	4082      	lsls	r2, r0
 8003188:	4313      	orrs	r3, r2
 800318a:	3401      	adds	r4, #1
 800318c:	9304      	str	r3, [sp, #16]
 800318e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003192:	4829      	ldr	r0, [pc, #164]	; (8003238 <_vfiprintf_r+0x224>)
 8003194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003198:	2206      	movs	r2, #6
 800319a:	f7fd f851 	bl	8000240 <memchr>
 800319e:	2800      	cmp	r0, #0
 80031a0:	d03f      	beq.n	8003222 <_vfiprintf_r+0x20e>
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <_vfiprintf_r+0x228>)
 80031a4:	bb1b      	cbnz	r3, 80031ee <_vfiprintf_r+0x1da>
 80031a6:	9b03      	ldr	r3, [sp, #12]
 80031a8:	3307      	adds	r3, #7
 80031aa:	f023 0307 	bic.w	r3, r3, #7
 80031ae:	3308      	adds	r3, #8
 80031b0:	9303      	str	r3, [sp, #12]
 80031b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031b4:	443b      	add	r3, r7
 80031b6:	9309      	str	r3, [sp, #36]	; 0x24
 80031b8:	e768      	b.n	800308c <_vfiprintf_r+0x78>
 80031ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80031be:	460c      	mov	r4, r1
 80031c0:	2001      	movs	r0, #1
 80031c2:	e7a6      	b.n	8003112 <_vfiprintf_r+0xfe>
 80031c4:	2300      	movs	r3, #0
 80031c6:	3401      	adds	r4, #1
 80031c8:	9305      	str	r3, [sp, #20]
 80031ca:	4619      	mov	r1, r3
 80031cc:	f04f 0c0a 	mov.w	ip, #10
 80031d0:	4620      	mov	r0, r4
 80031d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031d6:	3a30      	subs	r2, #48	; 0x30
 80031d8:	2a09      	cmp	r2, #9
 80031da:	d903      	bls.n	80031e4 <_vfiprintf_r+0x1d0>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0c6      	beq.n	800316e <_vfiprintf_r+0x15a>
 80031e0:	9105      	str	r1, [sp, #20]
 80031e2:	e7c4      	b.n	800316e <_vfiprintf_r+0x15a>
 80031e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80031e8:	4604      	mov	r4, r0
 80031ea:	2301      	movs	r3, #1
 80031ec:	e7f0      	b.n	80031d0 <_vfiprintf_r+0x1bc>
 80031ee:	ab03      	add	r3, sp, #12
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	462a      	mov	r2, r5
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <_vfiprintf_r+0x22c>)
 80031f6:	a904      	add	r1, sp, #16
 80031f8:	4630      	mov	r0, r6
 80031fa:	f3af 8000 	nop.w
 80031fe:	4607      	mov	r7, r0
 8003200:	1c78      	adds	r0, r7, #1
 8003202:	d1d6      	bne.n	80031b2 <_vfiprintf_r+0x19e>
 8003204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003206:	07d9      	lsls	r1, r3, #31
 8003208:	d405      	bmi.n	8003216 <_vfiprintf_r+0x202>
 800320a:	89ab      	ldrh	r3, [r5, #12]
 800320c:	059a      	lsls	r2, r3, #22
 800320e:	d402      	bmi.n	8003216 <_vfiprintf_r+0x202>
 8003210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003212:	f7ff fdd3 	bl	8002dbc <__retarget_lock_release_recursive>
 8003216:	89ab      	ldrh	r3, [r5, #12]
 8003218:	065b      	lsls	r3, r3, #25
 800321a:	f53f af1d 	bmi.w	8003058 <_vfiprintf_r+0x44>
 800321e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003220:	e71c      	b.n	800305c <_vfiprintf_r+0x48>
 8003222:	ab03      	add	r3, sp, #12
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	462a      	mov	r2, r5
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <_vfiprintf_r+0x22c>)
 800322a:	a904      	add	r1, sp, #16
 800322c:	4630      	mov	r0, r6
 800322e:	f000 f879 	bl	8003324 <_printf_i>
 8003232:	e7e4      	b.n	80031fe <_vfiprintf_r+0x1ea>
 8003234:	080039ee 	.word	0x080039ee
 8003238:	080039f8 	.word	0x080039f8
 800323c:	00000000 	.word	0x00000000
 8003240:	08002fef 	.word	0x08002fef
 8003244:	080039f4 	.word	0x080039f4

08003248 <_printf_common>:
 8003248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800324c:	4616      	mov	r6, r2
 800324e:	4699      	mov	r9, r3
 8003250:	688a      	ldr	r2, [r1, #8]
 8003252:	690b      	ldr	r3, [r1, #16]
 8003254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003258:	4293      	cmp	r3, r2
 800325a:	bfb8      	it	lt
 800325c:	4613      	movlt	r3, r2
 800325e:	6033      	str	r3, [r6, #0]
 8003260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003264:	4607      	mov	r7, r0
 8003266:	460c      	mov	r4, r1
 8003268:	b10a      	cbz	r2, 800326e <_printf_common+0x26>
 800326a:	3301      	adds	r3, #1
 800326c:	6033      	str	r3, [r6, #0]
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	0699      	lsls	r1, r3, #26
 8003272:	bf42      	ittt	mi
 8003274:	6833      	ldrmi	r3, [r6, #0]
 8003276:	3302      	addmi	r3, #2
 8003278:	6033      	strmi	r3, [r6, #0]
 800327a:	6825      	ldr	r5, [r4, #0]
 800327c:	f015 0506 	ands.w	r5, r5, #6
 8003280:	d106      	bne.n	8003290 <_printf_common+0x48>
 8003282:	f104 0a19 	add.w	sl, r4, #25
 8003286:	68e3      	ldr	r3, [r4, #12]
 8003288:	6832      	ldr	r2, [r6, #0]
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	42ab      	cmp	r3, r5
 800328e:	dc26      	bgt.n	80032de <_printf_common+0x96>
 8003290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003294:	1e13      	subs	r3, r2, #0
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	bf18      	it	ne
 800329a:	2301      	movne	r3, #1
 800329c:	0692      	lsls	r2, r2, #26
 800329e:	d42b      	bmi.n	80032f8 <_printf_common+0xb0>
 80032a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032a4:	4649      	mov	r1, r9
 80032a6:	4638      	mov	r0, r7
 80032a8:	47c0      	blx	r8
 80032aa:	3001      	adds	r0, #1
 80032ac:	d01e      	beq.n	80032ec <_printf_common+0xa4>
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	6922      	ldr	r2, [r4, #16]
 80032b2:	f003 0306 	and.w	r3, r3, #6
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	bf02      	ittt	eq
 80032ba:	68e5      	ldreq	r5, [r4, #12]
 80032bc:	6833      	ldreq	r3, [r6, #0]
 80032be:	1aed      	subeq	r5, r5, r3
 80032c0:	68a3      	ldr	r3, [r4, #8]
 80032c2:	bf0c      	ite	eq
 80032c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032c8:	2500      	movne	r5, #0
 80032ca:	4293      	cmp	r3, r2
 80032cc:	bfc4      	itt	gt
 80032ce:	1a9b      	subgt	r3, r3, r2
 80032d0:	18ed      	addgt	r5, r5, r3
 80032d2:	2600      	movs	r6, #0
 80032d4:	341a      	adds	r4, #26
 80032d6:	42b5      	cmp	r5, r6
 80032d8:	d11a      	bne.n	8003310 <_printf_common+0xc8>
 80032da:	2000      	movs	r0, #0
 80032dc:	e008      	b.n	80032f0 <_printf_common+0xa8>
 80032de:	2301      	movs	r3, #1
 80032e0:	4652      	mov	r2, sl
 80032e2:	4649      	mov	r1, r9
 80032e4:	4638      	mov	r0, r7
 80032e6:	47c0      	blx	r8
 80032e8:	3001      	adds	r0, #1
 80032ea:	d103      	bne.n	80032f4 <_printf_common+0xac>
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f4:	3501      	adds	r5, #1
 80032f6:	e7c6      	b.n	8003286 <_printf_common+0x3e>
 80032f8:	18e1      	adds	r1, r4, r3
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	2030      	movs	r0, #48	; 0x30
 80032fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003302:	4422      	add	r2, r4
 8003304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800330c:	3302      	adds	r3, #2
 800330e:	e7c7      	b.n	80032a0 <_printf_common+0x58>
 8003310:	2301      	movs	r3, #1
 8003312:	4622      	mov	r2, r4
 8003314:	4649      	mov	r1, r9
 8003316:	4638      	mov	r0, r7
 8003318:	47c0      	blx	r8
 800331a:	3001      	adds	r0, #1
 800331c:	d0e6      	beq.n	80032ec <_printf_common+0xa4>
 800331e:	3601      	adds	r6, #1
 8003320:	e7d9      	b.n	80032d6 <_printf_common+0x8e>
	...

08003324 <_printf_i>:
 8003324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003328:	7e0f      	ldrb	r7, [r1, #24]
 800332a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800332c:	2f78      	cmp	r7, #120	; 0x78
 800332e:	4691      	mov	r9, r2
 8003330:	4680      	mov	r8, r0
 8003332:	460c      	mov	r4, r1
 8003334:	469a      	mov	sl, r3
 8003336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800333a:	d807      	bhi.n	800334c <_printf_i+0x28>
 800333c:	2f62      	cmp	r7, #98	; 0x62
 800333e:	d80a      	bhi.n	8003356 <_printf_i+0x32>
 8003340:	2f00      	cmp	r7, #0
 8003342:	f000 80d4 	beq.w	80034ee <_printf_i+0x1ca>
 8003346:	2f58      	cmp	r7, #88	; 0x58
 8003348:	f000 80c0 	beq.w	80034cc <_printf_i+0x1a8>
 800334c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003354:	e03a      	b.n	80033cc <_printf_i+0xa8>
 8003356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800335a:	2b15      	cmp	r3, #21
 800335c:	d8f6      	bhi.n	800334c <_printf_i+0x28>
 800335e:	a101      	add	r1, pc, #4	; (adr r1, 8003364 <_printf_i+0x40>)
 8003360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003364:	080033bd 	.word	0x080033bd
 8003368:	080033d1 	.word	0x080033d1
 800336c:	0800334d 	.word	0x0800334d
 8003370:	0800334d 	.word	0x0800334d
 8003374:	0800334d 	.word	0x0800334d
 8003378:	0800334d 	.word	0x0800334d
 800337c:	080033d1 	.word	0x080033d1
 8003380:	0800334d 	.word	0x0800334d
 8003384:	0800334d 	.word	0x0800334d
 8003388:	0800334d 	.word	0x0800334d
 800338c:	0800334d 	.word	0x0800334d
 8003390:	080034d5 	.word	0x080034d5
 8003394:	080033fd 	.word	0x080033fd
 8003398:	0800348f 	.word	0x0800348f
 800339c:	0800334d 	.word	0x0800334d
 80033a0:	0800334d 	.word	0x0800334d
 80033a4:	080034f7 	.word	0x080034f7
 80033a8:	0800334d 	.word	0x0800334d
 80033ac:	080033fd 	.word	0x080033fd
 80033b0:	0800334d 	.word	0x0800334d
 80033b4:	0800334d 	.word	0x0800334d
 80033b8:	08003497 	.word	0x08003497
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	602a      	str	r2, [r5, #0]
 80033c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033cc:	2301      	movs	r3, #1
 80033ce:	e09f      	b.n	8003510 <_printf_i+0x1ec>
 80033d0:	6820      	ldr	r0, [r4, #0]
 80033d2:	682b      	ldr	r3, [r5, #0]
 80033d4:	0607      	lsls	r7, r0, #24
 80033d6:	f103 0104 	add.w	r1, r3, #4
 80033da:	6029      	str	r1, [r5, #0]
 80033dc:	d501      	bpl.n	80033e2 <_printf_i+0xbe>
 80033de:	681e      	ldr	r6, [r3, #0]
 80033e0:	e003      	b.n	80033ea <_printf_i+0xc6>
 80033e2:	0646      	lsls	r6, r0, #25
 80033e4:	d5fb      	bpl.n	80033de <_printf_i+0xba>
 80033e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033ea:	2e00      	cmp	r6, #0
 80033ec:	da03      	bge.n	80033f6 <_printf_i+0xd2>
 80033ee:	232d      	movs	r3, #45	; 0x2d
 80033f0:	4276      	negs	r6, r6
 80033f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033f6:	485a      	ldr	r0, [pc, #360]	; (8003560 <_printf_i+0x23c>)
 80033f8:	230a      	movs	r3, #10
 80033fa:	e012      	b.n	8003422 <_printf_i+0xfe>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	1d19      	adds	r1, r3, #4
 8003402:	6029      	str	r1, [r5, #0]
 8003404:	0605      	lsls	r5, r0, #24
 8003406:	d501      	bpl.n	800340c <_printf_i+0xe8>
 8003408:	681e      	ldr	r6, [r3, #0]
 800340a:	e002      	b.n	8003412 <_printf_i+0xee>
 800340c:	0641      	lsls	r1, r0, #25
 800340e:	d5fb      	bpl.n	8003408 <_printf_i+0xe4>
 8003410:	881e      	ldrh	r6, [r3, #0]
 8003412:	4853      	ldr	r0, [pc, #332]	; (8003560 <_printf_i+0x23c>)
 8003414:	2f6f      	cmp	r7, #111	; 0x6f
 8003416:	bf0c      	ite	eq
 8003418:	2308      	moveq	r3, #8
 800341a:	230a      	movne	r3, #10
 800341c:	2100      	movs	r1, #0
 800341e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003422:	6865      	ldr	r5, [r4, #4]
 8003424:	60a5      	str	r5, [r4, #8]
 8003426:	2d00      	cmp	r5, #0
 8003428:	bfa2      	ittt	ge
 800342a:	6821      	ldrge	r1, [r4, #0]
 800342c:	f021 0104 	bicge.w	r1, r1, #4
 8003430:	6021      	strge	r1, [r4, #0]
 8003432:	b90e      	cbnz	r6, 8003438 <_printf_i+0x114>
 8003434:	2d00      	cmp	r5, #0
 8003436:	d04b      	beq.n	80034d0 <_printf_i+0x1ac>
 8003438:	4615      	mov	r5, r2
 800343a:	fbb6 f1f3 	udiv	r1, r6, r3
 800343e:	fb03 6711 	mls	r7, r3, r1, r6
 8003442:	5dc7      	ldrb	r7, [r0, r7]
 8003444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003448:	4637      	mov	r7, r6
 800344a:	42bb      	cmp	r3, r7
 800344c:	460e      	mov	r6, r1
 800344e:	d9f4      	bls.n	800343a <_printf_i+0x116>
 8003450:	2b08      	cmp	r3, #8
 8003452:	d10b      	bne.n	800346c <_printf_i+0x148>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	07de      	lsls	r6, r3, #31
 8003458:	d508      	bpl.n	800346c <_printf_i+0x148>
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	6861      	ldr	r1, [r4, #4]
 800345e:	4299      	cmp	r1, r3
 8003460:	bfde      	ittt	le
 8003462:	2330      	movle	r3, #48	; 0x30
 8003464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800346c:	1b52      	subs	r2, r2, r5
 800346e:	6122      	str	r2, [r4, #16]
 8003470:	f8cd a000 	str.w	sl, [sp]
 8003474:	464b      	mov	r3, r9
 8003476:	aa03      	add	r2, sp, #12
 8003478:	4621      	mov	r1, r4
 800347a:	4640      	mov	r0, r8
 800347c:	f7ff fee4 	bl	8003248 <_printf_common>
 8003480:	3001      	adds	r0, #1
 8003482:	d14a      	bne.n	800351a <_printf_i+0x1f6>
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	b004      	add	sp, #16
 800348a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	f043 0320 	orr.w	r3, r3, #32
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	4833      	ldr	r0, [pc, #204]	; (8003564 <_printf_i+0x240>)
 8003498:	2778      	movs	r7, #120	; 0x78
 800349a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	6829      	ldr	r1, [r5, #0]
 80034a2:	061f      	lsls	r7, r3, #24
 80034a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80034a8:	d402      	bmi.n	80034b0 <_printf_i+0x18c>
 80034aa:	065f      	lsls	r7, r3, #25
 80034ac:	bf48      	it	mi
 80034ae:	b2b6      	uxthmi	r6, r6
 80034b0:	07df      	lsls	r7, r3, #31
 80034b2:	bf48      	it	mi
 80034b4:	f043 0320 	orrmi.w	r3, r3, #32
 80034b8:	6029      	str	r1, [r5, #0]
 80034ba:	bf48      	it	mi
 80034bc:	6023      	strmi	r3, [r4, #0]
 80034be:	b91e      	cbnz	r6, 80034c8 <_printf_i+0x1a4>
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	f023 0320 	bic.w	r3, r3, #32
 80034c6:	6023      	str	r3, [r4, #0]
 80034c8:	2310      	movs	r3, #16
 80034ca:	e7a7      	b.n	800341c <_printf_i+0xf8>
 80034cc:	4824      	ldr	r0, [pc, #144]	; (8003560 <_printf_i+0x23c>)
 80034ce:	e7e4      	b.n	800349a <_printf_i+0x176>
 80034d0:	4615      	mov	r5, r2
 80034d2:	e7bd      	b.n	8003450 <_printf_i+0x12c>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	6826      	ldr	r6, [r4, #0]
 80034d8:	6961      	ldr	r1, [r4, #20]
 80034da:	1d18      	adds	r0, r3, #4
 80034dc:	6028      	str	r0, [r5, #0]
 80034de:	0635      	lsls	r5, r6, #24
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	d501      	bpl.n	80034e8 <_printf_i+0x1c4>
 80034e4:	6019      	str	r1, [r3, #0]
 80034e6:	e002      	b.n	80034ee <_printf_i+0x1ca>
 80034e8:	0670      	lsls	r0, r6, #25
 80034ea:	d5fb      	bpl.n	80034e4 <_printf_i+0x1c0>
 80034ec:	8019      	strh	r1, [r3, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	4615      	mov	r5, r2
 80034f4:	e7bc      	b.n	8003470 <_printf_i+0x14c>
 80034f6:	682b      	ldr	r3, [r5, #0]
 80034f8:	1d1a      	adds	r2, r3, #4
 80034fa:	602a      	str	r2, [r5, #0]
 80034fc:	681d      	ldr	r5, [r3, #0]
 80034fe:	6862      	ldr	r2, [r4, #4]
 8003500:	2100      	movs	r1, #0
 8003502:	4628      	mov	r0, r5
 8003504:	f7fc fe9c 	bl	8000240 <memchr>
 8003508:	b108      	cbz	r0, 800350e <_printf_i+0x1ea>
 800350a:	1b40      	subs	r0, r0, r5
 800350c:	6060      	str	r0, [r4, #4]
 800350e:	6863      	ldr	r3, [r4, #4]
 8003510:	6123      	str	r3, [r4, #16]
 8003512:	2300      	movs	r3, #0
 8003514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003518:	e7aa      	b.n	8003470 <_printf_i+0x14c>
 800351a:	6923      	ldr	r3, [r4, #16]
 800351c:	462a      	mov	r2, r5
 800351e:	4649      	mov	r1, r9
 8003520:	4640      	mov	r0, r8
 8003522:	47d0      	blx	sl
 8003524:	3001      	adds	r0, #1
 8003526:	d0ad      	beq.n	8003484 <_printf_i+0x160>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	079b      	lsls	r3, r3, #30
 800352c:	d413      	bmi.n	8003556 <_printf_i+0x232>
 800352e:	68e0      	ldr	r0, [r4, #12]
 8003530:	9b03      	ldr	r3, [sp, #12]
 8003532:	4298      	cmp	r0, r3
 8003534:	bfb8      	it	lt
 8003536:	4618      	movlt	r0, r3
 8003538:	e7a6      	b.n	8003488 <_printf_i+0x164>
 800353a:	2301      	movs	r3, #1
 800353c:	4632      	mov	r2, r6
 800353e:	4649      	mov	r1, r9
 8003540:	4640      	mov	r0, r8
 8003542:	47d0      	blx	sl
 8003544:	3001      	adds	r0, #1
 8003546:	d09d      	beq.n	8003484 <_printf_i+0x160>
 8003548:	3501      	adds	r5, #1
 800354a:	68e3      	ldr	r3, [r4, #12]
 800354c:	9903      	ldr	r1, [sp, #12]
 800354e:	1a5b      	subs	r3, r3, r1
 8003550:	42ab      	cmp	r3, r5
 8003552:	dcf2      	bgt.n	800353a <_printf_i+0x216>
 8003554:	e7eb      	b.n	800352e <_printf_i+0x20a>
 8003556:	2500      	movs	r5, #0
 8003558:	f104 0619 	add.w	r6, r4, #25
 800355c:	e7f5      	b.n	800354a <_printf_i+0x226>
 800355e:	bf00      	nop
 8003560:	080039ff 	.word	0x080039ff
 8003564:	08003a10 	.word	0x08003a10

08003568 <__sflush_r>:
 8003568:	898a      	ldrh	r2, [r1, #12]
 800356a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800356e:	4605      	mov	r5, r0
 8003570:	0710      	lsls	r0, r2, #28
 8003572:	460c      	mov	r4, r1
 8003574:	d458      	bmi.n	8003628 <__sflush_r+0xc0>
 8003576:	684b      	ldr	r3, [r1, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	dc05      	bgt.n	8003588 <__sflush_r+0x20>
 800357c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	dc02      	bgt.n	8003588 <__sflush_r+0x20>
 8003582:	2000      	movs	r0, #0
 8003584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800358a:	2e00      	cmp	r6, #0
 800358c:	d0f9      	beq.n	8003582 <__sflush_r+0x1a>
 800358e:	2300      	movs	r3, #0
 8003590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003594:	682f      	ldr	r7, [r5, #0]
 8003596:	6a21      	ldr	r1, [r4, #32]
 8003598:	602b      	str	r3, [r5, #0]
 800359a:	d032      	beq.n	8003602 <__sflush_r+0x9a>
 800359c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	075a      	lsls	r2, r3, #29
 80035a2:	d505      	bpl.n	80035b0 <__sflush_r+0x48>
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	1ac0      	subs	r0, r0, r3
 80035a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035aa:	b10b      	cbz	r3, 80035b0 <__sflush_r+0x48>
 80035ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035ae:	1ac0      	subs	r0, r0, r3
 80035b0:	2300      	movs	r3, #0
 80035b2:	4602      	mov	r2, r0
 80035b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035b6:	6a21      	ldr	r1, [r4, #32]
 80035b8:	4628      	mov	r0, r5
 80035ba:	47b0      	blx	r6
 80035bc:	1c43      	adds	r3, r0, #1
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	d106      	bne.n	80035d0 <__sflush_r+0x68>
 80035c2:	6829      	ldr	r1, [r5, #0]
 80035c4:	291d      	cmp	r1, #29
 80035c6:	d82b      	bhi.n	8003620 <__sflush_r+0xb8>
 80035c8:	4a29      	ldr	r2, [pc, #164]	; (8003670 <__sflush_r+0x108>)
 80035ca:	410a      	asrs	r2, r1
 80035cc:	07d6      	lsls	r6, r2, #31
 80035ce:	d427      	bmi.n	8003620 <__sflush_r+0xb8>
 80035d0:	2200      	movs	r2, #0
 80035d2:	6062      	str	r2, [r4, #4]
 80035d4:	04d9      	lsls	r1, r3, #19
 80035d6:	6922      	ldr	r2, [r4, #16]
 80035d8:	6022      	str	r2, [r4, #0]
 80035da:	d504      	bpl.n	80035e6 <__sflush_r+0x7e>
 80035dc:	1c42      	adds	r2, r0, #1
 80035de:	d101      	bne.n	80035e4 <__sflush_r+0x7c>
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	b903      	cbnz	r3, 80035e6 <__sflush_r+0x7e>
 80035e4:	6560      	str	r0, [r4, #84]	; 0x54
 80035e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035e8:	602f      	str	r7, [r5, #0]
 80035ea:	2900      	cmp	r1, #0
 80035ec:	d0c9      	beq.n	8003582 <__sflush_r+0x1a>
 80035ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035f2:	4299      	cmp	r1, r3
 80035f4:	d002      	beq.n	80035fc <__sflush_r+0x94>
 80035f6:	4628      	mov	r0, r5
 80035f8:	f7ff fbe2 	bl	8002dc0 <_free_r>
 80035fc:	2000      	movs	r0, #0
 80035fe:	6360      	str	r0, [r4, #52]	; 0x34
 8003600:	e7c0      	b.n	8003584 <__sflush_r+0x1c>
 8003602:	2301      	movs	r3, #1
 8003604:	4628      	mov	r0, r5
 8003606:	47b0      	blx	r6
 8003608:	1c41      	adds	r1, r0, #1
 800360a:	d1c8      	bne.n	800359e <__sflush_r+0x36>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0c5      	beq.n	800359e <__sflush_r+0x36>
 8003612:	2b1d      	cmp	r3, #29
 8003614:	d001      	beq.n	800361a <__sflush_r+0xb2>
 8003616:	2b16      	cmp	r3, #22
 8003618:	d101      	bne.n	800361e <__sflush_r+0xb6>
 800361a:	602f      	str	r7, [r5, #0]
 800361c:	e7b1      	b.n	8003582 <__sflush_r+0x1a>
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	e7ad      	b.n	8003584 <__sflush_r+0x1c>
 8003628:	690f      	ldr	r7, [r1, #16]
 800362a:	2f00      	cmp	r7, #0
 800362c:	d0a9      	beq.n	8003582 <__sflush_r+0x1a>
 800362e:	0793      	lsls	r3, r2, #30
 8003630:	680e      	ldr	r6, [r1, #0]
 8003632:	bf08      	it	eq
 8003634:	694b      	ldreq	r3, [r1, #20]
 8003636:	600f      	str	r7, [r1, #0]
 8003638:	bf18      	it	ne
 800363a:	2300      	movne	r3, #0
 800363c:	eba6 0807 	sub.w	r8, r6, r7
 8003640:	608b      	str	r3, [r1, #8]
 8003642:	f1b8 0f00 	cmp.w	r8, #0
 8003646:	dd9c      	ble.n	8003582 <__sflush_r+0x1a>
 8003648:	6a21      	ldr	r1, [r4, #32]
 800364a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800364c:	4643      	mov	r3, r8
 800364e:	463a      	mov	r2, r7
 8003650:	4628      	mov	r0, r5
 8003652:	47b0      	blx	r6
 8003654:	2800      	cmp	r0, #0
 8003656:	dc06      	bgt.n	8003666 <__sflush_r+0xfe>
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800365e:	81a3      	strh	r3, [r4, #12]
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	e78e      	b.n	8003584 <__sflush_r+0x1c>
 8003666:	4407      	add	r7, r0
 8003668:	eba8 0800 	sub.w	r8, r8, r0
 800366c:	e7e9      	b.n	8003642 <__sflush_r+0xda>
 800366e:	bf00      	nop
 8003670:	dfbffffe 	.word	0xdfbffffe

08003674 <_fflush_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	690b      	ldr	r3, [r1, #16]
 8003678:	4605      	mov	r5, r0
 800367a:	460c      	mov	r4, r1
 800367c:	b913      	cbnz	r3, 8003684 <_fflush_r+0x10>
 800367e:	2500      	movs	r5, #0
 8003680:	4628      	mov	r0, r5
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	b118      	cbz	r0, 800368e <_fflush_r+0x1a>
 8003686:	6a03      	ldr	r3, [r0, #32]
 8003688:	b90b      	cbnz	r3, 800368e <_fflush_r+0x1a>
 800368a:	f7ff f9e1 	bl	8002a50 <__sinit>
 800368e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f3      	beq.n	800367e <_fflush_r+0xa>
 8003696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003698:	07d0      	lsls	r0, r2, #31
 800369a:	d404      	bmi.n	80036a6 <_fflush_r+0x32>
 800369c:	0599      	lsls	r1, r3, #22
 800369e:	d402      	bmi.n	80036a6 <_fflush_r+0x32>
 80036a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a2:	f7ff fb8a 	bl	8002dba <__retarget_lock_acquire_recursive>
 80036a6:	4628      	mov	r0, r5
 80036a8:	4621      	mov	r1, r4
 80036aa:	f7ff ff5d 	bl	8003568 <__sflush_r>
 80036ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036b0:	07da      	lsls	r2, r3, #31
 80036b2:	4605      	mov	r5, r0
 80036b4:	d4e4      	bmi.n	8003680 <_fflush_r+0xc>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	059b      	lsls	r3, r3, #22
 80036ba:	d4e1      	bmi.n	8003680 <_fflush_r+0xc>
 80036bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036be:	f7ff fb7d 	bl	8002dbc <__retarget_lock_release_recursive>
 80036c2:	e7dd      	b.n	8003680 <_fflush_r+0xc>

080036c4 <__swhatbuf_r>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	460c      	mov	r4, r1
 80036c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036cc:	2900      	cmp	r1, #0
 80036ce:	b096      	sub	sp, #88	; 0x58
 80036d0:	4615      	mov	r5, r2
 80036d2:	461e      	mov	r6, r3
 80036d4:	da0d      	bge.n	80036f2 <__swhatbuf_r+0x2e>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	bf0c      	ite	eq
 80036e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80036e6:	2340      	movne	r3, #64	; 0x40
 80036e8:	2000      	movs	r0, #0
 80036ea:	6031      	str	r1, [r6, #0]
 80036ec:	602b      	str	r3, [r5, #0]
 80036ee:	b016      	add	sp, #88	; 0x58
 80036f0:	bd70      	pop	{r4, r5, r6, pc}
 80036f2:	466a      	mov	r2, sp
 80036f4:	f000 f8de 	bl	80038b4 <_fstat_r>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	dbec      	blt.n	80036d6 <__swhatbuf_r+0x12>
 80036fc:	9901      	ldr	r1, [sp, #4]
 80036fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003702:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003706:	4259      	negs	r1, r3
 8003708:	4159      	adcs	r1, r3
 800370a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800370e:	e7eb      	b.n	80036e8 <__swhatbuf_r+0x24>

08003710 <__smakebuf_r>:
 8003710:	898b      	ldrh	r3, [r1, #12]
 8003712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003714:	079d      	lsls	r5, r3, #30
 8003716:	4606      	mov	r6, r0
 8003718:	460c      	mov	r4, r1
 800371a:	d507      	bpl.n	800372c <__smakebuf_r+0x1c>
 800371c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	6123      	str	r3, [r4, #16]
 8003724:	2301      	movs	r3, #1
 8003726:	6163      	str	r3, [r4, #20]
 8003728:	b002      	add	sp, #8
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	ab01      	add	r3, sp, #4
 800372e:	466a      	mov	r2, sp
 8003730:	f7ff ffc8 	bl	80036c4 <__swhatbuf_r>
 8003734:	9900      	ldr	r1, [sp, #0]
 8003736:	4605      	mov	r5, r0
 8003738:	4630      	mov	r0, r6
 800373a:	f7ff fbb5 	bl	8002ea8 <_malloc_r>
 800373e:	b948      	cbnz	r0, 8003754 <__smakebuf_r+0x44>
 8003740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003744:	059a      	lsls	r2, r3, #22
 8003746:	d4ef      	bmi.n	8003728 <__smakebuf_r+0x18>
 8003748:	f023 0303 	bic.w	r3, r3, #3
 800374c:	f043 0302 	orr.w	r3, r3, #2
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	e7e3      	b.n	800371c <__smakebuf_r+0xc>
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	6020      	str	r0, [r4, #0]
 8003758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375c:	81a3      	strh	r3, [r4, #12]
 800375e:	9b00      	ldr	r3, [sp, #0]
 8003760:	6163      	str	r3, [r4, #20]
 8003762:	9b01      	ldr	r3, [sp, #4]
 8003764:	6120      	str	r0, [r4, #16]
 8003766:	b15b      	cbz	r3, 8003780 <__smakebuf_r+0x70>
 8003768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800376c:	4630      	mov	r0, r6
 800376e:	f000 f8b3 	bl	80038d8 <_isatty_r>
 8003772:	b128      	cbz	r0, 8003780 <__smakebuf_r+0x70>
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	81a3      	strh	r3, [r4, #12]
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	431d      	orrs	r5, r3
 8003784:	81a5      	strh	r5, [r4, #12]
 8003786:	e7cf      	b.n	8003728 <__smakebuf_r+0x18>

08003788 <__swbuf_r>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	460e      	mov	r6, r1
 800378c:	4614      	mov	r4, r2
 800378e:	4605      	mov	r5, r0
 8003790:	b118      	cbz	r0, 800379a <__swbuf_r+0x12>
 8003792:	6a03      	ldr	r3, [r0, #32]
 8003794:	b90b      	cbnz	r3, 800379a <__swbuf_r+0x12>
 8003796:	f7ff f95b 	bl	8002a50 <__sinit>
 800379a:	69a3      	ldr	r3, [r4, #24]
 800379c:	60a3      	str	r3, [r4, #8]
 800379e:	89a3      	ldrh	r3, [r4, #12]
 80037a0:	071a      	lsls	r2, r3, #28
 80037a2:	d525      	bpl.n	80037f0 <__swbuf_r+0x68>
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	b31b      	cbz	r3, 80037f0 <__swbuf_r+0x68>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	6922      	ldr	r2, [r4, #16]
 80037ac:	1a98      	subs	r0, r3, r2
 80037ae:	6963      	ldr	r3, [r4, #20]
 80037b0:	b2f6      	uxtb	r6, r6
 80037b2:	4283      	cmp	r3, r0
 80037b4:	4637      	mov	r7, r6
 80037b6:	dc04      	bgt.n	80037c2 <__swbuf_r+0x3a>
 80037b8:	4621      	mov	r1, r4
 80037ba:	4628      	mov	r0, r5
 80037bc:	f7ff ff5a 	bl	8003674 <_fflush_r>
 80037c0:	b9e0      	cbnz	r0, 80037fc <__swbuf_r+0x74>
 80037c2:	68a3      	ldr	r3, [r4, #8]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	60a3      	str	r3, [r4, #8]
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	6022      	str	r2, [r4, #0]
 80037ce:	701e      	strb	r6, [r3, #0]
 80037d0:	6962      	ldr	r2, [r4, #20]
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d004      	beq.n	80037e2 <__swbuf_r+0x5a>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	07db      	lsls	r3, r3, #31
 80037dc:	d506      	bpl.n	80037ec <__swbuf_r+0x64>
 80037de:	2e0a      	cmp	r6, #10
 80037e0:	d104      	bne.n	80037ec <__swbuf_r+0x64>
 80037e2:	4621      	mov	r1, r4
 80037e4:	4628      	mov	r0, r5
 80037e6:	f7ff ff45 	bl	8003674 <_fflush_r>
 80037ea:	b938      	cbnz	r0, 80037fc <__swbuf_r+0x74>
 80037ec:	4638      	mov	r0, r7
 80037ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f0:	4621      	mov	r1, r4
 80037f2:	4628      	mov	r0, r5
 80037f4:	f000 f806 	bl	8003804 <__swsetup_r>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d0d5      	beq.n	80037a8 <__swbuf_r+0x20>
 80037fc:	f04f 37ff 	mov.w	r7, #4294967295
 8003800:	e7f4      	b.n	80037ec <__swbuf_r+0x64>
	...

08003804 <__swsetup_r>:
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <__swsetup_r+0xac>)
 8003808:	4605      	mov	r5, r0
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	460c      	mov	r4, r1
 800380e:	b118      	cbz	r0, 8003818 <__swsetup_r+0x14>
 8003810:	6a03      	ldr	r3, [r0, #32]
 8003812:	b90b      	cbnz	r3, 8003818 <__swsetup_r+0x14>
 8003814:	f7ff f91c 	bl	8002a50 <__sinit>
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800381e:	0718      	lsls	r0, r3, #28
 8003820:	d422      	bmi.n	8003868 <__swsetup_r+0x64>
 8003822:	06d9      	lsls	r1, r3, #27
 8003824:	d407      	bmi.n	8003836 <__swsetup_r+0x32>
 8003826:	2309      	movs	r3, #9
 8003828:	602b      	str	r3, [r5, #0]
 800382a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800382e:	81a3      	strh	r3, [r4, #12]
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	e034      	b.n	80038a0 <__swsetup_r+0x9c>
 8003836:	0758      	lsls	r0, r3, #29
 8003838:	d512      	bpl.n	8003860 <__swsetup_r+0x5c>
 800383a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800383c:	b141      	cbz	r1, 8003850 <__swsetup_r+0x4c>
 800383e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003842:	4299      	cmp	r1, r3
 8003844:	d002      	beq.n	800384c <__swsetup_r+0x48>
 8003846:	4628      	mov	r0, r5
 8003848:	f7ff faba 	bl	8002dc0 <_free_r>
 800384c:	2300      	movs	r3, #0
 800384e:	6363      	str	r3, [r4, #52]	; 0x34
 8003850:	89a3      	ldrh	r3, [r4, #12]
 8003852:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003856:	81a3      	strh	r3, [r4, #12]
 8003858:	2300      	movs	r3, #0
 800385a:	6063      	str	r3, [r4, #4]
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	6023      	str	r3, [r4, #0]
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	f043 0308 	orr.w	r3, r3, #8
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	b94b      	cbnz	r3, 8003880 <__swsetup_r+0x7c>
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003876:	d003      	beq.n	8003880 <__swsetup_r+0x7c>
 8003878:	4621      	mov	r1, r4
 800387a:	4628      	mov	r0, r5
 800387c:	f7ff ff48 	bl	8003710 <__smakebuf_r>
 8003880:	89a0      	ldrh	r0, [r4, #12]
 8003882:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003886:	f010 0301 	ands.w	r3, r0, #1
 800388a:	d00a      	beq.n	80038a2 <__swsetup_r+0x9e>
 800388c:	2300      	movs	r3, #0
 800388e:	60a3      	str	r3, [r4, #8]
 8003890:	6963      	ldr	r3, [r4, #20]
 8003892:	425b      	negs	r3, r3
 8003894:	61a3      	str	r3, [r4, #24]
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	b943      	cbnz	r3, 80038ac <__swsetup_r+0xa8>
 800389a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800389e:	d1c4      	bne.n	800382a <__swsetup_r+0x26>
 80038a0:	bd38      	pop	{r3, r4, r5, pc}
 80038a2:	0781      	lsls	r1, r0, #30
 80038a4:	bf58      	it	pl
 80038a6:	6963      	ldrpl	r3, [r4, #20]
 80038a8:	60a3      	str	r3, [r4, #8]
 80038aa:	e7f4      	b.n	8003896 <__swsetup_r+0x92>
 80038ac:	2000      	movs	r0, #0
 80038ae:	e7f7      	b.n	80038a0 <__swsetup_r+0x9c>
 80038b0:	20000064 	.word	0x20000064

080038b4 <_fstat_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4d07      	ldr	r5, [pc, #28]	; (80038d4 <_fstat_r+0x20>)
 80038b8:	2300      	movs	r3, #0
 80038ba:	4604      	mov	r4, r0
 80038bc:	4608      	mov	r0, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	602b      	str	r3, [r5, #0]
 80038c2:	f7fd fa21 	bl	8000d08 <_fstat>
 80038c6:	1c43      	adds	r3, r0, #1
 80038c8:	d102      	bne.n	80038d0 <_fstat_r+0x1c>
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	b103      	cbz	r3, 80038d0 <_fstat_r+0x1c>
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	bd38      	pop	{r3, r4, r5, pc}
 80038d2:	bf00      	nop
 80038d4:	20000300 	.word	0x20000300

080038d8 <_isatty_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4d06      	ldr	r5, [pc, #24]	; (80038f4 <_isatty_r+0x1c>)
 80038dc:	2300      	movs	r3, #0
 80038de:	4604      	mov	r4, r0
 80038e0:	4608      	mov	r0, r1
 80038e2:	602b      	str	r3, [r5, #0]
 80038e4:	f7fd fa11 	bl	8000d0a <_isatty>
 80038e8:	1c43      	adds	r3, r0, #1
 80038ea:	d102      	bne.n	80038f2 <_isatty_r+0x1a>
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	b103      	cbz	r3, 80038f2 <_isatty_r+0x1a>
 80038f0:	6023      	str	r3, [r4, #0]
 80038f2:	bd38      	pop	{r3, r4, r5, pc}
 80038f4:	20000300 	.word	0x20000300

080038f8 <_sbrk_r>:
 80038f8:	b538      	push	{r3, r4, r5, lr}
 80038fa:	4d06      	ldr	r5, [pc, #24]	; (8003914 <_sbrk_r+0x1c>)
 80038fc:	2300      	movs	r3, #0
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	602b      	str	r3, [r5, #0]
 8003904:	f000 f808 	bl	8003918 <_sbrk>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	d102      	bne.n	8003912 <_sbrk_r+0x1a>
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	b103      	cbz	r3, 8003912 <_sbrk_r+0x1a>
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	bd38      	pop	{r3, r4, r5, pc}
 8003914:	20000300 	.word	0x20000300

08003918 <_sbrk>:
 8003918:	4a04      	ldr	r2, [pc, #16]	; (800392c <_sbrk+0x14>)
 800391a:	6811      	ldr	r1, [r2, #0]
 800391c:	4603      	mov	r3, r0
 800391e:	b909      	cbnz	r1, 8003924 <_sbrk+0xc>
 8003920:	4903      	ldr	r1, [pc, #12]	; (8003930 <_sbrk+0x18>)
 8003922:	6011      	str	r1, [r2, #0]
 8003924:	6810      	ldr	r0, [r2, #0]
 8003926:	4403      	add	r3, r0
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4770      	bx	lr
 800392c:	20000310 	.word	0x20000310
 8003930:	20000318 	.word	0x20000318

08003934 <_init>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr

08003940 <_fini>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	bf00      	nop
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr
